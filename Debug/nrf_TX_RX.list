
nrf_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e98  08007e98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007e98  08007e98  00017e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea0  08007ea0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000078  08007f20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  08007f20  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db72  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b13  00000000  00000000  0003dc1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00042f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000432f  00000000  00000000  000445f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a02d  00000000  00000000  00048927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5278  00000000  00000000  00062954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b28  00000000  00000000  00107c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c30 	.word	0x08007c30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007c30 	.word	0x08007c30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ffda 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f846 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9b4 	bl	80008fc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000594:	f000 f952 	bl	800083c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f986 	bl	80008a8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800059c:	f000 f8a8 	bl	80006f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  testReadWriteSetingd();			// For debug
 80005a0:	f000 fe5e 	bl	8001260 <testReadWriteSetingd>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f003 ff36 	bl	8004414 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0x6c>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f004 f828 	bl	8004602 <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <main+0x70>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <main+0x74>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x78>)
 80005be:	f003 ff73 	bl	80044a8 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x7c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of nrf_task */
  nrf_taskHandle = osThreadNew(Start_nrf_task, NULL, &nrf_task_attributes);
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <main+0x80>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480e      	ldr	r0, [pc, #56]	; (8000608 <main+0x84>)
 80005ce:	f003 ff6b 	bl	80044a8 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <main+0x88>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of AdcTask */
  AdcTaskHandle = osThreadNew(StartAdcTask, NULL, &AdcTask_attributes);
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <main+0x8c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x90>)
 80005de:	f003 ff63 	bl	80044a8 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <main+0x94>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f003 ff38 	bl	800445c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x68>
 80005ee:	bf00      	nop
 80005f0:	08007ddc 	.word	0x08007ddc
 80005f4:	200001d4 	.word	0x200001d4
 80005f8:	08007d70 	.word	0x08007d70
 80005fc:	08000a31 	.word	0x08000a31
 8000600:	200001c8 	.word	0x200001c8
 8000604:	08007d94 	.word	0x08007d94
 8000608:	08000a41 	.word	0x08000a41
 800060c:	200001cc 	.word	0x200001cc
 8000610:	08007db8 	.word	0x08007db8
 8000614:	08000a61 	.word	0x08000a61
 8000618:	200001d0 	.word	0x200001d0

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fe20 	bl	8007270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xd0>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000690:	2319      	movs	r3, #25
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fdfd 	bl	80022a4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 f9f8 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f85f 	bl	8002794 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f9e2 	bl	8000aa4 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000702:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <MX_ADC1_Init+0x140>)
 8000704:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <MX_ADC1_Init+0x144>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000708:	4b49      	ldr	r3, [pc, #292]	; (8000830 <MX_ADC1_Init+0x140>)
 800070a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b47      	ldr	r3, [pc, #284]	; (8000830 <MX_ADC1_Init+0x140>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000716:	4b46      	ldr	r3, [pc, #280]	; (8000830 <MX_ADC1_Init+0x140>)
 8000718:	2201      	movs	r2, #1
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071c:	4b44      	ldr	r3, [pc, #272]	; (8000830 <MX_ADC1_Init+0x140>)
 800071e:	2201      	movs	r2, #1
 8000720:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b43      	ldr	r3, [pc, #268]	; (8000830 <MX_ADC1_Init+0x140>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b41      	ldr	r3, [pc, #260]	; (8000830 <MX_ADC1_Init+0x140>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000730:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <MX_ADC1_Init+0x140>)
 8000732:	4a41      	ldr	r2, [pc, #260]	; (8000838 <MX_ADC1_Init+0x148>)
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <MX_ADC1_Init+0x140>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 800073c:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <MX_ADC1_Init+0x140>)
 800073e:	2207      	movs	r2, #7
 8000740:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <MX_ADC1_Init+0x140>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <MX_ADC1_Init+0x140>)
 800074c:	2201      	movs	r2, #1
 800074e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <MX_ADC1_Init+0x140>)
 8000752:	f000 ff37 	bl	80015c4 <HAL_ADC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f9a2 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000760:	2301      	movs	r3, #1
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000768:	2301      	movs	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	482f      	ldr	r0, [pc, #188]	; (8000830 <MX_ADC1_Init+0x140>)
 8000772:	f001 f899 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800077c:	f000 f992 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000780:	2305      	movs	r3, #5
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4828      	ldr	r0, [pc, #160]	; (8000830 <MX_ADC1_Init+0x140>)
 800078e:	f001 f88b 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000798:	f000 f984 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800079c:	2306      	movs	r3, #6
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4821      	ldr	r0, [pc, #132]	; (8000830 <MX_ADC1_Init+0x140>)
 80007aa:	f001 f87d 	bl	80018a8 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007b4:	f000 f976 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <MX_ADC1_Init+0x140>)
 80007c6:	f001 f86f 	bl	80018a8 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007d0:	f000 f968 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007d4:	2308      	movs	r3, #8
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80007d8:	2305      	movs	r3, #5
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <MX_ADC1_Init+0x140>)
 80007e2:	f001 f861 	bl	80018a8 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80007ec:	f000 f95a 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80007f4:	2306      	movs	r3, #6
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_ADC1_Init+0x140>)
 80007fe:	f001 f853 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000808:	f000 f94c 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800080c:	2309      	movs	r3, #9
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000810:	2307      	movs	r3, #7
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0x140>)
 800081a:	f001 f845 	bl	80018a8 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000824:	f000 f93e 	bl	8000aa4 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000e4 	.word	0x200000e4
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI2_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000870:	2218      	movs	r2, #24
 8000872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI2_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI2_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI2_Init+0x64>)
 800088e:	f002 f993 	bl	8002bb8 <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f904 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000012c 	.word	0x2000012c
 80008a4:	40003800 	.word	0x40003800

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f003 f992 	bl	8003c08 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f8db 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000184 	.word	0x20000184
 80008f8:	40011000 	.word	0x40011000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <MX_GPIO_Init+0x124>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_GPIO_Init+0x124>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_GPIO_Init+0x124>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2c      	ldr	r2, [pc, #176]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_GPIO_Init+0x124>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000988:	4826      	ldr	r0, [pc, #152]	; (8000a24 <MX_GPIO_Init+0x128>)
 800098a:	f001 fc33 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2118      	movs	r1, #24
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x12c>)
 8000994:	f001 fc2e 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_GPIO_Init+0x128>)
 80009b2:	f001 fa83 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 80009b6:	2304      	movs	r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <MX_GPIO_Init+0x12c>)
 80009cc:	f001 fa76 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 80009d0:	2318      	movs	r3, #24
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <MX_GPIO_Init+0x12c>)
 80009e8:	f001 fa68 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <MX_GPIO_Init+0x130>)
 8000a02:	f001 fa5b 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	f001 fa2c 	bl	8001e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a10:	2008      	movs	r0, #8
 8000a12:	f001 fa45 	bl	8001ea0 <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

//	  xSemaphoreTake(semFromNrfIRQ_PinHandle ,portMAX_DELAY);
//	  HAL_GPIO_TogglePin(GPIOA, TEST_OUT_Pin);


	  osDelay(100);
 8000a38:	2064      	movs	r0, #100	; 0x64
 8000a3a:	f003 fdc7 	bl	80045cc <osDelay>
 8000a3e:	e7fb      	b.n	8000a38 <StartDefaultTask+0x8>

08000a40 <Start_nrf_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_nrf_task */
void Start_nrf_task(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_nrf_task */
  /* Infinite loop */

	osDelay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4c:	f003 fdbe 	bl	80045cc <osDelay>

	#if NRF_MODE == TX
	  NRF24_init_TX();
	#else
	  NRF24_init_RX();
 8000a50:	f000 fa5e 	bl	8000f10 <NRF24_init_RX>

#if NRF_MODE == TX
	 // NRF24L01_Transmit();
#else
	  // NRF24L01_Receive();
	NRF24L01_Receive_Real_Data();
 8000a54:	f000 fc7c 	bl	8001350 <NRF24L01_Receive_Real_Data>
#endif

	  osDelay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f003 fdb7 	bl	80045cc <osDelay>
	NRF24L01_Receive_Real_Data();
 8000a5e:	e7f9      	b.n	8000a54 <Start_nrf_task+0x14>

08000a60 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
  /* Infinite loop */

	uint16_t adc_values[7] = {0};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	819a      	strh	r2, [r3, #12]





	  osDelay(500);
 8000a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7a:	f003 fda7 	bl	80045cc <osDelay>
 8000a7e:	e7fa      	b.n	8000a76 <StartAdcTask+0x16>

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 fd77 	bl	8001584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40014400 	.word	0x40014400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x54>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_MspInit+0x54>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x54>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	210f      	movs	r1, #15
 8000af2:	f06f 0001 	mvn.w	r0, #1
 8000af6:	f001 f9b7 	bl	8001e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <HAL_ADC_MspInit+0xc0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d149      	bne.n	8000bbe <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_ADC_MspInit+0xc4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000b7e:	23e3      	movs	r3, #227	; 0xe3
 8000b80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <HAL_ADC_MspInit+0xc8>)
 8000b92:	f001 f993 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b96:	2303      	movs	r3, #3
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <HAL_ADC_MspInit+0xcc>)
 8000baa:	f001 f987 	bl	8001ebc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	2012      	movs	r0, #18
 8000bb4:	f001 f958 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f001 f971 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_SPI_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000c32:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c44:	2305      	movs	r3, #5
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_SPI_MspInit+0x8c>)
 8000c50:	f001 f934 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40003800 	.word	0x40003800
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_UART_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000ce0:	f001 f8ec 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_InitTick+0xd0>)
 8000d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d10:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <HAL_InitTick+0xd0>)
 8000d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d16:	6453      	str	r3, [r2, #68]	; 0x44
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_InitTick+0xd0>)
 8000d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d24:	f107 020c 	add.w	r2, r7, #12
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 ff10 	bl	8002b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d34:	f001 fefa 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8000d38:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_InitTick+0xd4>)
 8000d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d42:	0c9b      	lsrs	r3, r3, #18
 8000d44:	3b01      	subs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <HAL_InitTick+0xdc>)
 8000d4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d54:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d70:	f002 fcca 	bl	8003708 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11b      	bne.n	8000dba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000d82:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <HAL_InitTick+0xd8>)
 8000d84:	f002 fd1a 	bl	80037bc <HAL_TIM_Base_Start_IT>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d111      	bne.n	8000dba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d96:	2019      	movs	r0, #25
 8000d98:	f001 f882 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d808      	bhi.n	8000db4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	2019      	movs	r0, #25
 8000da8:	f001 f85e 	bl	8001e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0xe0>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e002      	b.n	8000dba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	200001d8 	.word	0x200001d8
 8000dd4:	40014400 	.word	0x40014400
 8000dd8:	20000008 	.word	0x20000008

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8000e0c:	2004      	movs	r0, #4
 8000e0e:	f001 fa25 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <ADC_IRQHandler+0x10>)
 8000e1e:	f000 fc14 	bl	800164a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000e4 	.word	0x200000e4

08000e2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e32:	f002 fd25 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001d8 	.word	0x200001d8

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f006 f9c4 	bl	80071fc <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20010000 	.word	0x20010000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000220 	.word	0x20000220
 8000ea8:	20004c60 	.word	0x20004c60

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <DelayMicro>:
void NRF24L01_RX_Mode(void);
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <DelayMicro+0x38>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <DelayMicro+0x3c>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	0a9b      	lsrs	r3, r3, #10
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	607b      	str	r3, [r7, #4]

	/* Wait till done */
	while (micros--) ;
 8000eee:	bf00      	nop
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1fa      	bne.n	8000ef0 <DelayMicro+0x20>
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	02659117 	.word	0x02659117

08000f10 <NRF24_init_RX>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_init_RX(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	 CE_RESET;
 8000f14:	2200      	movs	r2, #0
 8000f16:	2108      	movs	r1, #8
 8000f18:	4825      	ldr	r0, [pc, #148]	; (8000fb0 <NRF24_init_RX+0xa0>)
 8000f1a:	f001 f96b 	bl	80021f4 <HAL_GPIO_WritePin>
	 //DelayMicro(5000);
	 osDelay(5);
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f003 fb54 	bl	80045cc <osDelay>
//	 HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000f24:	210a      	movs	r1, #10
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f87c 	bl	8001024 <NRF24_WriteReg>
	 //DelayMicro(5000);
//	 HAL_Delay(5);
	 osDelay(5);
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f003 fb4d 	bl	80045cc <osDelay>

	 NRF24_WriteReg(EN_AA, 0x02); 			// Enable pipe1
 8000f32:	2102      	movs	r1, #2
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f875 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x02); 		// Enable Pipe1
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f000 f871 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000f42:	2101      	movs	r1, #1
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f86d 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 8000f4a:	215f      	movs	r1, #95	; 0x5f
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f000 f869 	bl	8001024 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 8000f52:	f000 f895 	bl	8001080 <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f000 f863 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 f85f 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 8000f66:	2170      	movs	r1, #112	; 0x70
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f000 f85b 	bl	8001024 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			//   2476 MHz
 8000f6e:	214c      	movs	r1, #76	; 0x4c
 8000f70:	2005      	movs	r0, #5
 8000f72:	f000 f857 	bl	8001024 <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, 0x06);		// TX_PWR:0dBm, Datarate:1Mbps  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< WAS
	 NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8000f76:	2126      	movs	r1, #38	; 0x26
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f000 f853 	bl	8001024 <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000f7e:	2203      	movs	r2, #3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <NRF24_init_RX+0xa4>)
 8000f82:	2010      	movs	r0, #16
 8000f84:	f000 f8d0 	bl	8001128 <NRF24_Write_Buf>

	 NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 8000f88:	2203      	movs	r2, #3
 8000f8a:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <NRF24_init_RX+0xa4>)
 8000f8c:	200b      	movs	r0, #11
 8000f8e:	f000 f8cb 	bl	8001128 <NRF24_Write_Buf>

	 NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);	 //Number of bytes in RX payload in data pipe 1
 8000f92:	2112      	movs	r1, #18
 8000f94:	2012      	movs	r0, #18
 8000f96:	f000 f845 	bl	8001024 <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 8000f9a:	f000 f93b 	bl	8001214 <NRF24L01_RX_Mode>
	 LED_OFF;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <NRF24_init_RX+0xa8>)
 8000fa6:	f001 f925 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	40020800 	.word	0x40020800

08000fbc <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <NRF24_ReadReg+0x60>)
 8000fd0:	f001 f910 	bl	80021f4 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8000fd4:	f107 020f 	add.w	r2, r7, #15
 8000fd8:	1df9      	adds	r1, r7, #7
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <NRF24_ReadReg+0x64>)
 8000fe4:	f002 f8be 	bl	8003164 <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	d00c      	beq.n	8001008 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8000ff2:	f107 020f 	add.w	r2, r7, #15
 8000ff6:	f107 010e 	add.w	r1, r7, #14
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <NRF24_ReadReg+0x64>)
 8001004:	f002 f8ae 	bl	8003164 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001008:	2201      	movs	r2, #1
 800100a:	2110      	movs	r1, #16
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <NRF24_ReadReg+0x60>)
 800100e:	f001 f8f1 	bl	80021f4 <HAL_GPIO_WritePin>

	return dt;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	2000012c 	.word	0x2000012c

08001024 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f043 0320 	orr.w	r3, r3, #32
 800103a:	b2db      	uxtb	r3, r3
 800103c:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <NRF24_WriteReg+0x54>)
 8001044:	f001 f8d6 	bl	80021f4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8001048:	1df9      	adds	r1, r7, #7
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	2201      	movs	r2, #1
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <NRF24_WriteReg+0x58>)
 8001052:	f001 fe3a 	bl	8002cca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 8001056:	1db9      	adds	r1, r7, #6
 8001058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105c:	2201      	movs	r2, #1
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <NRF24_WriteReg+0x58>)
 8001060:	f001 fe33 	bl	8002cca <HAL_SPI_Transmit>

	CS_OFF;
 8001064:	2201      	movs	r2, #1
 8001066:	2110      	movs	r1, #16
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <NRF24_WriteReg+0x54>)
 800106a:	f001 f8c3 	bl	80021f4 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020000 	.word	0x40020000
 800107c:	2000012c 	.word	0x2000012c

08001080 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8001086:	2350      	movs	r3, #80	; 0x50
 8001088:	713b      	strb	r3, [r7, #4]

	CS_ON;
 800108a:	2200      	movs	r2, #0
 800108c:	2110      	movs	r1, #16
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <NRF24_ToggleFeatures+0x4c>)
 8001090:	f001 f8b0 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	2201      	movs	r2, #1
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <NRF24_ToggleFeatures+0x50>)
 800109e:	f001 fe14 	bl	8002cca <HAL_SPI_Transmit>

	DelayMicro(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ff14 	bl	8000ed0 <DelayMicro>

	dt[0] = 0x73;
 80010a8:	2373      	movs	r3, #115	; 0x73
 80010aa:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80010ac:	1d39      	adds	r1, r7, #4
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	2201      	movs	r2, #1
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <NRF24_ToggleFeatures+0x50>)
 80010b6:	f001 fe08 	bl	8002cca <HAL_SPI_Transmit>
	CS_OFF;
 80010ba:	2201      	movs	r2, #1
 80010bc:	2110      	movs	r1, #16
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <NRF24_ToggleFeatures+0x4c>)
 80010c0:	f001 f898 	bl	80021f4 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020000 	.word	0x40020000
 80010d0:	2000012c 	.word	0x2000012c

080010d4 <NRF24_Read_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 80010e4:	2200      	movs	r2, #0
 80010e6:	2110      	movs	r1, #16
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <NRF24_Read_Buf+0x4c>)
 80010ea:	f001 f883 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 80010ee:	1df9      	adds	r1, r7, #7
 80010f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f4:	2201      	movs	r2, #1
 80010f6:	480b      	ldr	r0, [pc, #44]	; (8001124 <NRF24_Read_Buf+0x50>)
 80010f8:	f001 fde7 	bl	8002cca <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	6839      	ldr	r1, [r7, #0]
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <NRF24_Read_Buf+0x50>)
 8001108:	f001 ff1b 	bl	8002f42 <HAL_SPI_Receive>

	CS_OFF;
 800110c:	2201      	movs	r2, #1
 800110e:	2110      	movs	r1, #16
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <NRF24_Read_Buf+0x4c>)
 8001112:	f001 f86f 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020000 	.word	0x40020000
 8001124:	2000012c 	.word	0x2000012c

08001128 <NRF24_Write_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	b2db      	uxtb	r3, r3
 8001140:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8001142:	2200      	movs	r2, #0
 8001144:	2110      	movs	r1, #16
 8001146:	480f      	ldr	r0, [pc, #60]	; (8001184 <NRF24_Write_Buf+0x5c>)
 8001148:	f001 f854 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 800114c:	1df9      	adds	r1, r7, #7
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	2201      	movs	r2, #1
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <NRF24_Write_Buf+0x60>)
 8001156:	f001 fdb8 	bl	8002cca <HAL_SPI_Transmit>

	DelayMicro(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff feb8 	bl	8000ed0 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <NRF24_Write_Buf+0x60>)
 800116c:	f001 fdad 	bl	8002cca <HAL_SPI_Transmit>

	CS_OFF;
 8001170:	2201      	movs	r2, #1
 8001172:	2110      	movs	r1, #16
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <NRF24_Write_Buf+0x5c>)
 8001176:	f001 f83d 	bl	80021f4 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020000 	.word	0x40020000
 8001188:	2000012c 	.word	0x2000012c

0800118c <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8001192:	23e2      	movs	r3, #226	; 0xe2
 8001194:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <NRF24_FlushRX+0x3c>)
 800119c:	f001 f82a 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	2201      	movs	r2, #1
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <NRF24_FlushRX+0x40>)
 80011aa:	f001 fd8e 	bl	8002cca <HAL_SPI_Transmit>
	DelayMicro(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff fe8e 	bl	8000ed0 <DelayMicro>
	CS_OFF;
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <NRF24_FlushRX+0x3c>)
 80011ba:	f001 f81b 	bl	80021f4 <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020000 	.word	0x40020000
 80011cc:	2000012c 	.word	0x2000012c

080011d0 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 80011d6:	23e1      	movs	r3, #225	; 0xe1
 80011d8:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <NRF24_FlushTX+0x3c>)
 80011e0:	f001 f808 	bl	80021f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80011e4:	1d39      	adds	r1, r7, #4
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	2201      	movs	r2, #1
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <NRF24_FlushTX+0x40>)
 80011ee:	f001 fd6c 	bl	8002cca <HAL_SPI_Transmit>
	DelayMicro(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fe6c 	bl	8000ed0 <DelayMicro>
	CS_OFF;
 80011f8:	2201      	movs	r2, #1
 80011fa:	2110      	movs	r1, #16
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <NRF24_FlushTX+0x3c>)
 80011fe:	f000 fff9 	bl	80021f4 <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000
 8001210:	2000012c 	.word	0x2000012c

08001214 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fecc 	bl	8000fbc <NRF24_ReadReg>
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f043 0303 	orr.w	r3, r3, #3
 800122e:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4619      	mov	r1, r3
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fef5 	bl	8001024 <NRF24_WriteReg>
	CE_SET;
 800123a:	2201      	movs	r2, #1
 800123c:	2108      	movs	r1, #8
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <NRF24L01_RX_Mode+0x48>)
 8001240:	f000 ffd8 	bl	80021f4 <HAL_GPIO_WritePin>

	DelayMicro(150);
 8001244:	2096      	movs	r0, #150	; 0x96
 8001246:	f7ff fe43 	bl	8000ed0 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 800124a:	f7ff ff9f 	bl	800118c <NRF24_FlushRX>
	NRF24_FlushTX();
 800124e:	f7ff ffbf 	bl	80011d0 <NRF24_FlushTX>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40020000 	.word	0x40020000

08001260 <testReadWriteSetingd>:
// -------------------------------------------------------------------------------------
void testReadWriteSetingd(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af02      	add	r7, sp, #8
	uint8_t dt_reg=0;
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]

	dt_reg = NRF24_ReadReg(CONFIG);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fea6 	bl	8000fbc <NRF24_ReadReg>
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"CONFIG: 0x%02Xrn",dt_reg);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	461a      	mov	r2, r3
 8001278:	492c      	ldr	r1, [pc, #176]	; (800132c <testReadWriteSetingd+0xcc>)
 800127a:	482d      	ldr	r0, [pc, #180]	; (8001330 <testReadWriteSetingd+0xd0>)
 800127c:	f006 f90e 	bl	800749c <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);

	dt_reg = NRF24_ReadReg(EN_AA);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe9b 	bl	8000fbc <NRF24_ReadReg>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"EN_AA: 0x%02Xrn",dt_reg);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	461a      	mov	r2, r3
 800128e:	4929      	ldr	r1, [pc, #164]	; (8001334 <testReadWriteSetingd+0xd4>)
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <testReadWriteSetingd+0xd0>)
 8001292:	f006 f903 	bl	800749c <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(EN_RXADDR);
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fe90 	bl	8000fbc <NRF24_ReadReg>
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"EN_RXADDR: 0x%02Xrn",dt_reg);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4924      	ldr	r1, [pc, #144]	; (8001338 <testReadWriteSetingd+0xd8>)
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <testReadWriteSetingd+0xd0>)
 80012a8:	f006 f8f8 	bl	800749c <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(STATUS);
 80012ac:	2007      	movs	r0, #7
 80012ae:	f7ff fe85 	bl	8000fbc <NRF24_ReadReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"STATUS: 0x%02Xrn",dt_reg);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4920      	ldr	r1, [pc, #128]	; (800133c <testReadWriteSetingd+0xdc>)
 80012bc:	481c      	ldr	r0, [pc, #112]	; (8001330 <testReadWriteSetingd+0xd0>)
 80012be:	f006 f8ed 	bl	800749c <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(RF_SETUP);
 80012c2:	2006      	movs	r0, #6
 80012c4:	f7ff fe7a 	bl	8000fbc <NRF24_ReadReg>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"RF_SETUP: 0x%02Xrn",dt_reg);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	461a      	mov	r2, r3
 80012d0:	491b      	ldr	r1, [pc, #108]	; (8001340 <testReadWriteSetingd+0xe0>)
 80012d2:	4817      	ldr	r0, [pc, #92]	; (8001330 <testReadWriteSetingd+0xd0>)
 80012d4:	f006 f8e2 	bl	800749c <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);

    NRF24_Read_Buf(TX_ADDR,buf1,3);
 80012d8:	2203      	movs	r2, #3
 80012da:	491a      	ldr	r1, [pc, #104]	; (8001344 <testReadWriteSetingd+0xe4>)
 80012dc:	2010      	movs	r0, #16
 80012de:	f7ff fef9 	bl	80010d4 <NRF24_Read_Buf>
	sprintf(str1,"TX_ADDR: 0x%02X, 0x%02X, 0x%02Xrn",buf1[0],buf1[1],buf1[2]);
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <testReadWriteSetingd+0xe4>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <testReadWriteSetingd+0xe4>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <testReadWriteSetingd+0xe4>)
 80012f0:	789b      	ldrb	r3, [r3, #2]
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	460b      	mov	r3, r1
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <testReadWriteSetingd+0xe8>)
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <testReadWriteSetingd+0xd0>)
 80012fa:	f006 f8cf 	bl	800749c <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 80012fe:	2203      	movs	r2, #3
 8001300:	4910      	ldr	r1, [pc, #64]	; (8001344 <testReadWriteSetingd+0xe4>)
 8001302:	200a      	movs	r0, #10
 8001304:	f7ff fee6 	bl	80010d4 <NRF24_Read_Buf>
	sprintf(str1,"RX_ADDR: 0x%02X, 0x%02X, 0x%02Xrn",buf1[0],buf1[1],buf1[2]);
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <testReadWriteSetingd+0xe4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <testReadWriteSetingd+0xe4>)
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <testReadWriteSetingd+0xe4>)
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	460b      	mov	r3, r1
 800131c:	490b      	ldr	r1, [pc, #44]	; (800134c <testReadWriteSetingd+0xec>)
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <testReadWriteSetingd+0xd0>)
 8001320:	f006 f8bc 	bl	800749c <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);



}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08007c7c 	.word	0x08007c7c
 8001330:	20000094 	.word	0x20000094
 8001334:	08007c90 	.word	0x08007c90
 8001338:	08007ca0 	.word	0x08007ca0
 800133c:	08007cb4 	.word	0x08007cb4
 8001340:	08007cc8 	.word	0x08007cc8
 8001344:	200000bc 	.word	0x200000bc
 8001348:	08007cdc 	.word	0x08007cdc
 800134c:	08007d00 	.word	0x08007d00

08001350 <NRF24L01_Receive_Real_Data>:
//	}

}
// -------------------------------------------------------------------------------------
void NRF24L01_Receive_Real_Data(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ac      	sub	sp, #176	; 0xb0
 8001354:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	uint16_t dt=0;
 800135c:	2300      	movs	r3, #0
 800135e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}			//	 Замінити це на нотифікацію від зміни ножки або семафор
 8001362:	bf00      	nop
 8001364:	2104      	movs	r1, #4
 8001366:	4858      	ldr	r0, [pc, #352]	; (80014c8 <NRF24L01_Receive_Real_Data+0x178>)
 8001368:	f000 ff2c 	bl	80021c4 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d0f8      	beq.n	8001364 <NRF24L01_Receive_Real_Data+0x14>

	status = NRF24_ReadReg(STATUS);
 8001372:	2007      	movs	r0, #7
 8001374:	f7ff fe22 	bl	8000fbc <NRF24_ReadReg>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad

	sprintf(str1,"STATUS: 0x%02X\r\n",status);
 800137e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001382:	461a      	mov	r2, r3
 8001384:	4951      	ldr	r1, [pc, #324]	; (80014cc <NRF24L01_Receive_Real_Data+0x17c>)
 8001386:	4852      	ldr	r0, [pc, #328]	; (80014d0 <NRF24L01_Receive_Real_Data+0x180>)
 8001388:	f006 f888 	bl	800749c <siprintf>
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	LED_TGL;
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4850      	ldr	r0, [pc, #320]	; (80014d4 <NRF24L01_Receive_Real_Data+0x184>)
 8001392:	f000 ff48 	bl	8002226 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8001396:	200a      	movs	r0, #10
 8001398:	f7ff fd9a 	bl	8000ed0 <DelayMicro>

	status = NRF24_ReadReg(STATUS);
 800139c:	2007      	movs	r0, #7
 800139e:	f7ff fe0d 	bl	8000fbc <NRF24_ReadReg>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad

	if(status & 0x40)			// If new data in RX buffer available
 80013a8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80013ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8085 	beq.w	80014c0 <NRF24L01_Receive_Real_Data+0x170>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80013b6:	2212      	movs	r2, #18
 80013b8:	4947      	ldr	r1, [pc, #284]	; (80014d8 <NRF24L01_Receive_Real_Data+0x188>)
 80013ba:	2061      	movs	r0, #97	; 0x61
 80013bc:	f7ff fe8a 	bl	80010d4 <NRF24_Read_Buf>
	    dt = *(int16_t*)RX_BUF;
 80013c0:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <NRF24L01_Receive_Real_Data+0x188>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	    //Clear_7219();
	    //Number_7219(dt);
	    dt = *(int16_t*)(RX_BUF+2);
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <NRF24L01_Receive_Real_Data+0x18c>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	    //NumberL_7219(dt);
	    NRF24_WriteReg(STATUS, 0x40);
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	2007      	movs	r0, #7
 80013d8:	f7ff fe24 	bl	8001024 <NRF24_WriteReg>

	    //char test_data[10] = "TEST\n\r";



	    char str[50] = {0};
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	222e      	movs	r2, #46	; 0x2e
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 ff42 	bl	8007270 <memset>

	    char str_main_buf[100] = {0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
 80013f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f4:	2260      	movs	r2, #96	; 0x60
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f005 ff39 	bl	8007270 <memset>

	    uint16_t rx_data = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	    char str_buf[15] = {0};
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800140a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	f8c3 2007 	str.w	r2, [r3, #7]

	    sprintf(str, "---------\n\r", rx_data);
 8001418:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800141c:	463b      	mov	r3, r7
 800141e:	4930      	ldr	r1, [pc, #192]	; (80014e0 <NRF24L01_Receive_Real_Data+0x190>)
 8001420:	4618      	mov	r0, r3
 8001422:	f006 f83b 	bl	800749c <siprintf>
	    HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 8001426:	4639      	mov	r1, r7
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	482d      	ldr	r0, [pc, #180]	; (80014e4 <NRF24L01_Receive_Real_Data+0x194>)
 8001430:	f002 fc37 	bl	8003ca2 <HAL_UART_Transmit>

	    memset(str_buf, 0, sizeof(str_buf));
 8001434:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001438:	220f      	movs	r2, #15
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f005 ff17 	bl	8007270 <memset>

	    uint8_t r = 1;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	    for(uint8_t i = 0; i <= 12; i = i+2)
 8001448:	2300      	movs	r3, #0
 800144a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800144e:	e02b      	b.n	80014a8 <NRF24L01_Receive_Real_Data+0x158>
	    {

	    	rx_data = RX_BUF[0+i];
 8001450:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001454:	4a20      	ldr	r2, [pc, #128]	; (80014d8 <NRF24L01_Receive_Real_Data+0x188>)
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	    	rx_data = rx_data + (RX_BUF[1+i] * 256);
 800145c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001460:	3301      	adds	r3, #1
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <NRF24L01_Receive_Real_Data+0x188>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	b29b      	uxth	r3, r3
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b29a      	uxth	r2, r3
 800146c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001470:	4413      	add	r3, r2
 8001472:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	    	sprintf(str, "R%d: %d  ", r, rx_data);
 8001476:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800147a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800147e:	4638      	mov	r0, r7
 8001480:	4919      	ldr	r1, [pc, #100]	; (80014e8 <NRF24L01_Receive_Real_Data+0x198>)
 8001482:	f006 f80b 	bl	800749c <siprintf>

	    	strcat(str_main_buf, str);
 8001486:	463a      	mov	r2, r7
 8001488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f006 f824 	bl	80074dc <strcat>
	    	r++;
 8001494:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001498:	3301      	adds	r3, #1
 800149a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	    for(uint8_t i = 0; i <= 12; i = i+2)
 800149e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80014a2:	3302      	adds	r3, #2
 80014a4:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80014a8:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d9cf      	bls.n	8001450 <NRF24L01_Receive_Real_Data+0x100>
	    }

	    HAL_UART_Transmit(&huart1, str_main_buf, sizeof(str_main_buf), 1000);
 80014b0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <NRF24L01_Receive_Real_Data+0x194>)
 80014bc:	f002 fbf1 	bl	8003ca2 <HAL_UART_Transmit>



	  }
}
 80014c0:	bf00      	nop
 80014c2:	37b0      	adds	r7, #176	; 0xb0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020000 	.word	0x40020000
 80014cc:	08007d2c 	.word	0x08007d2c
 80014d0:	20000094 	.word	0x20000094
 80014d4:	40020800 	.word	0x40020800
 80014d8:	20000224 	.word	0x20000224
 80014dc:	20000226 	.word	0x20000226
 80014e0:	08007d40 	.word	0x08007d40
 80014e4:	20000184 	.word	0x20000184
 80014e8:	08007d4c 	.word	0x08007d4c

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff fcc9 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f005 fe75 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f831 	bl	8000584 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001530:	08007ea8 	.word	0x08007ea8
  ldr r2, =_sbss
 8001534:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001538:	20004c5c 	.word	0x20004c5c

0800153c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <DMA1_Stream0_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_Init+0x40>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_Init+0x40>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x40>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fc72 	bl	8001e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f7ff fbc2 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fa9c 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000238 	.word	0x20000238

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000238 	.word	0x20000238

080015c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e033      	b.n	8001642 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fa90 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800160a:	f023 0302 	bic.w	r3, r3, #2
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fa68 	bl	8001aec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
 8001632:	e001      	b.n	8001638 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d049      	beq.n	8001714 <HAL_ADC_IRQHandler+0xca>
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d046      	beq.n	8001714 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d12b      	bne.n	8001704 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d127      	bne.n	8001704 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d119      	bne.n	8001704 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0220 	bic.w	r2, r2, #32
 80016de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8b0 	bl	800186a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0212 	mvn.w	r2, #18
 8001712:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d057      	beq.n	80017da <HAL_ADC_IRQHandler+0x190>
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d054      	beq.n	80017da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d139      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800176e:	2b00      	cmp	r3, #0
 8001770:	d12b      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800177c:	2b00      	cmp	r3, #0
 800177e:	d124      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11d      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fa8a 	bl	8001ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 020c 	mvn.w	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d017      	beq.n	8001820 <HAL_ADC_IRQHandler+0x1d6>
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d014      	beq.n	8001820 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10d      	bne.n	8001820 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f834 	bl	800187e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f06f 0201 	mvn.w	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800182e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d015      	beq.n	8001862 <HAL_ADC_IRQHandler+0x218>
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f043 0202 	orr.w	r2, r3, #2
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0220 	mvn.w	r2, #32
 8001850:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f81d 	bl	8001892 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0220 	mvn.w	r2, #32
 8001860:	601a      	str	r2, [r3, #0]
  }
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1c>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e105      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x228>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	d925      	bls.n	8001920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68d9      	ldr	r1, [r3, #12]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	3b1e      	subs	r3, #30
 80018ea:	2207      	movs	r2, #7
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43da      	mvns	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	400a      	ands	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68d9      	ldr	r1, [r3, #12]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	4603      	mov	r3, r0
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4403      	add	r3, r0
 8001912:	3b1e      	subs	r3, #30
 8001914:	409a      	lsls	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	e022      	b.n	8001966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	2207      	movs	r2, #7
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	400a      	ands	r2, r1
 8001942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6919      	ldr	r1, [r3, #16]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	4603      	mov	r3, r0
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4403      	add	r3, r0
 800195c:	409a      	lsls	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d824      	bhi.n	80019b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	3b05      	subs	r3, #5
 8001980:	221f      	movs	r2, #31
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	400a      	ands	r2, r1
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	3b05      	subs	r3, #5
 80019aa:	fa00 f203 	lsl.w	r2, r0, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
 80019b6:	e04c      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d824      	bhi.n	8001a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	3b23      	subs	r3, #35	; 0x23
 80019d2:	221f      	movs	r2, #31
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43da      	mvns	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	400a      	ands	r2, r1
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b23      	subs	r3, #35	; 0x23
 80019fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
 8001a08:	e023      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b41      	subs	r3, #65	; 0x41
 8001a1c:	221f      	movs	r2, #31
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	400a      	ands	r2, r1
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b41      	subs	r3, #65	; 0x41
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_ADC_ConfigChannel+0x234>)
 8001a54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <HAL_ADC_ConfigChannel+0x238>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d109      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1cc>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_ADC_ConfigChannel+0x238>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x21e>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d003      	beq.n	8001a8e <HAL_ADC_ConfigChannel+0x1e6>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d111      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_ADC_ConfigChannel+0x23c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_ADC_ConfigChannel+0x240>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9a      	lsrs	r2, r3, #18
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f9      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af4:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <ADC_Init+0x1f0>)
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	021a      	lsls	r2, r3, #8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <ADC_Init+0x1f4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d022      	beq.n	8001bca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	e00f      	b.n	8001bea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0202 	bic.w	r2, r2, #2
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e1b      	ldrb	r3, [r3, #24]
 8001c04:	005a      	lsls	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	3b01      	subs	r3, #1
 8001c44:	035a      	lsls	r2, r3, #13
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e007      	b.n	8001c60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	051a      	lsls	r2, r3, #20
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6899      	ldr	r1, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ca2:	025a      	lsls	r2, r3, #9
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	029a      	lsls	r2, r3, #10
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40012300 	.word	0x40012300
 8001ce0:	0f000001 	.word	0x0f000001

08001ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff4c 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7a:	f7ff ff61 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f7ff ffb1 	bl	8001dec <NVIC_EncodePriority>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff80 	bl	8001d98 <__NVIC_SetPriority>
}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff54 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e159      	b.n	800218c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8148 	bne.w	8002186 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a2 	beq.w	8002186 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b57      	ldr	r3, [pc, #348]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a56      	ldr	r2, [pc, #344]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a49      	ldr	r2, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2f0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_GPIO_Init+0x202>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a48      	ldr	r2, [pc, #288]	; (80021b0 <HAL_GPIO_Init+0x2f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_GPIO_Init+0x1fe>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a47      	ldr	r2, [pc, #284]	; (80021b4 <HAL_GPIO_Init+0x2f8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00d      	beq.n	80020b6 <HAL_GPIO_Init+0x1fa>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <HAL_GPIO_Init+0x2fc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x1f6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a45      	ldr	r2, [pc, #276]	; (80021bc <HAL_GPIO_Init+0x300>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_GPIO_Init+0x1f2>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x204>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x2ec>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <HAL_GPIO_Init+0x304>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_GPIO_Init+0x304>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_GPIO_Init+0x304>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f aea2 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40013c00 	.word	0x40013c00

080021c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002210:	e003      	b.n	800221a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43d9      	mvns	r1, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f806 	bl	800228c <HAL_GPIO_EXTI_Callback>
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e267      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	4b88      	ldr	r3, [pc, #544]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b85      	ldr	r3, [pc, #532]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b82      	ldr	r3, [pc, #520]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b7e      	ldr	r3, [pc, #504]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05b      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e242      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x74>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x98>
 8002322:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6f      	ldr	r2, [pc, #444]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 800233c:	4b69      	ldr	r3, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a68      	ldr	r2, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff f926 	bl	80015ac <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f922 	bl	80015ac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e207      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff f912 	bl	80015ac <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff f90e 	bl	80015ac <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1f3      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c7      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4937      	ldr	r1, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <HAL_RCC_OscConfig+0x244>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff f8c7 	bl	80015ac <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff f8c3 	bl	80015ac <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a8      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4925      	ldr	r1, [pc, #148]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0x244>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f8a6 	bl	80015ac <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff f8a2 	bl	80015ac <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e187      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d036      	beq.n	80024fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_RCC_OscConfig+0x248>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7ff f886 	bl	80015ac <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff f882 	bl	80015ac <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e167      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x200>
 80024c2:	e01b      	b.n	80024fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x248>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7ff f86f 	bl	80015ac <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e00e      	b.n	80024f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7ff f86b 	bl	80015ac <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d907      	bls.n	80024f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e150      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
 80024e4:	40023800 	.word	0x40023800
 80024e8:	42470000 	.word	0x42470000
 80024ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f0:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ea      	bne.n	80024d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8097 	beq.w	8002638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10f      	bne.n	800253a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b74      	ldr	r3, [pc, #464]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a73      	ldr	r2, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7ff f82b 	bl	80015ac <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7ff f827 	bl	80015ac <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e10c      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x474>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x2ea>
 8002580:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6713      	str	r3, [r2, #112]	; 0x70
 800258c:	e01c      	b.n	80025c8 <HAL_RCC_OscConfig+0x324>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b05      	cmp	r3, #5
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x30c>
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	e00b      	b.n	80025c8 <HAL_RCC_OscConfig+0x324>
 80025b0:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe ffec 	bl	80015ac <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe ffe8 	bl	80015ac <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0cb      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0ee      	beq.n	80025d8 <HAL_RCC_OscConfig+0x334>
 80025fa:	e014      	b.n	8002626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7fe ffd6 	bl	80015ac <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe ffd2 	bl	80015ac <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0b5      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ee      	bne.n	8002604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a38      	ldr	r2, [pc, #224]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80a1 	beq.w	8002784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d05c      	beq.n	8002708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d141      	bne.n	80026da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe ffa6 	bl	80015ac <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe ffa2 	bl	80015ac <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e087      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b27      	ldr	r3, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	491b      	ldr	r1, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x478>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe ff7b 	bl	80015ac <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe ff77 	bl	80015ac <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e05c      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x416>
 80026d8:	e054      	b.n	8002784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x478>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff64 	bl	80015ac <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe ff60 	bl	80015ac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e045      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x470>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x444>
 8002706:	e03d      	b.n	8002784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e038      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d028      	beq.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d121      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d11a      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	4293      	cmp	r3, r2
 800275a:	d111      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fe92 	bl	80015ac <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fe8e 	bl	80015ac <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe f9dc 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	08007dec 	.word	0x08007dec
 8002958:	20000000 	.word	0x20000000
 800295c:	20000008 	.word	0x20000008

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002964:	b090      	sub	sp, #64	; 0x40
 8002966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
 800296c:	2300      	movs	r3, #0
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002984:	2b08      	cmp	r3, #8
 8002986:	f200 80a1 	bhi.w	8002acc <HAL_RCC_GetSysClockFreq+0x16c>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3a>
 8002992:	e09b      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002998:	e09b      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800299e:	e098      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029aa:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d028      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	2200      	movs	r2, #0
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	627a      	str	r2, [r7, #36]	; 0x24
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029c8:	2100      	movs	r1, #0
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029cc:	fb03 f201 	mul.w	r2, r3, r1
 80029d0:	2300      	movs	r3, #0
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	4a43      	ldr	r2, [pc, #268]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80029da:	fba0 1202 	umull	r1, r2, r0, r2
 80029de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e0:	460a      	mov	r2, r1
 80029e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80029e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e6:	4413      	add	r3, r2
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	2200      	movs	r2, #0
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	61fa      	str	r2, [r7, #28]
 80029f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029fa:	f7fd fc41 	bl	8000280 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4613      	mov	r3, r2
 8002a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a06:	e053      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a08:	4b35      	ldr	r3, [pc, #212]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	099b      	lsrs	r3, r3, #6
 8002a0e:	2200      	movs	r2, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	617a      	str	r2, [r7, #20]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a1a:	f04f 0b00 	mov.w	fp, #0
 8002a1e:	4652      	mov	r2, sl
 8002a20:	465b      	mov	r3, fp
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	0159      	lsls	r1, r3, #5
 8002a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a30:	0150      	lsls	r0, r2, #5
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	ebb2 080a 	subs.w	r8, r2, sl
 8002a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a52:	ebb2 0408 	subs.w	r4, r2, r8
 8002a56:	eb63 0509 	sbc.w	r5, r3, r9
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	00eb      	lsls	r3, r5, #3
 8002a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a68:	00e2      	lsls	r2, r4, #3
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	eb14 030a 	adds.w	r3, r4, sl
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	eb45 030b 	adc.w	r3, r5, fp
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	60fa      	str	r2, [r7, #12]
 8002aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa4:	f7fd fbec 	bl	8000280 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ac0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3740      	adds	r7, #64	; 0x40
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	017d7840 	.word	0x017d7840

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08007dfc 	.word	0x08007dfc

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08007dfc 	.word	0x08007dfc

08002b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	220f      	movs	r2, #15
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	08db      	lsrs	r3, r3, #3
 8002b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_RCC_GetClockConfig+0x60>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07b      	b.n	8002cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bda:	d009      	beq.n	8002bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
 8002be2:	e005      	b.n	8002bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd ffe4 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	ea42 0103 	orr.w	r1, r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0104 	and.w	r1, r3, #4
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0210 	and.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b088      	sub	sp, #32
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_SPI_Transmit+0x22>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e126      	b.n	8002f3a <HAL_SPI_Transmit+0x270>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fc5a 	bl	80015ac <HAL_GetTick>
 8002cf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d0e:	e10b      	b.n	8002f28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x52>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d20:	e102      	b.n	8002f28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d68:	d10f      	bne.n	8002d8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db0:	d14b      	bne.n	8002e4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Transmit+0xf6>
 8002dba:	8afb      	ldrh	r3, [r7, #22]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d13e      	bne.n	8002e3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002de4:	e02b      	b.n	8002e3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d112      	bne.n	8002e1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e18:	e011      	b.n	8002e3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fe fbc7 	bl	80015ac <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_Transmit+0x168>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x16e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e3c:	e074      	b.n	8002f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ce      	bne.n	8002de6 <HAL_SPI_Transmit+0x11c>
 8002e48:	e04c      	b.n	8002ee4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Transmit+0x18e>
 8002e52:	8afb      	ldrh	r3, [r7, #22]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d140      	bne.n	8002eda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	7812      	ldrb	r2, [r2, #0]
 8002e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e7e:	e02c      	b.n	8002eda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d113      	bne.n	8002eb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eb4:	e011      	b.n	8002eda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb6:	f7fe fb79 	bl	80015ac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d803      	bhi.n	8002ece <HAL_SPI_Transmit+0x204>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_Transmit+0x20a>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ed8:	e026      	b.n	8002f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1cd      	bne.n	8002e80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fbcb 	bl	8003684 <SPI_EndRxTxTransaction>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e000      	b.n	8002f28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5e:	d112      	bne.n	8002f86 <HAL_SPI_Receive+0x44>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10e      	bne.n	8002f86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f8f1 	bl	8003164 <HAL_SPI_TransmitReceive>
 8002f82:	4603      	mov	r3, r0
 8002f84:	e0ea      	b.n	800315c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_SPI_Receive+0x52>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0e3      	b.n	800315c <HAL_SPI_Receive+0x21a>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9c:	f7fe fb06 	bl	80015ac <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d002      	beq.n	8002fb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fb2:	e0ca      	b.n	800314a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_Receive+0x7e>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc4:	e0c1      	b.n	800314a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	d10f      	bne.n	800302e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d007      	beq.n	800304c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d162      	bne.n	800311a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003054:	e02e      	b.n	80030b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d115      	bne.n	8003090 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f103 020c 	add.w	r2, r3, #12
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800308e:	e011      	b.n	80030b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003090:	f7fe fa8c 	bl	80015ac <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d803      	bhi.n	80030a8 <HAL_SPI_Receive+0x166>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a6:	d102      	bne.n	80030ae <HAL_SPI_Receive+0x16c>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030b2:	e04a      	b.n	800314a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cb      	bne.n	8003056 <HAL_SPI_Receive+0x114>
 80030be:	e031      	b.n	8003124 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d113      	bne.n	80030f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	b292      	uxth	r2, r2
 80030da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030f4:	e011      	b.n	800311a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f6:	f7fe fa59 	bl	80015ac <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d803      	bhi.n	800310e <HAL_SPI_Receive+0x1cc>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310c:	d102      	bne.n	8003114 <HAL_SPI_Receive+0x1d2>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003118:	e017      	b.n	800314a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1cd      	bne.n	80030c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fa45 	bl	80035b8 <SPI_EndRxTransaction>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
 8003146:	e000      	b.n	800314a <HAL_SPI_Receive+0x208>
  }

error :
 8003148:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_SPI_TransmitReceive+0x26>
 8003186:	2302      	movs	r3, #2
 8003188:	e18a      	b.n	80034a0 <HAL_SPI_TransmitReceive+0x33c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003192:	f7fe fa0b 	bl	80015ac <HAL_GetTick>
 8003196:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00f      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x70>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d107      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x68>
 80031c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d003      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031d2:	e15b      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x82>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x82>
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031ec:	e14e      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2205      	movs	r2, #5
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	887a      	ldrh	r2, [r7, #2]
 800322a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d007      	beq.n	8003256 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325e:	d178      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_SPI_TransmitReceive+0x10a>
 8003268:	8b7b      	ldrh	r3, [r7, #26]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d166      	bne.n	800333c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	1c9a      	adds	r2, r3, #2
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003292:	e053      	b.n	800333c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d11b      	bne.n	80032da <HAL_SPI_TransmitReceive+0x176>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_SPI_TransmitReceive+0x176>
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d113      	bne.n	80032da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d119      	bne.n	800331c <HAL_SPI_TransmitReceive+0x1b8>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d014      	beq.n	800331c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	b292      	uxth	r2, r2
 80032fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003318:	2301      	movs	r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800331c:	f7fe f946 	bl	80015ac <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003328:	429a      	cmp	r2, r3
 800332a:	d807      	bhi.n	800333c <HAL_SPI_TransmitReceive+0x1d8>
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003332:	d003      	beq.n	800333c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800333a:	e0a7      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1a6      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x130>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1a1      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x130>
 8003350:	e07c      	b.n	800344c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x1fc>
 800335a:	8b7b      	ldrh	r3, [r7, #26]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d16b      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003386:	e057      	b.n	8003438 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d11c      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x26c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x26c>
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d114      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d119      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x2ae>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800340e:	2301      	movs	r3, #1
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003412:	f7fe f8cb 	bl	80015ac <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341e:	429a      	cmp	r2, r3
 8003420:	d803      	bhi.n	800342a <HAL_SPI_TransmitReceive+0x2c6>
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003428:	d102      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x2cc>
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003436:	e029      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1a2      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x224>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d19d      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f917 	bl	8003684 <SPI_EndRxTxTransaction>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003468:	e010      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	e000      	b.n	800348c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800348a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800349c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b8:	f7fe f878 	bl	80015ac <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c8:	f7fe f870 	bl	80015ac <HAL_GetTick>
 80034cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	015b      	lsls	r3, r3, #5
 80034d4:	0d1b      	lsrs	r3, r3, #20
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034de:	e054      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e6:	d050      	beq.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e8:	f7fe f860 	bl	80015ac <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d902      	bls.n	80034fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13d      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800350c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d111      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003520:	d004      	beq.n	800352c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d107      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d10f      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e017      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3b01      	subs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d19b      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000

080035b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035cc:	d111      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d004      	beq.n	80035e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d107      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fa:	d12a      	bne.n	8003652 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d012      	beq.n	800362c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff ff49 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02d      	beq.n	8003678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e026      	b.n	800367a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2200      	movs	r2, #0
 8003634:	2101      	movs	r1, #1
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff ff36 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01a      	beq.n	8003678 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e013      	b.n	800367a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	2101      	movs	r1, #1
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff23 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e000      	b.n	800367a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <SPI_EndRxTxTransaction+0x7c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <SPI_EndRxTxTransaction+0x80>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0d5b      	lsrs	r3, r3, #21
 800369c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ae:	d112      	bne.n	80036d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fef4 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e00f      	b.n	80036f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d0f2      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x52>
 80036f0:	e000      	b.n	80036f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036f2:	bf00      	nop
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000
 8003704:	165e9f81 	.word	0x165e9f81

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f839 	bl	80037a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 f9ca 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d001      	beq.n	80037d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e044      	b.n	800385e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_TIM_Base_Start_IT+0xb0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d018      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d013      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_TIM_Base_Start_IT+0xb4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_Start_IT+0xb8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_TIM_Base_Start_IT+0xbc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x6c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <HAL_TIM_Base_Start_IT+0xc0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d010      	beq.n	800385c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384a:	e007      	b.n	800385c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000

08003880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8ee 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8e0 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8f1 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0204 	mvn.w	r2, #4
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8c4 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8b6 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8c7 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b08      	cmp	r3, #8
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0208 	mvn.w	r2, #8
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f89a 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f88c 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f89d 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b10      	cmp	r3, #16
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b10      	cmp	r3, #16
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0210 	mvn.w	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2208      	movs	r2, #8
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f870 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f862 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f873 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0201 	mvn.w	r2, #1
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd f83e 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8e2 	bl	8003bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f838 	bl	8003acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0220 	mvn.w	r2, #32
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8ac 	bl	8003be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00f      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00b      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01b      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d017      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <TIM_Base_SetConfig+0xe8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <TIM_Base_SetConfig+0xec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <TIM_Base_SetConfig+0xf0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <TIM_Base_SetConfig+0xf4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <TIM_Base_SetConfig+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <TIM_Base_SetConfig+0xfc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <TIM_Base_SetConfig+0xe4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d103      	bne.n	8003bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	615a      	str	r2, [r3, #20]
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd f81a 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f929 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08a      	sub	sp, #40	; 0x28
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d17c      	bne.n	8003dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_UART_Transmit+0x2c>
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e075      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x3e>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2221      	movs	r2, #33	; 0x21
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fc59 	bl	80015ac <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d10:	d108      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d34:	e02a      	b.n	8003d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f840 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e036      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e007      	b.n	8003d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1cf      	bne.n	8003d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f810 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b090      	sub	sp, #64	; 0x40
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	e050      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dde:	d04c      	beq.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de6:	f7fd fbe1 	bl	80015ac <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d241      	bcs.n	8003e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e16:	637a      	str	r2, [r7, #52]	; 0x34
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4a:	623a      	str	r2, [r7, #32]
 8003e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d09f      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3740      	adds	r7, #64	; 0x40
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea8:	b0c0      	sub	sp, #256	; 0x100
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	ea40 0301 	orr.w	r3, r0, r1
 8003ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003efc:	f021 010c 	bic.w	r1, r1, #12
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	6999      	ldr	r1, [r3, #24]
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	ea40 0301 	orr.w	r3, r0, r1
 8003f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <UART_SetConfig+0x2cc>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d005      	beq.n	8003f44 <UART_SetConfig+0xa0>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b8d      	ldr	r3, [pc, #564]	; (8004174 <UART_SetConfig+0x2d0>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d104      	bne.n	8003f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe fdf2 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 8003f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f4c:	e003      	b.n	8003f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7fe fdd9 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8003f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f60:	f040 810c 	bne.w	800417c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f86:	4621      	mov	r1, r4
 8003f88:	eb12 0801 	adds.w	r8, r2, r1
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb43 0901 	adc.w	r9, r3, r1
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	4699      	mov	r9, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	eb18 0303 	adds.w	r3, r8, r3
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	eb49 0303 	adc.w	r3, r9, r3
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	18db      	adds	r3, r3, r3
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	4613      	mov	r3, r2
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe8:	f7fc f94a 	bl	8000280 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <UART_SetConfig+0x2d4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	64b9      	str	r1, [r7, #72]	; 0x48
 8004014:	415b      	adcs	r3, r3
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800401c:	4641      	mov	r1, r8
 800401e:	eb12 0a01 	adds.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb43 0b01 	adc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403c:	4692      	mov	sl, r2
 800403e:	469b      	mov	fp, r3
 8004040:	4643      	mov	r3, r8
 8004042:	eb1a 0303 	adds.w	r3, sl, r3
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404a:	464b      	mov	r3, r9
 800404c:	eb4b 0303 	adc.w	r3, fp, r3
 8004050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004068:	460b      	mov	r3, r1
 800406a:	18db      	adds	r3, r3, r3
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
 800406e:	4613      	mov	r3, r2
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800407e:	f7fc f8ff 	bl	8000280 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 2302 	umull	r2, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ac:	441c      	add	r4, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c8:	415b      	adcs	r3, r3
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6339      	str	r1, [r7, #48]	; 0x30
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800411c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413a:	f7fc f8a1 	bl	8000280 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x2d4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <UART_SetConfig+0x2d4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800416c:	e105      	b.n	800437a <UART_SetConfig+0x4d6>
 800416e:	bf00      	nop
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800418e:	4642      	mov	r2, r8
 8004190:	464b      	mov	r3, r9
 8004192:	1891      	adds	r1, r2, r2
 8004194:	6239      	str	r1, [r7, #32]
 8004196:	415b      	adcs	r3, r3
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800419e:	4641      	mov	r1, r8
 80041a0:	1854      	adds	r4, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb43 0501 	adc.w	r5, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c4:	464b      	mov	r3, r9
 80041c6:	eb45 0303 	adc.w	r3, r5, r3
 80041ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ea:	4629      	mov	r1, r5
 80041ec:	008b      	lsls	r3, r1, #2
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f4:	4621      	mov	r1, r4
 80041f6:	008a      	lsls	r2, r1, #2
 80041f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041fc:	f7fc f840 	bl	8000280 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <UART_SetConfig+0x4e4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800421c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	61b9      	str	r1, [r7, #24]
 8004228:	415b      	adcs	r3, r3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6139      	str	r1, [r7, #16]
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	67bb      	str	r3, [r7, #120]	; 0x78
 800427a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004288:	4649      	mov	r1, r9
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	4641      	mov	r1, r8
 800428e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004292:	4641      	mov	r1, r8
 8004294:	008a      	lsls	r2, r1, #2
 8004296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429a:	f7fb fff1 	bl	8000280 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <UART_SetConfig+0x4e4>)
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	2164      	movs	r1, #100	; 0x64
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	3332      	adds	r3, #50	; 0x32
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <UART_SetConfig+0x4e4>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c2:	441c      	add	r4, r3
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	673b      	str	r3, [r7, #112]	; 0x70
 80042cc:	677a      	str	r2, [r7, #116]	; 0x74
 80042ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d2:	4642      	mov	r2, r8
 80042d4:	464b      	mov	r3, r9
 80042d6:	1891      	adds	r1, r2, r2
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	415b      	adcs	r3, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e2:	4641      	mov	r1, r8
 80042e4:	1851      	adds	r1, r2, r1
 80042e6:	6039      	str	r1, [r7, #0]
 80042e8:	4649      	mov	r1, r9
 80042ea:	414b      	adcs	r3, r1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fa:	4659      	mov	r1, fp
 80042fc:	00cb      	lsls	r3, r1, #3
 80042fe:	4651      	mov	r1, sl
 8004300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004304:	4651      	mov	r1, sl
 8004306:	00ca      	lsls	r2, r1, #3
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	4603      	mov	r3, r0
 800430e:	4642      	mov	r2, r8
 8004310:	189b      	adds	r3, r3, r2
 8004312:	66bb      	str	r3, [r7, #104]	; 0x68
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	663b      	str	r3, [r7, #96]	; 0x60
 8004328:	667a      	str	r2, [r7, #100]	; 0x64
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004336:	4649      	mov	r1, r9
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4641      	mov	r1, r8
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4641      	mov	r1, r8
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004348:	f7fb ff9a 	bl	8000280 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <UART_SetConfig+0x4e4>)
 8004352:	fba3 1302 	umull	r1, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2164      	movs	r1, #100	; 0x64
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	3332      	adds	r3, #50	; 0x32
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <UART_SetConfig+0x4e4>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4422      	add	r2, r4
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	bf00      	nop
 800437c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	51eb851f 	.word	0x51eb851f

0800438c <__NVIC_SetPriority>:
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	; (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	; (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <SysTick_Handler+0x1c>)
 80043e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043e8:	f001 fea2 	bl	8006130 <xTaskGetSchedulerState>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043f2:	f002 fc89 	bl	8006d08 <xPortSysTickHandler>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e000e010 	.word	0xe000e010

08004400 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004404:	2100      	movs	r1, #0
 8004406:	f06f 0004 	mvn.w	r0, #4
 800440a:	f7ff ffbf 	bl	800438c <__NVIC_SetPriority>
#endif
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441a:	f3ef 8305 	mrs	r3, IPSR
 800441e:	603b      	str	r3, [r7, #0]
  return(result);
 8004420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004426:	f06f 0305 	mvn.w	r3, #5
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	e00c      	b.n	8004448 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <osKernelInitialize+0x44>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <osKernelInitialize+0x44>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800443c:	2300      	movs	r3, #0
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e002      	b.n	8004448 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004448:	687b      	ldr	r3, [r7, #4]
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2000023c 	.word	0x2000023c

0800445c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004462:	f3ef 8305 	mrs	r3, IPSR
 8004466:	603b      	str	r3, [r7, #0]
  return(result);
 8004468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <osKernelStart+0x1a>
    stat = osErrorISR;
 800446e:	f06f 0305 	mvn.w	r3, #5
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	e010      	b.n	8004498 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <osKernelStart+0x48>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d109      	bne.n	8004492 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800447e:	f7ff ffbf 	bl	8004400 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <osKernelStart+0x48>)
 8004484:	2202      	movs	r2, #2
 8004486:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004488:	f001 f9f6 	bl	8005878 <vTaskStartScheduler>
      stat = osOK;
 800448c:	2300      	movs	r3, #0
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e002      	b.n	8004498 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004498:	687b      	ldr	r3, [r7, #4]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	2000023c 	.word	0x2000023c

080044a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	; 0x38
 80044ac:	af04      	add	r7, sp, #16
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b8:	f3ef 8305 	mrs	r3, IPSR
 80044bc:	617b      	str	r3, [r7, #20]
  return(result);
 80044be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d17e      	bne.n	80045c2 <osThreadNew+0x11a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d07b      	beq.n	80045c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ce:	2318      	movs	r3, #24
 80044d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d045      	beq.n	800456e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <osThreadNew+0x48>
        name = attr->name;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <osThreadNew+0x6e>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b38      	cmp	r3, #56	; 0x38
 8004508:	d805      	bhi.n	8004516 <osThreadNew+0x6e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <osThreadNew+0x72>
        return (NULL);
 8004516:	2300      	movs	r3, #0
 8004518:	e054      	b.n	80045c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00e      	beq.n	8004550 <osThreadNew+0xa8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2bbb      	cmp	r3, #187	; 0xbb
 8004538:	d90a      	bls.n	8004550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osThreadNew+0xa8>
        mem = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e010      	b.n	8004572 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10c      	bne.n	8004572 <osThreadNew+0xca>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d108      	bne.n	8004572 <osThreadNew+0xca>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <osThreadNew+0xca>
          mem = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e001      	b.n	8004572 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d110      	bne.n	800459a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004580:	9202      	str	r2, [sp, #8]
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 ff86 	bl	80054a0 <xTaskCreateStatic>
 8004594:	4603      	mov	r3, r0
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	e013      	b.n	80045c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d110      	bne.n	80045c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	f107 0310 	add.w	r3, r7, #16
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 ffd1 	bl	800555a <xTaskCreate>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <osThreadNew+0x11a>
            hTask = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045c2:	693b      	ldr	r3, [r7, #16]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d4:	f3ef 8305 	mrs	r3, IPSR
 80045d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <osDelay+0x1c>
    stat = osErrorISR;
 80045e0:	f06f 0305 	mvn.w	r3, #5
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e007      	b.n	80045f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 f90c 	bl	8005810 <vTaskDelay>
    }
  }

  return (stat);
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004602:	b580      	push	{r7, lr}
 8004604:	b08a      	sub	sp, #40	; 0x28
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004612:	f3ef 8305 	mrs	r3, IPSR
 8004616:	613b      	str	r3, [r7, #16]
  return(result);
 8004618:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800461a:	2b00      	cmp	r3, #0
 800461c:	d175      	bne.n	800470a <osSemaphoreNew+0x108>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d072      	beq.n	800470a <osSemaphoreNew+0x108>
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d86e      	bhi.n	800470a <osSemaphoreNew+0x108>
    mem = -1;
 800462c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004630:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d015      	beq.n	8004664 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d006      	beq.n	800464e <osSemaphoreNew+0x4c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b4f      	cmp	r3, #79	; 0x4f
 8004646:	d902      	bls.n	800464e <osSemaphoreNew+0x4c>
        mem = 1;
 8004648:	2301      	movs	r3, #1
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e00c      	b.n	8004668 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d108      	bne.n	8004668 <osSemaphoreNew+0x66>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <osSemaphoreNew+0x66>
          mem = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e001      	b.n	8004668 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800466e:	d04c      	beq.n	800470a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d128      	bne.n	80046c8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d10a      	bne.n	8004692 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2203      	movs	r2, #3
 8004682:	9200      	str	r2, [sp, #0]
 8004684:	2200      	movs	r2, #0
 8004686:	2100      	movs	r1, #0
 8004688:	2001      	movs	r0, #1
 800468a:	f000 f993 	bl	80049b4 <xQueueGenericCreateStatic>
 800468e:	61f8      	str	r0, [r7, #28]
 8004690:	e005      	b.n	800469e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004692:	2203      	movs	r2, #3
 8004694:	2100      	movs	r1, #0
 8004696:	2001      	movs	r0, #1
 8004698:	f000 fa04 	bl	8004aa4 <xQueueGenericCreate>
 800469c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d022      	beq.n	80046ea <osSemaphoreNew+0xe8>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01f      	beq.n	80046ea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046aa:	2300      	movs	r3, #0
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	69f8      	ldr	r0, [r7, #28]
 80046b2:	f000 fabf 	bl	8004c34 <xQueueGenericSend>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d016      	beq.n	80046ea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80046bc:	69f8      	ldr	r0, [r7, #28]
 80046be:	f000 fd33 	bl	8005128 <vQueueDelete>
            hSemaphore = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e010      	b.n	80046ea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fa41 	bl	8004b5e <xQueueCreateCountingSemaphoreStatic>
 80046dc:	61f8      	str	r0, [r7, #28]
 80046de:	e004      	b.n	80046ea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa72 	bl	8004bcc <xQueueCreateCountingSemaphore>
 80046e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00c      	beq.n	800470a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <osSemaphoreNew+0xfc>
          name = attr->name;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e001      	b.n	8004702 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	69f8      	ldr	r0, [r7, #28]
 8004706:	f000 fe43 	bl	8005390 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800470a:	69fb      	ldr	r3, [r7, #28]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <vApplicationGetIdleTaskMemory+0x2c>)
 8004724:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <vApplicationGetIdleTaskMemory+0x30>)
 800472a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000240 	.word	0x20000240
 8004744:	200002fc 	.word	0x200002fc

08004748 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <vApplicationGetTimerTaskMemory+0x2c>)
 8004758:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a06      	ldr	r2, [pc, #24]	; (8004778 <vApplicationGetTimerTaskMemory+0x30>)
 800475e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	200004fc 	.word	0x200004fc
 8004778:	200005b8 	.word	0x200005b8

0800477c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 0208 	add.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f103 0208 	add.w	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f103 0208 	add.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d103      	bne.n	800483e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e00c      	b.n	8004858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3308      	adds	r3, #8
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e002      	b.n	800484c <vListInsert+0x2e>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	429a      	cmp	r2, r3
 8004856:	d2f6      	bcs.n	8004846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6852      	ldr	r2, [r2, #4]
 80048b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d103      	bne.n	80048c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800490e:	f002 f969 	bl	8006be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	3b01      	subs	r3, #1
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d114      	bne.n	800498e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3310      	adds	r3, #16
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fa1b 	bl	8005dac <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <xQueueGenericReset+0xcc>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e009      	b.n	80049a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3310      	adds	r3, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fef2 	bl	800477c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3324      	adds	r3, #36	; 0x24
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff feed 	bl	800477c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049a2:	f002 f94f 	bl	8006c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049a6:	2301      	movs	r3, #1
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <xQueueGenericCreateStatic+0x52>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xQueueGenericCreateStatic+0x56>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericCreateStatic+0x58>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	623b      	str	r3, [r7, #32]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xQueueGenericCreateStatic+0x7e>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <xQueueGenericCreateStatic+0x82>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueGenericCreateStatic+0x84>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	61fb      	str	r3, [r7, #28]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a52:	2350      	movs	r3, #80	; 0x50
 8004a54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b50      	cmp	r3, #80	; 0x50
 8004a5a:	d00a      	beq.n	8004a72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61bb      	str	r3, [r7, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f83f 	bl	8004b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3730      	adds	r7, #48	; 0x30
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	613b      	str	r3, [r7, #16]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	3350      	adds	r3, #80	; 0x50
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 f9a3 	bl	8006e28 <pvPortMalloc>
 8004ae2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d011      	beq.n	8004b0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3350      	adds	r3, #80	; 0x50
 8004af2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004afc:	79fa      	ldrb	r2, [r7, #7]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f805 	bl	8004b18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b46:	2101      	movs	r1, #1
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f7ff fecb 	bl	80048e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b08a      	sub	sp, #40	; 0x28
 8004b62:	af02      	add	r7, sp, #8
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	61bb      	str	r3, [r7, #24]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d90a      	bls.n	8004ba4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	617b      	str	r3, [r7, #20]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff ff00 	bl	80049b4 <xQueueGenericCreateStatic>
 8004bb4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
	}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	613b      	str	r3, [r7, #16]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d90a      	bls.n	8004c10 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60fb      	str	r3, [r7, #12]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c10:	2202      	movs	r2, #2
 8004c12:	2100      	movs	r1, #0
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff45 	bl	8004aa4 <xQueueGenericCreate>
 8004c1a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004c28:	697b      	ldr	r3, [r7, #20]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueGenericSend+0x32>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <xQueueGenericSend+0x40>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <xQueueGenericSend+0x44>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <xQueueGenericSend+0x46>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <xQueueGenericSend+0x60>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSend+0x6e>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <xQueueGenericSend+0x72>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueGenericSend+0x74>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	623b      	str	r3, [r7, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc2:	f001 fa35 	bl	8006130 <xTaskGetSchedulerState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xQueueGenericSend+0x9e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSend+0xa2>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSend+0xa4>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61fb      	str	r3, [r7, #28]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf2:	f001 ff77 	bl	8006be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <xQueueGenericSend+0xd4>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d129      	bne.n	8004d5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0e:	f000 fa2e 	bl	800516e <prvCopyDataToQueue>
 8004d12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	3324      	adds	r3, #36	; 0x24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f843 	bl	8005dac <xTaskRemoveFromEventList>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d013      	beq.n	8004d54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d2c:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <xQueueGenericSend+0x1f8>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	e00a      	b.n	8004d54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d44:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <xQueueGenericSend+0x1f8>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d54:	f001 ff76 	bl	8006c44 <vPortExitCritical>
				return pdPASS;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e063      	b.n	8004e24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d62:	f001 ff6f 	bl	8006c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e05c      	b.n	8004e24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 f87d 	bl	8005e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7e:	f001 ff61 	bl	8006c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d82:	f000 fde9 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d86:	f001 ff2d 	bl	8006be4 <vPortEnterCritical>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d96:	d103      	bne.n	8004da0 <xQueueGenericSend+0x16c>
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dac:	d103      	bne.n	8004db6 <xQueueGenericSend+0x182>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db6:	f001 ff45 	bl	8006c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dba:	1d3a      	adds	r2, r7, #4
 8004dbc:	f107 0314 	add.w	r3, r7, #20
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f86c 	bl	8005ea0 <xTaskCheckForTimeOut>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d124      	bne.n	8004e18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd0:	f000 fac5 	bl	800535e <prvIsQueueFull>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	3310      	adds	r3, #16
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 ff92 	bl	8005d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dea:	f000 fa50 	bl	800528e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dee:	f000 fdc1 	bl	8005974 <xTaskResumeAll>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f af7c 	bne.w	8004cf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <xQueueGenericSend+0x1f8>)
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	e772      	b.n	8004cf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0e:	f000 fa3e 	bl	800528e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e12:	f000 fdaf 	bl	8005974 <xTaskResumeAll>
 8004e16:	e76c      	b.n	8004cf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e1a:	f000 fa38 	bl	800528e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1e:	f000 fda9 	bl	8005974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3738      	adds	r7, #56	; 0x38
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b090      	sub	sp, #64	; 0x40
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <xQueueGenericSendFromISR+0x3c>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <xQueueGenericSendFromISR+0x40>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <xQueueGenericSendFromISR+0x42>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSendFromISR+0x6a>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSendFromISR+0x6e>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSendFromISR+0x70>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eba:	f001 ff75 	bl	8006da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ebe:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	61fa      	str	r2, [r7, #28]
 8004ed4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <xQueueGenericSendFromISR+0xbc>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d12f      	bne.n	8004f4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f02:	f000 f934 	bl	800516e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f0e:	d112      	bne.n	8004f36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	3324      	adds	r3, #36	; 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 ff45 	bl	8005dac <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e007      	b.n	8004f46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	b25a      	sxtb	r2, r3
 8004f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f46:	2301      	movs	r3, #1
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004f4a:	e001      	b.n	8004f50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3740      	adds	r7, #64	; 0x40
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <xQueueReceive+0x30>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	623b      	str	r3, [r7, #32]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueReceive+0x3e>
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <xQueueReceive+0x42>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <xQueueReceive+0x44>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xQueueReceive+0x5e>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	61fb      	str	r3, [r7, #28]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc6:	f001 f8b3 	bl	8006130 <xTaskGetSchedulerState>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <xQueueReceive+0x6e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <xQueueReceive+0x72>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <xQueueReceive+0x74>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10a      	bne.n	8004ff6 <xQueueReceive+0x8e>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61bb      	str	r3, [r7, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff6:	f001 fdf5 	bl	8006be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01f      	beq.n	8005046 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500a:	f000 f91a 	bl	8005242 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1e5a      	subs	r2, r3, #1
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00f      	beq.n	800503e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	3310      	adds	r3, #16
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fec2 	bl	8005dac <xTaskRemoveFromEventList>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <xQueueReceive+0x1bc>)
 8005030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800503e:	f001 fe01 	bl	8006c44 <vPortExitCritical>
				return pdPASS;
 8005042:	2301      	movs	r3, #1
 8005044:	e069      	b.n	800511a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800504c:	f001 fdfa 	bl	8006c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005050:	2300      	movs	r3, #0
 8005052:	e062      	b.n	800511a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff08 	bl	8005e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005068:	f001 fdec 	bl	8006c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800506c:	f000 fc74 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005070:	f001 fdb8 	bl	8006be4 <vPortEnterCritical>
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800507a:	b25b      	sxtb	r3, r3
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005080:	d103      	bne.n	800508a <xQueueReceive+0x122>
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005090:	b25b      	sxtb	r3, r3
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005096:	d103      	bne.n	80050a0 <xQueueReceive+0x138>
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a0:	f001 fdd0 	bl	8006c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050a4:	1d3a      	adds	r2, r7, #4
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fef7 	bl	8005ea0 <xTaskCheckForTimeOut>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d123      	bne.n	8005100 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ba:	f000 f93a 	bl	8005332 <prvIsQueueEmpty>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d017      	beq.n	80050f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fe1d 	bl	8005d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d4:	f000 f8db 	bl	800528e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050d8:	f000 fc4c 	bl	8005974 <xTaskResumeAll>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d189      	bne.n	8004ff6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <xQueueReceive+0x1bc>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	e780      	b.n	8004ff6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f6:	f000 f8ca 	bl	800528e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050fa:	f000 fc3b 	bl	8005974 <xTaskResumeAll>
 80050fe:	e77a      	b.n	8004ff6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005102:	f000 f8c4 	bl	800528e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005106:	f000 fc35 	bl	8005974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800510a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800510c:	f000 f911 	bl	8005332 <prvIsQueueEmpty>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	f43f af6f 	beq.w	8004ff6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005118:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800511a:	4618      	mov	r0, r3
 800511c:	3730      	adds	r7, #48	; 0x30
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <vQueueDelete+0x28>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60bb      	str	r3, [r7, #8]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f947 	bl	80053e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f001 ff2d 	bl	8006fc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d14d      	bne.n	8005230 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 ffe7 	bl	800616c <xTaskPriorityDisinherit>
 800519e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	e043      	b.n	8005230 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d119      	bne.n	80051e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6858      	ldr	r0, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	461a      	mov	r2, r3
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	f002 f84b 	bl	8007254 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	441a      	add	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d32b      	bcc.n	8005230 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	e026      	b.n	8005230 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68d8      	ldr	r0, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	461a      	mov	r2, r3
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	f002 f831 	bl	8007254 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	425b      	negs	r3, r3
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d207      	bcs.n	800521e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	425b      	negs	r3, r3
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d105      	bne.n	8005230 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3b01      	subs	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005238:	697b      	ldr	r3, [r7, #20]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d018      	beq.n	8005286 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	441a      	add	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	d303      	bcc.n	8005276 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68d9      	ldr	r1, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	461a      	mov	r2, r3
 8005280:	6838      	ldr	r0, [r7, #0]
 8005282:	f001 ffe7 	bl	8007254 <memcpy>
	}
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005296:	f001 fca5 	bl	8006be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a2:	e011      	b.n	80052c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fd7b 	bl	8005dac <xTaskRemoveFromEventList>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052bc:	f000 fe52 	bl	8005f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dce9      	bgt.n	80052a4 <prvUnlockQueue+0x16>
 80052d0:	e000      	b.n	80052d4 <prvUnlockQueue+0x46>
					break;
 80052d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	22ff      	movs	r2, #255	; 0xff
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052dc:	f001 fcb2 	bl	8006c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052e0:	f001 fc80 	bl	8006be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ec:	e011      	b.n	8005312 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d012      	beq.n	800531c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3310      	adds	r3, #16
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fd56 	bl	8005dac <xTaskRemoveFromEventList>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005306:	f000 fe2d 	bl	8005f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800530a:	7bbb      	ldrb	r3, [r7, #14]
 800530c:	3b01      	subs	r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dce9      	bgt.n	80052ee <prvUnlockQueue+0x60>
 800531a:	e000      	b.n	800531e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800531c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	22ff      	movs	r2, #255	; 0xff
 8005322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005326:	f001 fc8d 	bl	8006c44 <vPortExitCritical>
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800533a:	f001 fc53 	bl	8006be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e001      	b.n	8005350 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005350:	f001 fc78 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005366:	f001 fc3d 	bl	8006be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	429a      	cmp	r2, r3
 8005374:	d102      	bne.n	800537c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005376:	2301      	movs	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e001      	b.n	8005380 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005380:	f001 fc60 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e014      	b.n	80053ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053a0:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <vQueueAddToRegistry+0x50>)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053ac:	490c      	ldr	r1, [pc, #48]	; (80053e0 <vQueueAddToRegistry+0x50>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <vQueueAddToRegistry+0x50>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053c2:	e006      	b.n	80053d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b07      	cmp	r3, #7
 80053ce:	d9e7      	bls.n	80053a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200009b8 	.word	0x200009b8

080053e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e016      	b.n	8005420 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <vQueueUnregisterQueue+0x50>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d10b      	bne.n	800541a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <vQueueUnregisterQueue+0x50>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2100      	movs	r1, #0
 8005408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <vQueueUnregisterQueue+0x50>)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
				break;
 8005418:	e006      	b.n	8005428 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b07      	cmp	r3, #7
 8005424:	d9e5      	bls.n	80053f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	200009b8 	.word	0x200009b8

08005438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005448:	f001 fbcc 	bl	8006be4 <vPortEnterCritical>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005452:	b25b      	sxtb	r3, r3
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005458:	d103      	bne.n	8005462 <vQueueWaitForMessageRestricted+0x2a>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005468:	b25b      	sxtb	r3, r3
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546e:	d103      	bne.n	8005478 <vQueueWaitForMessageRestricted+0x40>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005478:	f001 fbe4 	bl	8006c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fc61 	bl	8005d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7ff fefb 	bl	800528e <prvUnlockQueue>
	}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	; 0x38
 80054a4:	af04      	add	r7, sp, #16
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61fb      	str	r3, [r7, #28]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054e6:	23bc      	movs	r3, #188	; 0xbc
 80054e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2bbc      	cmp	r3, #188	; 0xbc
 80054ee:	d00a      	beq.n	8005506 <xTaskCreateStatic+0x66>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61bb      	str	r3, [r7, #24]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005506:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01e      	beq.n	800554c <xTaskCreateStatic+0xac>
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800551c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2202      	movs	r2, #2
 8005522:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005526:	2300      	movs	r3, #0
 8005528:	9303      	str	r3, [sp, #12]
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	f107 0314 	add.w	r3, r7, #20
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f850 	bl	80055e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005546:	f000 f8f3 	bl	8005730 <prvAddNewTaskToReadyList>
 800554a:	e001      	b.n	8005550 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005550:	697b      	ldr	r3, [r7, #20]
	}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800555a:	b580      	push	{r7, lr}
 800555c:	b08c      	sub	sp, #48	; 0x30
 800555e:	af04      	add	r7, sp, #16
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4618      	mov	r0, r3
 8005570:	f001 fc5a 	bl	8006e28 <pvPortMalloc>
 8005574:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800557c:	20bc      	movs	r0, #188	; 0xbc
 800557e:	f001 fc53 	bl	8006e28 <pvPortMalloc>
 8005582:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
 8005590:	e005      	b.n	800559e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f001 fd14 	bl	8006fc0 <vPortFree>
 8005598:	e001      	b.n	800559e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9303      	str	r3, [sp, #12]
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	9302      	str	r3, [sp, #8]
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f80e 	bl	80055e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c8:	69f8      	ldr	r0, [r7, #28]
 80055ca:	f000 f8b1 	bl	8005730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e002      	b.n	80055da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055da:	69bb      	ldr	r3, [r7, #24]
	}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	461a      	mov	r2, r3
 80055fc:	21a5      	movs	r1, #165	; 0xa5
 80055fe:	f001 fe37 	bl	8007270 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800560c:	3b01      	subs	r3, #1
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617b      	str	r3, [r7, #20]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01f      	beq.n	8005682 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e012      	b.n	800566e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	7819      	ldrb	r1, [r3, #0]
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	3334      	adds	r3, #52	; 0x34
 8005658:	460a      	mov	r2, r1
 800565a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d9e9      	bls.n	8005648 <prvInitialiseNewTask+0x64>
 8005674:	e000      	b.n	8005678 <prvInitialiseNewTask+0x94>
			{
				break;
 8005676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005680:	e003      	b.n	800568a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	2b37      	cmp	r3, #55	; 0x37
 800568e:	d901      	bls.n	8005694 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005690:	2337      	movs	r3, #55	; 0x37
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	2200      	movs	r2, #0
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f886 	bl	80047bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3318      	adds	r3, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff f881 	bl	80047bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	3354      	adds	r3, #84	; 0x54
 80056e4:	2260      	movs	r2, #96	; 0x60
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fdc1 	bl	8007270 <memset>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <prvInitialiseNewTask+0x140>)
 80056f2:	659a      	str	r2, [r3, #88]	; 0x58
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <prvInitialiseNewTask+0x144>)
 80056f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <prvInitialiseNewTask+0x148>)
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	69b8      	ldr	r0, [r7, #24]
 8005706:	f001 f941 	bl	800698c <pxPortInitialiseStack>
 800570a:	4602      	mov	r2, r0
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571c:	bf00      	nop
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08007e24 	.word	0x08007e24
 8005728:	08007e44 	.word	0x08007e44
 800572c:	08007e04 	.word	0x08007e04

08005730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005738:	f001 fa54 	bl	8006be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005746:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800574e:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005754:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <prvAddNewTaskToReadyList+0xc4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d110      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800575c:	f000 fc26 	bl	8005fac <prvInitialiseTaskLists>
 8005760:	e00d      	b.n	800577e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <prvAddNewTaskToReadyList+0xcc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	429a      	cmp	r2, r3
 8005776:	d802      	bhi.n	800577e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800577e:	4b20      	ldr	r3, [pc, #128]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 8005786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <prvAddNewTaskToReadyList+0xd0>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <prvAddNewTaskToReadyList+0xd4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d903      	bls.n	80057a4 <prvAddNewTaskToReadyList+0x74>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <prvAddNewTaskToReadyList+0xd4>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <prvAddNewTaskToReadyList+0xd8>)
 80057b2:	441a      	add	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7ff f80b 	bl	80047d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057c0:	f001 fa40 	bl	8006c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <prvAddNewTaskToReadyList+0xcc>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00e      	beq.n	80057ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <prvAddNewTaskToReadyList+0xc8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d207      	bcs.n	80057ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <prvAddNewTaskToReadyList+0xdc>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000ecc 	.word	0x20000ecc
 80057f8:	200009f8 	.word	0x200009f8
 80057fc:	20000ed8 	.word	0x20000ed8
 8005800:	20000ee8 	.word	0x20000ee8
 8005804:	20000ed4 	.word	0x20000ed4
 8005808:	200009fc 	.word	0x200009fc
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d017      	beq.n	8005852 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <vTaskDelay+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <vTaskDelay+0x30>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60bb      	str	r3, [r7, #8]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005840:	f000 f88a 	bl	8005958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fcfe 	bl	8006248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800584c:	f000 f892 	bl	8005974 <xTaskResumeAll>
 8005850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d107      	bne.n	8005868 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <vTaskDelay+0x64>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000ef4 	.word	0x20000ef4
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005886:	463a      	mov	r2, r7
 8005888:	1d39      	adds	r1, r7, #4
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe ff40 	bl	8004714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	9202      	str	r2, [sp, #8]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	2300      	movs	r3, #0
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	2300      	movs	r3, #0
 80058a4:	460a      	mov	r2, r1
 80058a6:	4924      	ldr	r1, [pc, #144]	; (8005938 <vTaskStartScheduler+0xc0>)
 80058a8:	4824      	ldr	r0, [pc, #144]	; (800593c <vTaskStartScheduler+0xc4>)
 80058aa:	f7ff fdf9 	bl	80054a0 <xTaskCreateStatic>
 80058ae:	4603      	mov	r3, r0
 80058b0:	4a23      	ldr	r2, [pc, #140]	; (8005940 <vTaskStartScheduler+0xc8>)
 80058b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <vTaskStartScheduler+0xc8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e001      	b.n	80058c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058cc:	f000 fd10 	bl	80062f0 <xTimerCreateTimerTask>
 80058d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d11b      	bne.n	8005910 <vTaskStartScheduler+0x98>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	613b      	str	r3, [r7, #16]
}
 80058ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <vTaskStartScheduler+0xcc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3354      	adds	r3, #84	; 0x54
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <vTaskStartScheduler+0xd0>)
 80058f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <vTaskStartScheduler+0xd4>)
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058fe:	4b14      	ldr	r3, [pc, #80]	; (8005950 <vTaskStartScheduler+0xd8>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005904:	4b13      	ldr	r3, [pc, #76]	; (8005954 <vTaskStartScheduler+0xdc>)
 8005906:	2200      	movs	r2, #0
 8005908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800590a:	f001 f8c9 	bl	8006aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800590e:	e00e      	b.n	800592e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005916:	d10a      	bne.n	800592e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60fb      	str	r3, [r7, #12]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <vTaskStartScheduler+0xb4>
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08007d58 	.word	0x08007d58
 800593c:	08005f7d 	.word	0x08005f7d
 8005940:	20000ef0 	.word	0x20000ef0
 8005944:	200009f8 	.word	0x200009f8
 8005948:	20000014 	.word	0x20000014
 800594c:	20000eec 	.word	0x20000eec
 8005950:	20000ed8 	.word	0x20000ed8
 8005954:	20000ed0 	.word	0x20000ed0

08005958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <vTaskSuspendAll+0x18>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	4a03      	ldr	r2, [pc, #12]	; (8005970 <vTaskSuspendAll+0x18>)
 8005964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000ef4 	.word	0x20000ef4

08005974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005982:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <xTaskResumeAll+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059a0:	f001 f920 	bl	8006be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059a4:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <xTaskResumeAll+0x118>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <xTaskResumeAll+0x118>)
 80059ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <xTaskResumeAll+0x118>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d162      	bne.n	8005a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <xTaskResumeAll+0x11c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d05e      	beq.n	8005a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059be:	e02f      	b.n	8005a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c0:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <xTaskResumeAll+0x120>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe ff5f 	bl	8004890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe ff5a 	bl	8004890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <xTaskResumeAll+0x124>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskResumeAll+0x7c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <xTaskResumeAll+0x124>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <xTaskResumeAll+0x128>)
 80059fe:	441a      	add	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fee5 	bl	80047d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <xTaskResumeAll+0x12c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a20:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <xTaskResumeAll+0x120>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1cb      	bne.n	80059c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a2e:	f000 fb5f 	bl	80060f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <xTaskResumeAll+0x134>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a3e:	f000 f847 	bl	8005ad0 <xTaskIncrementTick>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f1      	bne.n	8005a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <xTaskResumeAll+0x134>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d009      	beq.n	8005a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <xTaskResumeAll+0x138>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a7c:	f001 f8e2 	bl	8006c44 <vPortExitCritical>

	return xAlreadyYielded;
 8005a80:	68bb      	ldr	r3, [r7, #8]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000ef4 	.word	0x20000ef4
 8005a90:	20000ecc 	.word	0x20000ecc
 8005a94:	20000e8c 	.word	0x20000e8c
 8005a98:	20000ed4 	.word	0x20000ed4
 8005a9c:	200009fc 	.word	0x200009fc
 8005aa0:	200009f8 	.word	0x200009f8
 8005aa4:	20000ee0 	.word	0x20000ee0
 8005aa8:	20000edc 	.word	0x20000edc
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <xTaskGetTickCount+0x1c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000ed0 	.word	0x20000ed0

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <xTaskIncrementTick+0x148>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 808f 	bne.w	8005c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b4d      	ldr	r3, [pc, #308]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4a4b      	ldr	r2, [pc, #300]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d120      	bne.n	8005b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b49      	ldr	r3, [pc, #292]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	603b      	str	r3, [r7, #0]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xTaskIncrementTick+0x46>
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3f      	ldr	r2, [pc, #252]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3301      	adds	r3, #1
 8005b32:	4a3d      	ldr	r2, [pc, #244]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	f000 fadb 	bl	80060f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b3a:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d349      	bcc.n	8005bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b44:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b54:	601a      	str	r2, [r3, #0]
					break;
 8005b56:	e03f      	b.n	8005bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d203      	bcs.n	8005b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b70:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b76:	e02f      	b.n	8005bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fe87 	bl	8004890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fe7e 	bl	8004890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d903      	bls.n	8005ba8 <xTaskIncrementTick+0xd8>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f7fe fe09 	bl	80047d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3b8      	bcc.n	8005b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd6:	e7b5      	b.n	8005b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	4915      	ldr	r1, [pc, #84]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d901      	bls.n	8005bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e004      	b.n	8005c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000ef4 	.word	0x20000ef4
 8005c1c:	20000ed0 	.word	0x20000ed0
 8005c20:	20000e84 	.word	0x20000e84
 8005c24:	20000e88 	.word	0x20000e88
 8005c28:	20000ee4 	.word	0x20000ee4
 8005c2c:	20000eec 	.word	0x20000eec
 8005c30:	20000ed4 	.word	0x20000ed4
 8005c34:	200009fc 	.word	0x200009fc
 8005c38:	200009f8 	.word	0x200009f8
 8005c3c:	20000ee0 	.word	0x20000ee0
 8005c40:	20000edc 	.word	0x20000edc

08005c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <vTaskSwitchContext+0xb0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <vTaskSwitchContext+0xb4>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c58:	e046      	b.n	8005ce8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c5a:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <vTaskSwitchContext+0xb4>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c60:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <vTaskSwitchContext+0xb8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e010      	b.n	8005c8a <vTaskSwitchContext+0x46>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <vTaskSwitchContext+0x3e>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	491d      	ldr	r1, [pc, #116]	; (8005d00 <vTaskSwitchContext+0xbc>)
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0e4      	beq.n	8005c68 <vTaskSwitchContext+0x24>
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <vTaskSwitchContext+0xbc>)
 8005caa:	4413      	add	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d104      	bne.n	8005cce <vTaskSwitchContext+0x8a>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <vTaskSwitchContext+0xc0>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <vTaskSwitchContext+0xb8>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cde:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <vTaskSwitchContext+0xc0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3354      	adds	r3, #84	; 0x54
 8005ce4:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <vTaskSwitchContext+0xc4>)
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000ef4 	.word	0x20000ef4
 8005cf8:	20000ee0 	.word	0x20000ee0
 8005cfc:	20000ed4 	.word	0x20000ed4
 8005d00:	200009fc 	.word	0x200009fc
 8005d04:	200009f8 	.word	0x200009f8
 8005d08:	20000014 	.word	0x20000014

08005d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	60fb      	str	r3, [r7, #12]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <vTaskPlaceOnEventList+0x44>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3318      	adds	r3, #24
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fe fd6f 	bl	800481e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d40:	2101      	movs	r1, #1
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f000 fa80 	bl	8006248 <prvAddCurrentTaskToDelayedList>
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200009f8 	.word	0x200009f8

08005d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	617b      	str	r3, [r7, #20]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3318      	adds	r3, #24
 8005d82:	4619      	mov	r1, r3
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7fe fd26 	bl	80047d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	68b8      	ldr	r0, [r7, #8]
 8005d9a:	f000 fa55 	bl	8006248 <prvAddCurrentTaskToDelayedList>
	}
 8005d9e:	bf00      	nop
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	200009f8 	.word	0x200009f8

08005dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60fb      	str	r3, [r7, #12]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3318      	adds	r3, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fd57 	bl	8004890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <xTaskRemoveFromEventList+0xb0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d11d      	bne.n	8005e26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fd4e 	bl	8004890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <xTaskRemoveFromEventList+0xb4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d903      	bls.n	8005e08 <xTaskRemoveFromEventList+0x5c>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <xTaskRemoveFromEventList+0xb4>)
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <xTaskRemoveFromEventList+0xb8>)
 8005e16:	441a      	add	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f7fe fcd9 	bl	80047d6 <vListInsertEnd>
 8005e24:	e005      	b.n	8005e32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3318      	adds	r3, #24
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	480e      	ldr	r0, [pc, #56]	; (8005e68 <xTaskRemoveFromEventList+0xbc>)
 8005e2e:	f7fe fcd2 	bl	80047d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <xTaskRemoveFromEventList+0xc0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d905      	bls.n	8005e4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <xTaskRemoveFromEventList+0xc4>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e001      	b.n	8005e50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e50:	697b      	ldr	r3, [r7, #20]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000ef4 	.word	0x20000ef4
 8005e60:	20000ed4 	.word	0x20000ed4
 8005e64:	200009fc 	.word	0x200009fc
 8005e68:	20000e8c 	.word	0x20000e8c
 8005e6c:	200009f8 	.word	0x200009f8
 8005e70:	20000ee0 	.word	0x20000ee0

08005e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <vTaskInternalSetTimeOutState+0x24>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <vTaskInternalSetTimeOutState+0x28>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	605a      	str	r2, [r3, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	20000ee4 	.word	0x20000ee4
 8005e9c:	20000ed0 	.word	0x20000ed0

08005ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	613b      	str	r3, [r7, #16]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60fb      	str	r3, [r7, #12]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ee2:	f000 fe7f 	bl	8006be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <xTaskCheckForTimeOut+0xbc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efe:	d102      	bne.n	8005f06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e023      	b.n	8005f4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <xTaskCheckForTimeOut+0xc0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d007      	beq.n	8005f22 <xTaskCheckForTimeOut+0x82>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d302      	bcc.n	8005f22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e015      	b.n	8005f4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d20b      	bcs.n	8005f44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff9b 	bl	8005e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e004      	b.n	8005f4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f4e:	f000 fe79 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 8005f52:	69fb      	ldr	r3, [r7, #28]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3720      	adds	r7, #32
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000ed0 	.word	0x20000ed0
 8005f60:	20000ee4 	.word	0x20000ee4

08005f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f68:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <vTaskMissedYield+0x14>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000ee0 	.word	0x20000ee0

08005f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f84:	f000 f852 	bl	800602c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <prvIdleTask+0x28>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d9f9      	bls.n	8005f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <prvIdleTask+0x2c>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fa0:	e7f0      	b.n	8005f84 <prvIdleTask+0x8>
 8005fa2:	bf00      	nop
 8005fa4:	200009fc 	.word	0x200009fc
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	e00c      	b.n	8005fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <prvInitialiseTaskLists+0x60>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe fbd8 	bl	800477c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b37      	cmp	r3, #55	; 0x37
 8005fd6:	d9ef      	bls.n	8005fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd8:	480d      	ldr	r0, [pc, #52]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005fda:	f7fe fbcf 	bl	800477c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fde:	480d      	ldr	r0, [pc, #52]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8005fe0:	f7fe fbcc 	bl	800477c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fe4:	480c      	ldr	r0, [pc, #48]	; (8006018 <prvInitialiseTaskLists+0x6c>)
 8005fe6:	f7fe fbc9 	bl	800477c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fea:	480c      	ldr	r0, [pc, #48]	; (800601c <prvInitialiseTaskLists+0x70>)
 8005fec:	f7fe fbc6 	bl	800477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ff0:	480b      	ldr	r0, [pc, #44]	; (8006020 <prvInitialiseTaskLists+0x74>)
 8005ff2:	f7fe fbc3 	bl	800477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <prvInitialiseTaskLists+0x78>)
 8005ff8:	4a05      	ldr	r2, [pc, #20]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvInitialiseTaskLists+0x7c>)
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	200009fc 	.word	0x200009fc
 8006010:	20000e5c 	.word	0x20000e5c
 8006014:	20000e70 	.word	0x20000e70
 8006018:	20000e8c 	.word	0x20000e8c
 800601c:	20000ea0 	.word	0x20000ea0
 8006020:	20000eb8 	.word	0x20000eb8
 8006024:	20000e84 	.word	0x20000e84
 8006028:	20000e88 	.word	0x20000e88

0800602c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006032:	e019      	b.n	8006068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006034:	f000 fdd6 	bl	8006be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <prvCheckTasksWaitingTermination+0x50>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe fc23 	bl	8004890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <prvCheckTasksWaitingTermination+0x54>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3b01      	subs	r3, #1
 8006050:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <prvCheckTasksWaitingTermination+0x54>)
 8006052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 800605c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800605e:	f000 fdf1 	bl	8006c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f810 	bl	8006088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e1      	bne.n	8006034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000ea0 	.word	0x20000ea0
 8006080:	20000ecc 	.word	0x20000ecc
 8006084:	20000eb4 	.word	0x20000eb4

08006088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3354      	adds	r3, #84	; 0x54
 8006094:	4618      	mov	r0, r3
 8006096:	f001 f995 	bl	80073c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 ff89 	bl	8006fc0 <vPortFree>
				vPortFree( pxTCB );
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 ff86 	bl	8006fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060b4:	e018      	b.n	80060e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d103      	bne.n	80060c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 ff7d 	bl	8006fc0 <vPortFree>
	}
 80060c6:	e00f      	b.n	80060e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d00a      	beq.n	80060e8 <prvDeleteTCB+0x60>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <prvDeleteTCB+0x5e>
	}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006108:	e008      	b.n	800611c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 800611a:	6013      	str	r3, [r2, #0]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	20000e84 	.word	0x20000e84
 800612c:	20000eec 	.word	0x20000eec

08006130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <xTaskGetSchedulerState+0x34>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800613e:	2301      	movs	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	e008      	b.n	8006156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <xTaskGetSchedulerState+0x38>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800614c:	2302      	movs	r3, #2
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	e001      	b.n	8006156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006156:	687b      	ldr	r3, [r7, #4]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000ed8 	.word	0x20000ed8
 8006168:	20000ef4 	.word	0x20000ef4

0800616c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d056      	beq.n	8006230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006182:	4b2e      	ldr	r3, [pc, #184]	; (800623c <xTaskPriorityDisinherit+0xd0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	429a      	cmp	r2, r3
 800618a:	d00a      	beq.n	80061a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60fb      	str	r3, [r7, #12]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60bb      	str	r3, [r7, #8]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d02c      	beq.n	8006230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d128      	bne.n	8006230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fb54 	bl	8004890 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <xTaskPriorityDisinherit+0xd4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d903      	bls.n	8006210 <xTaskPriorityDisinherit+0xa4>
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	4a0c      	ldr	r2, [pc, #48]	; (8006240 <xTaskPriorityDisinherit+0xd4>)
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <xTaskPriorityDisinherit+0xd8>)
 800621e:	441a      	add	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f7fe fad5 	bl	80047d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006230:	697b      	ldr	r3, [r7, #20]
	}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	200009f8 	.word	0x200009f8
 8006240:	20000ed4 	.word	0x20000ed4
 8006244:	200009fc 	.word	0x200009fc

08006248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006252:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <prvAddCurrentTaskToDelayedList+0x94>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3304      	adds	r3, #4
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fb16 	bl	8004890 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d10a      	bne.n	8006282 <prvAddCurrentTaskToDelayedList+0x3a>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006272:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4819      	ldr	r0, [pc, #100]	; (80062e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800627c:	f7fe faab 	bl	80047d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006280:	e026      	b.n	80062d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4413      	add	r3, r2
 8006288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800628a:	4b14      	ldr	r3, [pc, #80]	; (80062dc <prvAddCurrentTaskToDelayedList+0x94>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	429a      	cmp	r2, r3
 8006298:	d209      	bcs.n	80062ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <prvAddCurrentTaskToDelayedList+0x94>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f7fe fab9 	bl	800481e <vListInsert>
}
 80062ac:	e010      	b.n	80062d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <prvAddCurrentTaskToDelayedList+0x94>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe faaf 	bl	800481e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d202      	bcs.n	80062d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062ca:	4a08      	ldr	r2, [pc, #32]	; (80062ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6013      	str	r3, [r2, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000ed0 	.word	0x20000ed0
 80062dc:	200009f8 	.word	0x200009f8
 80062e0:	20000eb8 	.word	0x20000eb8
 80062e4:	20000e88 	.word	0x20000e88
 80062e8:	20000e84 	.word	0x20000e84
 80062ec:	20000eec 	.word	0x20000eec

080062f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062fa:	f000 fb07 	bl	800690c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062fe:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <xTimerCreateTimerTask+0x80>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d021      	beq.n	800634a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800630e:	1d3a      	adds	r2, r7, #4
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fa15 	bl	8004748 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	9202      	str	r2, [sp, #8]
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	2302      	movs	r3, #2
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	460a      	mov	r2, r1
 8006330:	4910      	ldr	r1, [pc, #64]	; (8006374 <xTimerCreateTimerTask+0x84>)
 8006332:	4811      	ldr	r0, [pc, #68]	; (8006378 <xTimerCreateTimerTask+0x88>)
 8006334:	f7ff f8b4 	bl	80054a0 <xTaskCreateStatic>
 8006338:	4603      	mov	r3, r0
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <xTimerCreateTimerTask+0x8c>)
 800633c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800633e:	4b0f      	ldr	r3, [pc, #60]	; (800637c <xTimerCreateTimerTask+0x8c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006346:	2301      	movs	r3, #1
 8006348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	613b      	str	r3, [r7, #16]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000f28 	.word	0x20000f28
 8006374:	08007d60 	.word	0x08007d60
 8006378:	080064b5 	.word	0x080064b5
 800637c:	20000f2c 	.word	0x20000f2c

08006380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	623b      	str	r3, [r7, #32]
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <xTimerGenericCommand+0x98>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02a      	beq.n	800640c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	dc18      	bgt.n	80063fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063c8:	f7ff feb2 	bl	8006130 <xTaskGetSchedulerState>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d109      	bne.n	80063e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <xTimerGenericCommand+0x98>)
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f107 0110 	add.w	r1, r7, #16
 80063da:	2300      	movs	r3, #0
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	f7fe fc29 	bl	8004c34 <xQueueGenericSend>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24
 80063e4:	e012      	b.n	800640c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063e6:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <xTimerGenericCommand+0x98>)
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f107 0110 	add.w	r1, r7, #16
 80063ee:	2300      	movs	r3, #0
 80063f0:	2200      	movs	r2, #0
 80063f2:	f7fe fc1f 	bl	8004c34 <xQueueGenericSend>
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24
 80063f8:	e008      	b.n	800640c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <xTimerGenericCommand+0x98>)
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f107 0110 	add.w	r1, r7, #16
 8006402:	2300      	movs	r3, #0
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	f7fe fd13 	bl	8004e30 <xQueueGenericSendFromISR>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000f28 	.word	0x20000f28

0800641c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <prvProcessExpiredTimer+0x94>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fa2b 	bl	8004890 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	18d1      	adds	r1, r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	6978      	ldr	r0, [r7, #20]
 8006456:	f000 f8d1 	bl	80065fc <prvInsertTimerInActiveList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01f      	beq.n	80064a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006460:	2300      	movs	r3, #0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	2100      	movs	r1, #0
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff88 	bl	8006380 <xTimerGenericCommand>
 8006470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d113      	bne.n	80064a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	6978      	ldr	r0, [r7, #20]
 80064a6:	4798      	blx	r3
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000f20 	.word	0x20000f20

080064b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f857 	bl	8006574 <prvGetNextExpireTime>
 80064c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f803 	bl	80064d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064d2:	f000 f8d5 	bl	8006680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d6:	e7f1      	b.n	80064bc <prvTimerTask+0x8>

080064d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064e2:	f7ff fa39 	bl	8005958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f866 	bl	80065bc <prvSampleTimeNow>
 80064f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d130      	bne.n	800655a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	429a      	cmp	r2, r3
 8006504:	d806      	bhi.n	8006514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006506:	f7ff fa35 	bl	8005974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff85 	bl	800641c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006512:	e024      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <prvProcessTimerOrBlockTask+0x90>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <prvProcessTimerOrBlockTask+0x50>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <prvProcessTimerOrBlockTask+0x52>
 8006528:	2300      	movs	r3, #0
 800652a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <prvProcessTimerOrBlockTask+0x94>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	f7fe ff7d 	bl	8005438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800653e:	f7ff fa19 	bl	8005974 <xTaskResumeAll>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006548:	4b09      	ldr	r3, [pc, #36]	; (8006570 <prvProcessTimerOrBlockTask+0x98>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
}
 8006558:	e001      	b.n	800655e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800655a:	f7ff fa0b 	bl	8005974 <xTaskResumeAll>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000f24 	.word	0x20000f24
 800656c:	20000f28 	.word	0x20000f28
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <prvGetNextExpireTime+0x44>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <prvGetNextExpireTime+0x16>
 8006586:	2201      	movs	r2, #1
 8006588:	e000      	b.n	800658c <prvGetNextExpireTime+0x18>
 800658a:	2200      	movs	r2, #0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <prvGetNextExpireTime+0x44>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e001      	b.n	80065a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20000f20 	.word	0x20000f20

080065bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065c4:	f7ff fa74 	bl	8005ab0 <xTaskGetTickCount>
 80065c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <prvSampleTimeNow+0x3c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d205      	bcs.n	80065e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065d4:	f000 f936 	bl	8006844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e002      	b.n	80065e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065e6:	4a04      	ldr	r2, [pc, #16]	; (80065f8 <prvSampleTimeNow+0x3c>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000f30 	.word	0x20000f30

080065fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d812      	bhi.n	8006648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d302      	bcc.n	8006636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e01b      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <prvInsertTimerInActiveList+0x7c>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe f8ec 	bl	800481e <vListInsert>
 8006646:	e012      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d206      	bcs.n	800665e <prvInsertTimerInActiveList+0x62>
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e007      	b.n	800666e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <prvInsertTimerInActiveList+0x80>)
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe f8d8 	bl	800481e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800666e:	697b      	ldr	r3, [r7, #20]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000f24 	.word	0x20000f24
 800667c:	20000f20 	.word	0x20000f20

08006680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006686:	e0ca      	b.n	800681e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	da18      	bge.n	80066c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	3304      	adds	r3, #4
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	6850      	ldr	r0, [r2, #4]
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	6892      	ldr	r2, [r2, #8]
 80066bc:	4611      	mov	r1, r2
 80066be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f2c0 80aa 	blt.w	800681c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	3304      	adds	r3, #4
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe f8d9 	bl	8004890 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066de:	463b      	mov	r3, r7
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff6b 	bl	80065bc <prvSampleTimeNow>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	f200 8097 	bhi.w	800681e <prvProcessReceivedCommands+0x19e>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <prvProcessReceivedCommands+0x78>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	08006721 	.word	0x08006721
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006721 	.word	0x08006721
 8006704:	08006795 	.word	0x08006795
 8006708:	080067a9 	.word	0x080067a9
 800670c:	080067f3 	.word	0x080067f3
 8006710:	08006721 	.word	0x08006721
 8006714:	08006721 	.word	0x08006721
 8006718:	08006795 	.word	0x08006795
 800671c:	080067a9 	.word	0x080067a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	18d1      	adds	r1, r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006740:	f7ff ff5c 	bl	80065fc <prvInsertTimerInActiveList>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d069      	beq.n	800681e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05e      	beq.n	800681e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	441a      	add	r2, r3
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	2100      	movs	r1, #0
 8006770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006772:	f7ff fe05 	bl	8006380 <xTimerGenericCommand>
 8006776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d14f      	bne.n	800681e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61bb      	str	r3, [r7, #24]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800679a:	f023 0301 	bic.w	r3, r3, #1
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067a6:	e03a      	b.n	800681e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	617b      	str	r3, [r7, #20]
}
 80067da:	bf00      	nop
 80067dc:	e7fe      	b.n	80067dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	18d1      	adds	r1, r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ec:	f7ff ff06 	bl	80065fc <prvInsertTimerInActiveList>
					break;
 80067f0:	e015      	b.n	800681e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006802:	f000 fbdd 	bl	8006fc0 <vPortFree>
 8006806:	e00a      	b.n	800681e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800681a:	e000      	b.n	800681e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800681c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681e:	4b08      	ldr	r3, [pc, #32]	; (8006840 <prvProcessReceivedCommands+0x1c0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	1d39      	adds	r1, r7, #4
 8006824:	2200      	movs	r2, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fb9e 	bl	8004f68 <xQueueReceive>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	f47f af2a 	bne.w	8006688 <prvProcessReceivedCommands+0x8>
	}
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3730      	adds	r7, #48	; 0x30
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000f28 	.word	0x20000f28

08006844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800684a:	e048      	b.n	80068de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <prvSwitchTimerLists+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <prvSwitchTimerLists+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe f813 	bl	8004890 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02e      	beq.n	80068de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d90e      	bls.n	80068b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800689e:	4b19      	ldr	r3, [pc, #100]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7fd ffb8 	bl	800481e <vListInsert>
 80068ae:	e016      	b.n	80068de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068b0:	2300      	movs	r3, #0
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff fd60 	bl	8006380 <xTimerGenericCommand>
 80068c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	603b      	str	r3, [r7, #0]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068de:	4b09      	ldr	r3, [pc, #36]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1b1      	bne.n	800684c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <prvSwitchTimerLists+0xc4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a04      	ldr	r2, [pc, #16]	; (8006904 <prvSwitchTimerLists+0xc0>)
 80068f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80068f6:	4a04      	ldr	r2, [pc, #16]	; (8006908 <prvSwitchTimerLists+0xc4>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6013      	str	r3, [r2, #0]
}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000f20 	.word	0x20000f20
 8006908:	20000f24 	.word	0x20000f24

0800690c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006912:	f000 f967 	bl	8006be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d120      	bne.n	8006960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800691e:	4814      	ldr	r0, [pc, #80]	; (8006970 <prvCheckForValidListAndQueue+0x64>)
 8006920:	f7fd ff2c 	bl	800477c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006924:	4813      	ldr	r0, [pc, #76]	; (8006974 <prvCheckForValidListAndQueue+0x68>)
 8006926:	f7fd ff29 	bl	800477c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <prvCheckForValidListAndQueue+0x6c>)
 800692c:	4a10      	ldr	r2, [pc, #64]	; (8006970 <prvCheckForValidListAndQueue+0x64>)
 800692e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006930:	4b12      	ldr	r3, [pc, #72]	; (800697c <prvCheckForValidListAndQueue+0x70>)
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <prvCheckForValidListAndQueue+0x68>)
 8006934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006936:	2300      	movs	r3, #0
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <prvCheckForValidListAndQueue+0x74>)
 800693c:	4a11      	ldr	r2, [pc, #68]	; (8006984 <prvCheckForValidListAndQueue+0x78>)
 800693e:	2110      	movs	r1, #16
 8006940:	200a      	movs	r0, #10
 8006942:	f7fe f837 	bl	80049b4 <xQueueGenericCreateStatic>
 8006946:	4603      	mov	r3, r0
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 800694a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <prvCheckForValidListAndQueue+0x60>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	490b      	ldr	r1, [pc, #44]	; (8006988 <prvCheckForValidListAndQueue+0x7c>)
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fd18 	bl	8005390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006960:	f000 f970 	bl	8006c44 <vPortExitCritical>
}
 8006964:	bf00      	nop
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000f28 	.word	0x20000f28
 8006970:	20000ef8 	.word	0x20000ef8
 8006974:	20000f0c 	.word	0x20000f0c
 8006978:	20000f20 	.word	0x20000f20
 800697c:	20000f24 	.word	0x20000f24
 8006980:	20000fd4 	.word	0x20000fd4
 8006984:	20000f34 	.word	0x20000f34
 8006988:	08007d68 	.word	0x08007d68

0800698c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b04      	subs	r3, #4
 800699c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f023 0201 	bic.w	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069bc:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <pxPortInitialiseStack+0x64>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3b14      	subs	r3, #20
 80069c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3b04      	subs	r3, #4
 80069d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f06f 0202 	mvn.w	r2, #2
 80069da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3b20      	subs	r3, #32
 80069e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	080069f5 	.word	0x080069f5

080069f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069fe:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <prvTaskExitError+0x54>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a06:	d00a      	beq.n	8006a1e <prvTaskExitError+0x2a>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	60fb      	str	r3, [r7, #12]
}
 8006a1a:	bf00      	nop
 8006a1c:	e7fe      	b.n	8006a1c <prvTaskExitError+0x28>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60bb      	str	r3, [r7, #8]
}
 8006a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a32:	bf00      	nop
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0fc      	beq.n	8006a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20000010 	.word	0x20000010
 8006a4c:	00000000 	.word	0x00000000

08006a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <pxCurrentTCBConst2>)
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	6808      	ldr	r0, [r1, #0]
 8006a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	f380 8809 	msr	PSP, r0
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8811 	msr	BASEPRI, r0
 8006a6a:	4770      	bx	lr
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst2>:
 8006a70:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a78:	4808      	ldr	r0, [pc, #32]	; (8006a9c <prvPortStartFirstTask+0x24>)
 8006a7a:	6800      	ldr	r0, [r0, #0]
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f380 8808 	msr	MSP, r0
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8814 	msr	CONTROL, r0
 8006a8a:	b662      	cpsie	i
 8006a8c:	b661      	cpsie	f
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	df00      	svc	0
 8006a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed08 	.word	0xe000ed08

08006aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006aa6:	4b46      	ldr	r3, [pc, #280]	; (8006bc0 <xPortStartScheduler+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a46      	ldr	r2, [pc, #280]	; (8006bc4 <xPortStartScheduler+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10a      	bne.n	8006ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ac6:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <xPortStartScheduler+0x120>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <xPortStartScheduler+0x128>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10a      	bne.n	8006ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ae6:	4b39      	ldr	r3, [pc, #228]	; (8006bcc <xPortStartScheduler+0x12c>)
 8006ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4b31      	ldr	r3, [pc, #196]	; (8006bd0 <xPortStartScheduler+0x130>)
 8006b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b14:	e009      	b.n	8006b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b16:	4b2f      	ldr	r3, [pc, #188]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d0ef      	beq.n	8006b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b36:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1c3 0307 	rsb	r3, r3, #7
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d00a      	beq.n	8006b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60bb      	str	r3, [r7, #8]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b58:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b76:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a14      	ldr	r2, [pc, #80]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b8e:	f000 f8dd 	bl	8006d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <xPortStartScheduler+0x13c>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b98:	f000 f8fc 	bl	8006d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b9c:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <xPortStartScheduler+0x140>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0f      	ldr	r2, [pc, #60]	; (8006be0 <xPortStartScheduler+0x140>)
 8006ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ba8:	f7ff ff66 	bl	8006a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bac:	f7ff f84a 	bl	8005c44 <vTaskSwitchContext>
	prvTaskExitError();
 8006bb0:	f7ff ff20 	bl	80069f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	e000ed00 	.word	0xe000ed00
 8006bc4:	410fc271 	.word	0x410fc271
 8006bc8:	410fc270 	.word	0x410fc270
 8006bcc:	e000e400 	.word	0xe000e400
 8006bd0:	20001024 	.word	0x20001024
 8006bd4:	20001028 	.word	0x20001028
 8006bd8:	e000ed20 	.word	0xe000ed20
 8006bdc:	20000010 	.word	0x20000010
 8006be0:	e000ef34 	.word	0xe000ef34

08006be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	607b      	str	r3, [r7, #4]
}
 8006bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10f      	bne.n	8006c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <vPortEnterCritical+0x5c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	603b      	str	r3, [r7, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <vPortEnterCritical+0x4a>
	}
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000010 	.word	0x20000010
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <vPortExitCritical+0x50>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <vPortExitCritical+0x24>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <vPortExitCritical+0x50>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <vPortExitCritical+0x50>)
 8006c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <vPortExitCritical+0x50>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <vPortExitCritical+0x42>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f383 8811 	msr	BASEPRI, r3
}
 8006c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010
	...

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <pxCurrentTCBConst>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f01e 0f10 	tst.w	lr, #16
 8006cb0:	bf08      	it	eq
 8006cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	6010      	str	r0, [r2, #0]
 8006cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cc4:	f380 8811 	msr	BASEPRI, r0
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f7fe ffb8 	bl	8005c44 <vTaskSwitchContext>
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f380 8811 	msr	BASEPRI, r0
 8006cdc:	bc09      	pop	{r0, r3}
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce6:	f01e 0f10 	tst.w	lr, #16
 8006cea:	bf08      	it	eq
 8006cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cf0:	f380 8809 	msr	PSP, r0
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst>:
 8006d00:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	607b      	str	r3, [r7, #4]
}
 8006d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d22:	f7fe fed5 	bl	8005ad0 <xTaskIncrementTick>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <xPortSysTickHandler+0x40>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <vPortSetupTimerInterrupt+0x38>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vPortSetupTimerInterrupt+0x3c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <vPortSetupTimerInterrupt+0x40>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <vPortSetupTimerInterrupt+0x44>)
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010
 8006d84:	e000e018 	.word	0xe000e018
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	e000e014 	.word	0xe000e014

08006d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006da4 <vPortEnableVFP+0x10>
 8006d98:	6801      	ldr	r1, [r0, #0]
 8006d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d9e:	6001      	str	r1, [r0, #0]
 8006da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006da2:	bf00      	nop
 8006da4:	e000ed88 	.word	0xe000ed88

08006da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dae:	f3ef 8305 	mrs	r3, IPSR
 8006db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d914      	bls.n	8006de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <vPortValidateInterruptPriority+0x70>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <vPortValidateInterruptPriority+0x74>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	7afa      	ldrb	r2, [r7, #11]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20a      	bcs.n	8006de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <vPortValidateInterruptPriority+0x78>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <vPortValidateInterruptPriority+0x7c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d90a      	bls.n	8006e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	603b      	str	r3, [r7, #0]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <vPortValidateInterruptPriority+0x60>
	}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000e3f0 	.word	0xe000e3f0
 8006e1c:	20001024 	.word	0x20001024
 8006e20:	e000ed0c 	.word	0xe000ed0c
 8006e24:	20001028 	.word	0x20001028

08006e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e34:	f7fe fd90 	bl	8005958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e38:	4b5b      	ldr	r3, [pc, #364]	; (8006fa8 <pvPortMalloc+0x180>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e40:	f000 f920 	bl	8007084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e44:	4b59      	ldr	r3, [pc, #356]	; (8006fac <pvPortMalloc+0x184>)
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 8093 	bne.w	8006f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01d      	beq.n	8006e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e58:	2208      	movs	r2, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f023 0307 	bic.w	r3, r3, #7
 8006e70:	3308      	adds	r3, #8
 8006e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <pvPortMalloc+0x6c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	617b      	str	r3, [r7, #20]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d06e      	beq.n	8006f78 <pvPortMalloc+0x150>
 8006e9a:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <pvPortMalloc+0x188>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d869      	bhi.n	8006f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ea4:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <pvPortMalloc+0x18c>)
 8006ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ea8:	4b42      	ldr	r3, [pc, #264]	; (8006fb4 <pvPortMalloc+0x18c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eae:	e004      	b.n	8006eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d903      	bls.n	8006ecc <pvPortMalloc+0xa4>
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f1      	bne.n	8006eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ecc:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <pvPortMalloc+0x180>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d050      	beq.n	8006f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2208      	movs	r2, #8
 8006edc:	4413      	add	r3, r2
 8006ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	2308      	movs	r3, #8
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d91f      	bls.n	8006f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <pvPortMalloc+0xf8>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	613b      	str	r3, [r7, #16]
}
 8006f1c:	bf00      	nop
 8006f1e:	e7fe      	b.n	8006f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1ad2      	subs	r2, r2, r3
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f32:	69b8      	ldr	r0, [r7, #24]
 8006f34:	f000 f908 	bl	8007148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <pvPortMalloc+0x188>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <pvPortMalloc+0x188>)
 8006f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <pvPortMalloc+0x188>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <pvPortMalloc+0x190>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d203      	bcs.n	8006f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <pvPortMalloc+0x188>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <pvPortMalloc+0x190>)
 8006f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <pvPortMalloc+0x184>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <pvPortMalloc+0x194>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <pvPortMalloc+0x194>)
 8006f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f78:	f7fe fcfc 	bl	8005974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <pvPortMalloc+0x174>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60fb      	str	r3, [r7, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <pvPortMalloc+0x172>
	return pvReturn;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3728      	adds	r7, #40	; 0x28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20004c34 	.word	0x20004c34
 8006fac:	20004c48 	.word	0x20004c48
 8006fb0:	20004c38 	.word	0x20004c38
 8006fb4:	20004c2c 	.word	0x20004c2c
 8006fb8:	20004c3c 	.word	0x20004c3c
 8006fbc:	20004c40 	.word	0x20004c40

08006fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d04d      	beq.n	800706e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	425b      	negs	r3, r3
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	4b24      	ldr	r3, [pc, #144]	; (8007078 <vPortFree+0xb8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <vPortFree+0x44>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	60fb      	str	r3, [r7, #12]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <vPortFree+0x62>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	60bb      	str	r3, [r7, #8]
}
 800701e:	bf00      	nop
 8007020:	e7fe      	b.n	8007020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <vPortFree+0xb8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d11a      	bne.n	800706e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <vPortFree+0xb8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	43db      	mvns	r3, r3
 8007042:	401a      	ands	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007048:	f7fe fc86 	bl	8005958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <vPortFree+0xbc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4413      	add	r3, r2
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <vPortFree+0xbc>)
 8007058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800705a:	6938      	ldr	r0, [r7, #16]
 800705c:	f000 f874 	bl	8007148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <vPortFree+0xc0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <vPortFree+0xc0>)
 8007068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800706a:	f7fe fc83 	bl	8005974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800706e:	bf00      	nop
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20004c48 	.word	0x20004c48
 800707c:	20004c38 	.word	0x20004c38
 8007080:	20004c44 	.word	0x20004c44

08007084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800708a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800708e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007090:	4b27      	ldr	r3, [pc, #156]	; (8007130 <prvHeapInit+0xac>)
 8007092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00c      	beq.n	80070b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	3307      	adds	r3, #7
 80070a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0307 	bic.w	r3, r3, #7
 80070aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	4a1f      	ldr	r2, [pc, #124]	; (8007130 <prvHeapInit+0xac>)
 80070b4:	4413      	add	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070bc:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <prvHeapInit+0xb0>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070c2:	4b1c      	ldr	r3, [pc, #112]	; (8007134 <prvHeapInit+0xb0>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	4413      	add	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070d0:	2208      	movs	r2, #8
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0307 	bic.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4a15      	ldr	r2, [pc, #84]	; (8007138 <prvHeapInit+0xb4>)
 80070e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070e6:	4b14      	ldr	r3, [pc, #80]	; (8007138 <prvHeapInit+0xb4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070ee:	4b12      	ldr	r3, [pc, #72]	; (8007138 <prvHeapInit+0xb4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	1ad2      	subs	r2, r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007104:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <prvHeapInit+0xb4>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4a0a      	ldr	r2, [pc, #40]	; (800713c <prvHeapInit+0xb8>)
 8007112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <prvHeapInit+0xbc>)
 800711a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <prvHeapInit+0xc0>)
 800711e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	2000102c 	.word	0x2000102c
 8007134:	20004c2c 	.word	0x20004c2c
 8007138:	20004c34 	.word	0x20004c34
 800713c:	20004c3c 	.word	0x20004c3c
 8007140:	20004c38 	.word	0x20004c38
 8007144:	20004c48 	.word	0x20004c48

08007148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007150:	4b28      	ldr	r3, [pc, #160]	; (80071f4 <prvInsertBlockIntoFreeList+0xac>)
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e002      	b.n	800715c <prvInsertBlockIntoFreeList+0x14>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d8f7      	bhi.n	8007156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	4413      	add	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d108      	bne.n	800718a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	441a      	add	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	441a      	add	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d118      	bne.n	80071d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <prvInsertBlockIntoFreeList+0xb0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d00d      	beq.n	80071c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	441a      	add	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e008      	b.n	80071d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <prvInsertBlockIntoFreeList+0xb0>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e003      	b.n	80071d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d002      	beq.n	80071e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20004c2c 	.word	0x20004c2c
 80071f8:	20004c34 	.word	0x20004c34

080071fc <__errno>:
 80071fc:	4b01      	ldr	r3, [pc, #4]	; (8007204 <__errno+0x8>)
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000014 	.word	0x20000014

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4d0d      	ldr	r5, [pc, #52]	; (8007240 <__libc_init_array+0x38>)
 800720c:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 800720e:	1b64      	subs	r4, r4, r5
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	2600      	movs	r6, #0
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	4d0b      	ldr	r5, [pc, #44]	; (8007248 <__libc_init_array+0x40>)
 800721a:	4c0c      	ldr	r4, [pc, #48]	; (800724c <__libc_init_array+0x44>)
 800721c:	f000 fd08 	bl	8007c30 <_init>
 8007220:	1b64      	subs	r4, r4, r5
 8007222:	10a4      	asrs	r4, r4, #2
 8007224:	2600      	movs	r6, #0
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	08007ea0 	.word	0x08007ea0
 8007244:	08007ea0 	.word	0x08007ea0
 8007248:	08007ea0 	.word	0x08007ea0
 800724c:	08007ea4 	.word	0x08007ea4

08007250 <__retarget_lock_acquire_recursive>:
 8007250:	4770      	bx	lr

08007252 <__retarget_lock_release_recursive>:
 8007252:	4770      	bx	lr

08007254 <memcpy>:
 8007254:	440a      	add	r2, r1
 8007256:	4291      	cmp	r1, r2
 8007258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800725c:	d100      	bne.n	8007260 <memcpy+0xc>
 800725e:	4770      	bx	lr
 8007260:	b510      	push	{r4, lr}
 8007262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726a:	4291      	cmp	r1, r2
 800726c:	d1f9      	bne.n	8007262 <memcpy+0xe>
 800726e:	bd10      	pop	{r4, pc}

08007270 <memset>:
 8007270:	4402      	add	r2, r0
 8007272:	4603      	mov	r3, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	d100      	bne.n	800727a <memset+0xa>
 8007278:	4770      	bx	lr
 800727a:	f803 1b01 	strb.w	r1, [r3], #1
 800727e:	e7f9      	b.n	8007274 <memset+0x4>

08007280 <sbrk_aligned>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4e0e      	ldr	r6, [pc, #56]	; (80072bc <sbrk_aligned+0x3c>)
 8007284:	460c      	mov	r4, r1
 8007286:	6831      	ldr	r1, [r6, #0]
 8007288:	4605      	mov	r5, r0
 800728a:	b911      	cbnz	r1, 8007292 <sbrk_aligned+0x12>
 800728c:	f000 f8f6 	bl	800747c <_sbrk_r>
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f000 f8f1 	bl	800747c <_sbrk_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d00a      	beq.n	80072b4 <sbrk_aligned+0x34>
 800729e:	1cc4      	adds	r4, r0, #3
 80072a0:	f024 0403 	bic.w	r4, r4, #3
 80072a4:	42a0      	cmp	r0, r4
 80072a6:	d007      	beq.n	80072b8 <sbrk_aligned+0x38>
 80072a8:	1a21      	subs	r1, r4, r0
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f8e6 	bl	800747c <_sbrk_r>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d101      	bne.n	80072b8 <sbrk_aligned+0x38>
 80072b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072b8:	4620      	mov	r0, r4
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	20004c54 	.word	0x20004c54

080072c0 <_malloc_r>:
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	1ccd      	adds	r5, r1, #3
 80072c6:	f025 0503 	bic.w	r5, r5, #3
 80072ca:	3508      	adds	r5, #8
 80072cc:	2d0c      	cmp	r5, #12
 80072ce:	bf38      	it	cc
 80072d0:	250c      	movcc	r5, #12
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	4607      	mov	r7, r0
 80072d6:	db01      	blt.n	80072dc <_malloc_r+0x1c>
 80072d8:	42a9      	cmp	r1, r5
 80072da:	d905      	bls.n	80072e8 <_malloc_r+0x28>
 80072dc:	230c      	movs	r3, #12
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	2600      	movs	r6, #0
 80072e2:	4630      	mov	r0, r6
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	4e2e      	ldr	r6, [pc, #184]	; (80073a4 <_malloc_r+0xe4>)
 80072ea:	f000 f907 	bl	80074fc <__malloc_lock>
 80072ee:	6833      	ldr	r3, [r6, #0]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb34      	cbnz	r4, 8007342 <_malloc_r+0x82>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc2 	bl	8007280 <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d14d      	bne.n	800739e <_malloc_r+0xde>
 8007302:	6834      	ldr	r4, [r6, #0]
 8007304:	4626      	mov	r6, r4
 8007306:	2e00      	cmp	r6, #0
 8007308:	d140      	bne.n	800738c <_malloc_r+0xcc>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4631      	mov	r1, r6
 800730e:	4638      	mov	r0, r7
 8007310:	eb04 0803 	add.w	r8, r4, r3
 8007314:	f000 f8b2 	bl	800747c <_sbrk_r>
 8007318:	4580      	cmp	r8, r0
 800731a:	d13a      	bne.n	8007392 <_malloc_r+0xd2>
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	3503      	adds	r5, #3
 8007320:	1a6d      	subs	r5, r5, r1
 8007322:	f025 0503 	bic.w	r5, r5, #3
 8007326:	3508      	adds	r5, #8
 8007328:	2d0c      	cmp	r5, #12
 800732a:	bf38      	it	cc
 800732c:	250c      	movcc	r5, #12
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ffa5 	bl	8007280 <sbrk_aligned>
 8007336:	3001      	adds	r0, #1
 8007338:	d02b      	beq.n	8007392 <_malloc_r+0xd2>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	442b      	add	r3, r5
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	e00e      	b.n	8007360 <_malloc_r+0xa0>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	1b52      	subs	r2, r2, r5
 8007346:	d41e      	bmi.n	8007386 <_malloc_r+0xc6>
 8007348:	2a0b      	cmp	r2, #11
 800734a:	d916      	bls.n	800737a <_malloc_r+0xba>
 800734c:	1961      	adds	r1, r4, r5
 800734e:	42a3      	cmp	r3, r4
 8007350:	6025      	str	r5, [r4, #0]
 8007352:	bf18      	it	ne
 8007354:	6059      	strne	r1, [r3, #4]
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	bf08      	it	eq
 800735a:	6031      	streq	r1, [r6, #0]
 800735c:	5162      	str	r2, [r4, r5]
 800735e:	604b      	str	r3, [r1, #4]
 8007360:	4638      	mov	r0, r7
 8007362:	f104 060b 	add.w	r6, r4, #11
 8007366:	f000 f8cf 	bl	8007508 <__malloc_unlock>
 800736a:	f026 0607 	bic.w	r6, r6, #7
 800736e:	1d23      	adds	r3, r4, #4
 8007370:	1af2      	subs	r2, r6, r3
 8007372:	d0b6      	beq.n	80072e2 <_malloc_r+0x22>
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	50a3      	str	r3, [r4, r2]
 8007378:	e7b3      	b.n	80072e2 <_malloc_r+0x22>
 800737a:	6862      	ldr	r2, [r4, #4]
 800737c:	42a3      	cmp	r3, r4
 800737e:	bf0c      	ite	eq
 8007380:	6032      	streq	r2, [r6, #0]
 8007382:	605a      	strne	r2, [r3, #4]
 8007384:	e7ec      	b.n	8007360 <_malloc_r+0xa0>
 8007386:	4623      	mov	r3, r4
 8007388:	6864      	ldr	r4, [r4, #4]
 800738a:	e7b2      	b.n	80072f2 <_malloc_r+0x32>
 800738c:	4634      	mov	r4, r6
 800738e:	6876      	ldr	r6, [r6, #4]
 8007390:	e7b9      	b.n	8007306 <_malloc_r+0x46>
 8007392:	230c      	movs	r3, #12
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4638      	mov	r0, r7
 8007398:	f000 f8b6 	bl	8007508 <__malloc_unlock>
 800739c:	e7a1      	b.n	80072e2 <_malloc_r+0x22>
 800739e:	6025      	str	r5, [r4, #0]
 80073a0:	e7de      	b.n	8007360 <_malloc_r+0xa0>
 80073a2:	bf00      	nop
 80073a4:	20004c50 	.word	0x20004c50

080073a8 <cleanup_glue>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	6809      	ldr	r1, [r1, #0]
 80073ae:	4605      	mov	r5, r0
 80073b0:	b109      	cbz	r1, 80073b6 <cleanup_glue+0xe>
 80073b2:	f7ff fff9 	bl	80073a8 <cleanup_glue>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4628      	mov	r0, r5
 80073ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073be:	f000 b8a9 	b.w	8007514 <_free_r>
	...

080073c4 <_reclaim_reent>:
 80073c4:	4b2c      	ldr	r3, [pc, #176]	; (8007478 <_reclaim_reent+0xb4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4283      	cmp	r3, r0
 80073ca:	b570      	push	{r4, r5, r6, lr}
 80073cc:	4604      	mov	r4, r0
 80073ce:	d051      	beq.n	8007474 <_reclaim_reent+0xb0>
 80073d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073d2:	b143      	cbz	r3, 80073e6 <_reclaim_reent+0x22>
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d14a      	bne.n	8007470 <_reclaim_reent+0xac>
 80073da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073dc:	6819      	ldr	r1, [r3, #0]
 80073de:	b111      	cbz	r1, 80073e6 <_reclaim_reent+0x22>
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 f897 	bl	8007514 <_free_r>
 80073e6:	6961      	ldr	r1, [r4, #20]
 80073e8:	b111      	cbz	r1, 80073f0 <_reclaim_reent+0x2c>
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 f892 	bl	8007514 <_free_r>
 80073f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80073f2:	b111      	cbz	r1, 80073fa <_reclaim_reent+0x36>
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 f88d 	bl	8007514 <_free_r>
 80073fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073fc:	b111      	cbz	r1, 8007404 <_reclaim_reent+0x40>
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 f888 	bl	8007514 <_free_r>
 8007404:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007406:	b111      	cbz	r1, 800740e <_reclaim_reent+0x4a>
 8007408:	4620      	mov	r0, r4
 800740a:	f000 f883 	bl	8007514 <_free_r>
 800740e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007410:	b111      	cbz	r1, 8007418 <_reclaim_reent+0x54>
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f87e 	bl	8007514 <_free_r>
 8007418:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800741a:	b111      	cbz	r1, 8007422 <_reclaim_reent+0x5e>
 800741c:	4620      	mov	r0, r4
 800741e:	f000 f879 	bl	8007514 <_free_r>
 8007422:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007424:	b111      	cbz	r1, 800742c <_reclaim_reent+0x68>
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f874 	bl	8007514 <_free_r>
 800742c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742e:	b111      	cbz	r1, 8007436 <_reclaim_reent+0x72>
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f86f 	bl	8007514 <_free_r>
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	b1e3      	cbz	r3, 8007474 <_reclaim_reent+0xb0>
 800743a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800743c:	4620      	mov	r0, r4
 800743e:	4798      	blx	r3
 8007440:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007442:	b1b9      	cbz	r1, 8007474 <_reclaim_reent+0xb0>
 8007444:	4620      	mov	r0, r4
 8007446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800744a:	f7ff bfad 	b.w	80073a8 <cleanup_glue>
 800744e:	5949      	ldr	r1, [r1, r5]
 8007450:	b941      	cbnz	r1, 8007464 <_reclaim_reent+0xa0>
 8007452:	3504      	adds	r5, #4
 8007454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007456:	2d80      	cmp	r5, #128	; 0x80
 8007458:	68d9      	ldr	r1, [r3, #12]
 800745a:	d1f8      	bne.n	800744e <_reclaim_reent+0x8a>
 800745c:	4620      	mov	r0, r4
 800745e:	f000 f859 	bl	8007514 <_free_r>
 8007462:	e7ba      	b.n	80073da <_reclaim_reent+0x16>
 8007464:	680e      	ldr	r6, [r1, #0]
 8007466:	4620      	mov	r0, r4
 8007468:	f000 f854 	bl	8007514 <_free_r>
 800746c:	4631      	mov	r1, r6
 800746e:	e7ef      	b.n	8007450 <_reclaim_reent+0x8c>
 8007470:	2500      	movs	r5, #0
 8007472:	e7ef      	b.n	8007454 <_reclaim_reent+0x90>
 8007474:	bd70      	pop	{r4, r5, r6, pc}
 8007476:	bf00      	nop
 8007478:	20000014 	.word	0x20000014

0800747c <_sbrk_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_sbrk_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7f9 fcda 	bl	8000e40 <_sbrk>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_sbrk_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_sbrk_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20004c58 	.word	0x20004c58

0800749c <siprintf>:
 800749c:	b40e      	push	{r1, r2, r3}
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	; 0x70
 80074a2:	ab1d      	add	r3, sp, #116	; 0x74
 80074a4:	9002      	str	r0, [sp, #8]
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074ac:	4809      	ldr	r0, [pc, #36]	; (80074d4 <siprintf+0x38>)
 80074ae:	9107      	str	r1, [sp, #28]
 80074b0:	9104      	str	r1, [sp, #16]
 80074b2:	4909      	ldr	r1, [pc, #36]	; (80074d8 <siprintf+0x3c>)
 80074b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b8:	9105      	str	r1, [sp, #20]
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	a902      	add	r1, sp, #8
 80074c0:	f000 f8d0 	bl	8007664 <_svfiprintf_r>
 80074c4:	9b02      	ldr	r3, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	b01c      	add	sp, #112	; 0x70
 80074cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d0:	b003      	add	sp, #12
 80074d2:	4770      	bx	lr
 80074d4:	20000014 	.word	0x20000014
 80074d8:	ffff0208 	.word	0xffff0208

080074dc <strcat>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4602      	mov	r2, r0
 80074e0:	7814      	ldrb	r4, [r2, #0]
 80074e2:	4613      	mov	r3, r2
 80074e4:	3201      	adds	r2, #1
 80074e6:	2c00      	cmp	r4, #0
 80074e8:	d1fa      	bne.n	80074e0 <strcat+0x4>
 80074ea:	3b01      	subs	r3, #1
 80074ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d1f9      	bne.n	80074ec <strcat+0x10>
 80074f8:	bd10      	pop	{r4, pc}
	...

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_lock+0x8>)
 80074fe:	f7ff bea7 	b.w	8007250 <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	20004c4c 	.word	0x20004c4c

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_unlock+0x8>)
 800750a:	f7ff bea2 	b.w	8007252 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	20004c4c 	.word	0x20004c4c

08007514 <_free_r>:
 8007514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007516:	2900      	cmp	r1, #0
 8007518:	d044      	beq.n	80075a4 <_free_r+0x90>
 800751a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751e:	9001      	str	r0, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f1a1 0404 	sub.w	r4, r1, #4
 8007526:	bfb8      	it	lt
 8007528:	18e4      	addlt	r4, r4, r3
 800752a:	f7ff ffe7 	bl	80074fc <__malloc_lock>
 800752e:	4a1e      	ldr	r2, [pc, #120]	; (80075a8 <_free_r+0x94>)
 8007530:	9801      	ldr	r0, [sp, #4]
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	b933      	cbnz	r3, 8007544 <_free_r+0x30>
 8007536:	6063      	str	r3, [r4, #4]
 8007538:	6014      	str	r4, [r2, #0]
 800753a:	b003      	add	sp, #12
 800753c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007540:	f7ff bfe2 	b.w	8007508 <__malloc_unlock>
 8007544:	42a3      	cmp	r3, r4
 8007546:	d908      	bls.n	800755a <_free_r+0x46>
 8007548:	6825      	ldr	r5, [r4, #0]
 800754a:	1961      	adds	r1, r4, r5
 800754c:	428b      	cmp	r3, r1
 800754e:	bf01      	itttt	eq
 8007550:	6819      	ldreq	r1, [r3, #0]
 8007552:	685b      	ldreq	r3, [r3, #4]
 8007554:	1949      	addeq	r1, r1, r5
 8007556:	6021      	streq	r1, [r4, #0]
 8007558:	e7ed      	b.n	8007536 <_free_r+0x22>
 800755a:	461a      	mov	r2, r3
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	b10b      	cbz	r3, 8007564 <_free_r+0x50>
 8007560:	42a3      	cmp	r3, r4
 8007562:	d9fa      	bls.n	800755a <_free_r+0x46>
 8007564:	6811      	ldr	r1, [r2, #0]
 8007566:	1855      	adds	r5, r2, r1
 8007568:	42a5      	cmp	r5, r4
 800756a:	d10b      	bne.n	8007584 <_free_r+0x70>
 800756c:	6824      	ldr	r4, [r4, #0]
 800756e:	4421      	add	r1, r4
 8007570:	1854      	adds	r4, r2, r1
 8007572:	42a3      	cmp	r3, r4
 8007574:	6011      	str	r1, [r2, #0]
 8007576:	d1e0      	bne.n	800753a <_free_r+0x26>
 8007578:	681c      	ldr	r4, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	6053      	str	r3, [r2, #4]
 800757e:	4421      	add	r1, r4
 8007580:	6011      	str	r1, [r2, #0]
 8007582:	e7da      	b.n	800753a <_free_r+0x26>
 8007584:	d902      	bls.n	800758c <_free_r+0x78>
 8007586:	230c      	movs	r3, #12
 8007588:	6003      	str	r3, [r0, #0]
 800758a:	e7d6      	b.n	800753a <_free_r+0x26>
 800758c:	6825      	ldr	r5, [r4, #0]
 800758e:	1961      	adds	r1, r4, r5
 8007590:	428b      	cmp	r3, r1
 8007592:	bf04      	itt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	bf04      	itt	eq
 800759c:	1949      	addeq	r1, r1, r5
 800759e:	6021      	streq	r1, [r4, #0]
 80075a0:	6054      	str	r4, [r2, #4]
 80075a2:	e7ca      	b.n	800753a <_free_r+0x26>
 80075a4:	b003      	add	sp, #12
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	20004c50 	.word	0x20004c50

080075ac <__ssputs_r>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	688e      	ldr	r6, [r1, #8]
 80075b2:	429e      	cmp	r6, r3
 80075b4:	4682      	mov	sl, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4690      	mov	r8, r2
 80075ba:	461f      	mov	r7, r3
 80075bc:	d838      	bhi.n	8007630 <__ssputs_r+0x84>
 80075be:	898a      	ldrh	r2, [r1, #12]
 80075c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075c4:	d032      	beq.n	800762c <__ssputs_r+0x80>
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	6909      	ldr	r1, [r1, #16]
 80075ca:	eba5 0901 	sub.w	r9, r5, r1
 80075ce:	6965      	ldr	r5, [r4, #20]
 80075d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d8:	3301      	adds	r3, #1
 80075da:	444b      	add	r3, r9
 80075dc:	106d      	asrs	r5, r5, #1
 80075de:	429d      	cmp	r5, r3
 80075e0:	bf38      	it	cc
 80075e2:	461d      	movcc	r5, r3
 80075e4:	0553      	lsls	r3, r2, #21
 80075e6:	d531      	bpl.n	800764c <__ssputs_r+0xa0>
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7ff fe69 	bl	80072c0 <_malloc_r>
 80075ee:	4606      	mov	r6, r0
 80075f0:	b950      	cbnz	r0, 8007608 <__ssputs_r+0x5c>
 80075f2:	230c      	movs	r3, #12
 80075f4:	f8ca 3000 	str.w	r3, [sl]
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	6921      	ldr	r1, [r4, #16]
 800760a:	464a      	mov	r2, r9
 800760c:	f7ff fe22 	bl	8007254 <memcpy>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	6126      	str	r6, [r4, #16]
 800761e:	6165      	str	r5, [r4, #20]
 8007620:	444e      	add	r6, r9
 8007622:	eba5 0509 	sub.w	r5, r5, r9
 8007626:	6026      	str	r6, [r4, #0]
 8007628:	60a5      	str	r5, [r4, #8]
 800762a:	463e      	mov	r6, r7
 800762c:	42be      	cmp	r6, r7
 800762e:	d900      	bls.n	8007632 <__ssputs_r+0x86>
 8007630:	463e      	mov	r6, r7
 8007632:	6820      	ldr	r0, [r4, #0]
 8007634:	4632      	mov	r2, r6
 8007636:	4641      	mov	r1, r8
 8007638:	f000 faa8 	bl	8007b8c <memmove>
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	1b9b      	subs	r3, r3, r6
 8007640:	60a3      	str	r3, [r4, #8]
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	4433      	add	r3, r6
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	2000      	movs	r0, #0
 800764a:	e7db      	b.n	8007604 <__ssputs_r+0x58>
 800764c:	462a      	mov	r2, r5
 800764e:	f000 fab7 	bl	8007bc0 <_realloc_r>
 8007652:	4606      	mov	r6, r0
 8007654:	2800      	cmp	r0, #0
 8007656:	d1e1      	bne.n	800761c <__ssputs_r+0x70>
 8007658:	6921      	ldr	r1, [r4, #16]
 800765a:	4650      	mov	r0, sl
 800765c:	f7ff ff5a 	bl	8007514 <_free_r>
 8007660:	e7c7      	b.n	80075f2 <__ssputs_r+0x46>
	...

08007664 <_svfiprintf_r>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	4698      	mov	r8, r3
 800766a:	898b      	ldrh	r3, [r1, #12]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	b09d      	sub	sp, #116	; 0x74
 8007670:	4607      	mov	r7, r0
 8007672:	460d      	mov	r5, r1
 8007674:	4614      	mov	r4, r2
 8007676:	d50e      	bpl.n	8007696 <_svfiprintf_r+0x32>
 8007678:	690b      	ldr	r3, [r1, #16]
 800767a:	b963      	cbnz	r3, 8007696 <_svfiprintf_r+0x32>
 800767c:	2140      	movs	r1, #64	; 0x40
 800767e:	f7ff fe1f 	bl	80072c0 <_malloc_r>
 8007682:	6028      	str	r0, [r5, #0]
 8007684:	6128      	str	r0, [r5, #16]
 8007686:	b920      	cbnz	r0, 8007692 <_svfiprintf_r+0x2e>
 8007688:	230c      	movs	r3, #12
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007690:	e0d1      	b.n	8007836 <_svfiprintf_r+0x1d2>
 8007692:	2340      	movs	r3, #64	; 0x40
 8007694:	616b      	str	r3, [r5, #20]
 8007696:	2300      	movs	r3, #0
 8007698:	9309      	str	r3, [sp, #36]	; 0x24
 800769a:	2320      	movs	r3, #32
 800769c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a4:	2330      	movs	r3, #48	; 0x30
 80076a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007850 <_svfiprintf_r+0x1ec>
 80076aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ae:	f04f 0901 	mov.w	r9, #1
 80076b2:	4623      	mov	r3, r4
 80076b4:	469a      	mov	sl, r3
 80076b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ba:	b10a      	cbz	r2, 80076c0 <_svfiprintf_r+0x5c>
 80076bc:	2a25      	cmp	r2, #37	; 0x25
 80076be:	d1f9      	bne.n	80076b4 <_svfiprintf_r+0x50>
 80076c0:	ebba 0b04 	subs.w	fp, sl, r4
 80076c4:	d00b      	beq.n	80076de <_svfiprintf_r+0x7a>
 80076c6:	465b      	mov	r3, fp
 80076c8:	4622      	mov	r2, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff ff6d 	bl	80075ac <__ssputs_r>
 80076d2:	3001      	adds	r0, #1
 80076d4:	f000 80aa 	beq.w	800782c <_svfiprintf_r+0x1c8>
 80076d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076da:	445a      	add	r2, fp
 80076dc:	9209      	str	r2, [sp, #36]	; 0x24
 80076de:	f89a 3000 	ldrb.w	r3, [sl]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80a2 	beq.w	800782c <_svfiprintf_r+0x1c8>
 80076e8:	2300      	movs	r3, #0
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f2:	f10a 0a01 	add.w	sl, sl, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	9307      	str	r3, [sp, #28]
 80076fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007700:	4654      	mov	r4, sl
 8007702:	2205      	movs	r2, #5
 8007704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007708:	4851      	ldr	r0, [pc, #324]	; (8007850 <_svfiprintf_r+0x1ec>)
 800770a:	f7f8 fd69 	bl	80001e0 <memchr>
 800770e:	9a04      	ldr	r2, [sp, #16]
 8007710:	b9d8      	cbnz	r0, 800774a <_svfiprintf_r+0xe6>
 8007712:	06d0      	lsls	r0, r2, #27
 8007714:	bf44      	itt	mi
 8007716:	2320      	movmi	r3, #32
 8007718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800771c:	0711      	lsls	r1, r2, #28
 800771e:	bf44      	itt	mi
 8007720:	232b      	movmi	r3, #43	; 0x2b
 8007722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007726:	f89a 3000 	ldrb.w	r3, [sl]
 800772a:	2b2a      	cmp	r3, #42	; 0x2a
 800772c:	d015      	beq.n	800775a <_svfiprintf_r+0xf6>
 800772e:	9a07      	ldr	r2, [sp, #28]
 8007730:	4654      	mov	r4, sl
 8007732:	2000      	movs	r0, #0
 8007734:	f04f 0c0a 	mov.w	ip, #10
 8007738:	4621      	mov	r1, r4
 800773a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773e:	3b30      	subs	r3, #48	; 0x30
 8007740:	2b09      	cmp	r3, #9
 8007742:	d94e      	bls.n	80077e2 <_svfiprintf_r+0x17e>
 8007744:	b1b0      	cbz	r0, 8007774 <_svfiprintf_r+0x110>
 8007746:	9207      	str	r2, [sp, #28]
 8007748:	e014      	b.n	8007774 <_svfiprintf_r+0x110>
 800774a:	eba0 0308 	sub.w	r3, r0, r8
 800774e:	fa09 f303 	lsl.w	r3, r9, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	9304      	str	r3, [sp, #16]
 8007756:	46a2      	mov	sl, r4
 8007758:	e7d2      	b.n	8007700 <_svfiprintf_r+0x9c>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	1d19      	adds	r1, r3, #4
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	9103      	str	r1, [sp, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	bfbb      	ittet	lt
 8007766:	425b      	neglt	r3, r3
 8007768:	f042 0202 	orrlt.w	r2, r2, #2
 800776c:	9307      	strge	r3, [sp, #28]
 800776e:	9307      	strlt	r3, [sp, #28]
 8007770:	bfb8      	it	lt
 8007772:	9204      	strlt	r2, [sp, #16]
 8007774:	7823      	ldrb	r3, [r4, #0]
 8007776:	2b2e      	cmp	r3, #46	; 0x2e
 8007778:	d10c      	bne.n	8007794 <_svfiprintf_r+0x130>
 800777a:	7863      	ldrb	r3, [r4, #1]
 800777c:	2b2a      	cmp	r3, #42	; 0x2a
 800777e:	d135      	bne.n	80077ec <_svfiprintf_r+0x188>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	9203      	str	r2, [sp, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfb8      	it	lt
 800778c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007790:	3402      	adds	r4, #2
 8007792:	9305      	str	r3, [sp, #20]
 8007794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007860 <_svfiprintf_r+0x1fc>
 8007798:	7821      	ldrb	r1, [r4, #0]
 800779a:	2203      	movs	r2, #3
 800779c:	4650      	mov	r0, sl
 800779e:	f7f8 fd1f 	bl	80001e0 <memchr>
 80077a2:	b140      	cbz	r0, 80077b6 <_svfiprintf_r+0x152>
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	eba0 000a 	sub.w	r0, r0, sl
 80077aa:	fa03 f000 	lsl.w	r0, r3, r0
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	4303      	orrs	r3, r0
 80077b2:	3401      	adds	r4, #1
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ba:	4826      	ldr	r0, [pc, #152]	; (8007854 <_svfiprintf_r+0x1f0>)
 80077bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c0:	2206      	movs	r2, #6
 80077c2:	f7f8 fd0d 	bl	80001e0 <memchr>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d038      	beq.n	800783c <_svfiprintf_r+0x1d8>
 80077ca:	4b23      	ldr	r3, [pc, #140]	; (8007858 <_svfiprintf_r+0x1f4>)
 80077cc:	bb1b      	cbnz	r3, 8007816 <_svfiprintf_r+0x1b2>
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	3307      	adds	r3, #7
 80077d2:	f023 0307 	bic.w	r3, r3, #7
 80077d6:	3308      	adds	r3, #8
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077dc:	4433      	add	r3, r6
 80077de:	9309      	str	r3, [sp, #36]	; 0x24
 80077e0:	e767      	b.n	80076b2 <_svfiprintf_r+0x4e>
 80077e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e6:	460c      	mov	r4, r1
 80077e8:	2001      	movs	r0, #1
 80077ea:	e7a5      	b.n	8007738 <_svfiprintf_r+0xd4>
 80077ec:	2300      	movs	r3, #0
 80077ee:	3401      	adds	r4, #1
 80077f0:	9305      	str	r3, [sp, #20]
 80077f2:	4619      	mov	r1, r3
 80077f4:	f04f 0c0a 	mov.w	ip, #10
 80077f8:	4620      	mov	r0, r4
 80077fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fe:	3a30      	subs	r2, #48	; 0x30
 8007800:	2a09      	cmp	r2, #9
 8007802:	d903      	bls.n	800780c <_svfiprintf_r+0x1a8>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0c5      	beq.n	8007794 <_svfiprintf_r+0x130>
 8007808:	9105      	str	r1, [sp, #20]
 800780a:	e7c3      	b.n	8007794 <_svfiprintf_r+0x130>
 800780c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007810:	4604      	mov	r4, r0
 8007812:	2301      	movs	r3, #1
 8007814:	e7f0      	b.n	80077f8 <_svfiprintf_r+0x194>
 8007816:	ab03      	add	r3, sp, #12
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	462a      	mov	r2, r5
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <_svfiprintf_r+0x1f8>)
 800781e:	a904      	add	r1, sp, #16
 8007820:	4638      	mov	r0, r7
 8007822:	f3af 8000 	nop.w
 8007826:	1c42      	adds	r2, r0, #1
 8007828:	4606      	mov	r6, r0
 800782a:	d1d6      	bne.n	80077da <_svfiprintf_r+0x176>
 800782c:	89ab      	ldrh	r3, [r5, #12]
 800782e:	065b      	lsls	r3, r3, #25
 8007830:	f53f af2c 	bmi.w	800768c <_svfiprintf_r+0x28>
 8007834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007836:	b01d      	add	sp, #116	; 0x74
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	ab03      	add	r3, sp, #12
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462a      	mov	r2, r5
 8007842:	4b06      	ldr	r3, [pc, #24]	; (800785c <_svfiprintf_r+0x1f8>)
 8007844:	a904      	add	r1, sp, #16
 8007846:	4638      	mov	r0, r7
 8007848:	f000 f87a 	bl	8007940 <_printf_i>
 800784c:	e7eb      	b.n	8007826 <_svfiprintf_r+0x1c2>
 800784e:	bf00      	nop
 8007850:	08007e64 	.word	0x08007e64
 8007854:	08007e6e 	.word	0x08007e6e
 8007858:	00000000 	.word	0x00000000
 800785c:	080075ad 	.word	0x080075ad
 8007860:	08007e6a 	.word	0x08007e6a

08007864 <_printf_common>:
 8007864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	4616      	mov	r6, r2
 800786a:	4699      	mov	r9, r3
 800786c:	688a      	ldr	r2, [r1, #8]
 800786e:	690b      	ldr	r3, [r1, #16]
 8007870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007874:	4293      	cmp	r3, r2
 8007876:	bfb8      	it	lt
 8007878:	4613      	movlt	r3, r2
 800787a:	6033      	str	r3, [r6, #0]
 800787c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007880:	4607      	mov	r7, r0
 8007882:	460c      	mov	r4, r1
 8007884:	b10a      	cbz	r2, 800788a <_printf_common+0x26>
 8007886:	3301      	adds	r3, #1
 8007888:	6033      	str	r3, [r6, #0]
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	0699      	lsls	r1, r3, #26
 800788e:	bf42      	ittt	mi
 8007890:	6833      	ldrmi	r3, [r6, #0]
 8007892:	3302      	addmi	r3, #2
 8007894:	6033      	strmi	r3, [r6, #0]
 8007896:	6825      	ldr	r5, [r4, #0]
 8007898:	f015 0506 	ands.w	r5, r5, #6
 800789c:	d106      	bne.n	80078ac <_printf_common+0x48>
 800789e:	f104 0a19 	add.w	sl, r4, #25
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	6832      	ldr	r2, [r6, #0]
 80078a6:	1a9b      	subs	r3, r3, r2
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dc26      	bgt.n	80078fa <_printf_common+0x96>
 80078ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078b0:	1e13      	subs	r3, r2, #0
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	bf18      	it	ne
 80078b6:	2301      	movne	r3, #1
 80078b8:	0692      	lsls	r2, r2, #26
 80078ba:	d42b      	bmi.n	8007914 <_printf_common+0xb0>
 80078bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078c0:	4649      	mov	r1, r9
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c0      	blx	r8
 80078c6:	3001      	adds	r0, #1
 80078c8:	d01e      	beq.n	8007908 <_printf_common+0xa4>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	68e5      	ldr	r5, [r4, #12]
 80078ce:	6832      	ldr	r2, [r6, #0]
 80078d0:	f003 0306 	and.w	r3, r3, #6
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	bf08      	it	eq
 80078d8:	1aad      	subeq	r5, r5, r2
 80078da:	68a3      	ldr	r3, [r4, #8]
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	bf0c      	ite	eq
 80078e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e4:	2500      	movne	r5, #0
 80078e6:	4293      	cmp	r3, r2
 80078e8:	bfc4      	itt	gt
 80078ea:	1a9b      	subgt	r3, r3, r2
 80078ec:	18ed      	addgt	r5, r5, r3
 80078ee:	2600      	movs	r6, #0
 80078f0:	341a      	adds	r4, #26
 80078f2:	42b5      	cmp	r5, r6
 80078f4:	d11a      	bne.n	800792c <_printf_common+0xc8>
 80078f6:	2000      	movs	r0, #0
 80078f8:	e008      	b.n	800790c <_printf_common+0xa8>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4652      	mov	r2, sl
 80078fe:	4649      	mov	r1, r9
 8007900:	4638      	mov	r0, r7
 8007902:	47c0      	blx	r8
 8007904:	3001      	adds	r0, #1
 8007906:	d103      	bne.n	8007910 <_printf_common+0xac>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	3501      	adds	r5, #1
 8007912:	e7c6      	b.n	80078a2 <_printf_common+0x3e>
 8007914:	18e1      	adds	r1, r4, r3
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	2030      	movs	r0, #48	; 0x30
 800791a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791e:	4422      	add	r2, r4
 8007920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007928:	3302      	adds	r3, #2
 800792a:	e7c7      	b.n	80078bc <_printf_common+0x58>
 800792c:	2301      	movs	r3, #1
 800792e:	4622      	mov	r2, r4
 8007930:	4649      	mov	r1, r9
 8007932:	4638      	mov	r0, r7
 8007934:	47c0      	blx	r8
 8007936:	3001      	adds	r0, #1
 8007938:	d0e6      	beq.n	8007908 <_printf_common+0xa4>
 800793a:	3601      	adds	r6, #1
 800793c:	e7d9      	b.n	80078f2 <_printf_common+0x8e>
	...

08007940 <_printf_i>:
 8007940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	7e0f      	ldrb	r7, [r1, #24]
 8007946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007948:	2f78      	cmp	r7, #120	; 0x78
 800794a:	4691      	mov	r9, r2
 800794c:	4680      	mov	r8, r0
 800794e:	460c      	mov	r4, r1
 8007950:	469a      	mov	sl, r3
 8007952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007956:	d807      	bhi.n	8007968 <_printf_i+0x28>
 8007958:	2f62      	cmp	r7, #98	; 0x62
 800795a:	d80a      	bhi.n	8007972 <_printf_i+0x32>
 800795c:	2f00      	cmp	r7, #0
 800795e:	f000 80d8 	beq.w	8007b12 <_printf_i+0x1d2>
 8007962:	2f58      	cmp	r7, #88	; 0x58
 8007964:	f000 80a3 	beq.w	8007aae <_printf_i+0x16e>
 8007968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800796c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007970:	e03a      	b.n	80079e8 <_printf_i+0xa8>
 8007972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007976:	2b15      	cmp	r3, #21
 8007978:	d8f6      	bhi.n	8007968 <_printf_i+0x28>
 800797a:	a101      	add	r1, pc, #4	; (adr r1, 8007980 <_printf_i+0x40>)
 800797c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007980:	080079d9 	.word	0x080079d9
 8007984:	080079ed 	.word	0x080079ed
 8007988:	08007969 	.word	0x08007969
 800798c:	08007969 	.word	0x08007969
 8007990:	08007969 	.word	0x08007969
 8007994:	08007969 	.word	0x08007969
 8007998:	080079ed 	.word	0x080079ed
 800799c:	08007969 	.word	0x08007969
 80079a0:	08007969 	.word	0x08007969
 80079a4:	08007969 	.word	0x08007969
 80079a8:	08007969 	.word	0x08007969
 80079ac:	08007af9 	.word	0x08007af9
 80079b0:	08007a1d 	.word	0x08007a1d
 80079b4:	08007adb 	.word	0x08007adb
 80079b8:	08007969 	.word	0x08007969
 80079bc:	08007969 	.word	0x08007969
 80079c0:	08007b1b 	.word	0x08007b1b
 80079c4:	08007969 	.word	0x08007969
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007969 	.word	0x08007969
 80079d0:	08007969 	.word	0x08007969
 80079d4:	08007ae3 	.word	0x08007ae3
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	602a      	str	r2, [r5, #0]
 80079e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0a3      	b.n	8007b34 <_printf_i+0x1f4>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	6829      	ldr	r1, [r5, #0]
 80079f0:	0606      	lsls	r6, r0, #24
 80079f2:	f101 0304 	add.w	r3, r1, #4
 80079f6:	d50a      	bpl.n	8007a0e <_printf_i+0xce>
 80079f8:	680e      	ldr	r6, [r1, #0]
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	2e00      	cmp	r6, #0
 80079fe:	da03      	bge.n	8007a08 <_printf_i+0xc8>
 8007a00:	232d      	movs	r3, #45	; 0x2d
 8007a02:	4276      	negs	r6, r6
 8007a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a08:	485e      	ldr	r0, [pc, #376]	; (8007b84 <_printf_i+0x244>)
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e019      	b.n	8007a42 <_printf_i+0x102>
 8007a0e:	680e      	ldr	r6, [r1, #0]
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a16:	bf18      	it	ne
 8007a18:	b236      	sxthne	r6, r6
 8007a1a:	e7ef      	b.n	80079fc <_printf_i+0xbc>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	6029      	str	r1, [r5, #0]
 8007a24:	0601      	lsls	r1, r0, #24
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0xec>
 8007a28:	681e      	ldr	r6, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <_printf_i+0xf2>
 8007a2c:	0646      	lsls	r6, r0, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0xe8>
 8007a30:	881e      	ldrh	r6, [r3, #0]
 8007a32:	4854      	ldr	r0, [pc, #336]	; (8007b84 <_printf_i+0x244>)
 8007a34:	2f6f      	cmp	r7, #111	; 0x6f
 8007a36:	bf0c      	ite	eq
 8007a38:	2308      	moveq	r3, #8
 8007a3a:	230a      	movne	r3, #10
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a42:	6865      	ldr	r5, [r4, #4]
 8007a44:	60a5      	str	r5, [r4, #8]
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	bfa2      	ittt	ge
 8007a4a:	6821      	ldrge	r1, [r4, #0]
 8007a4c:	f021 0104 	bicge.w	r1, r1, #4
 8007a50:	6021      	strge	r1, [r4, #0]
 8007a52:	b90e      	cbnz	r6, 8007a58 <_printf_i+0x118>
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	d04d      	beq.n	8007af4 <_printf_i+0x1b4>
 8007a58:	4615      	mov	r5, r2
 8007a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a62:	5dc7      	ldrb	r7, [r0, r7]
 8007a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a68:	4637      	mov	r7, r6
 8007a6a:	42bb      	cmp	r3, r7
 8007a6c:	460e      	mov	r6, r1
 8007a6e:	d9f4      	bls.n	8007a5a <_printf_i+0x11a>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d10b      	bne.n	8007a8c <_printf_i+0x14c>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	07de      	lsls	r6, r3, #31
 8007a78:	d508      	bpl.n	8007a8c <_printf_i+0x14c>
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4299      	cmp	r1, r3
 8007a80:	bfde      	ittt	le
 8007a82:	2330      	movle	r3, #48	; 0x30
 8007a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a8c:	1b52      	subs	r2, r2, r5
 8007a8e:	6122      	str	r2, [r4, #16]
 8007a90:	f8cd a000 	str.w	sl, [sp]
 8007a94:	464b      	mov	r3, r9
 8007a96:	aa03      	add	r2, sp, #12
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7ff fee2 	bl	8007864 <_printf_common>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d14c      	bne.n	8007b3e <_printf_i+0x1fe>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa8:	b004      	add	sp, #16
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	4835      	ldr	r0, [pc, #212]	; (8007b84 <_printf_i+0x244>)
 8007ab0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab4:	6829      	ldr	r1, [r5, #0]
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007abc:	6029      	str	r1, [r5, #0]
 8007abe:	061d      	lsls	r5, r3, #24
 8007ac0:	d514      	bpl.n	8007aec <_printf_i+0x1ac>
 8007ac2:	07df      	lsls	r7, r3, #31
 8007ac4:	bf44      	itt	mi
 8007ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8007aca:	6023      	strmi	r3, [r4, #0]
 8007acc:	b91e      	cbnz	r6, 8007ad6 <_printf_i+0x196>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	f023 0320 	bic.w	r3, r3, #32
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	e7b0      	b.n	8007a3c <_printf_i+0xfc>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	2378      	movs	r3, #120	; 0x78
 8007ae4:	4828      	ldr	r0, [pc, #160]	; (8007b88 <_printf_i+0x248>)
 8007ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aea:	e7e3      	b.n	8007ab4 <_printf_i+0x174>
 8007aec:	0659      	lsls	r1, r3, #25
 8007aee:	bf48      	it	mi
 8007af0:	b2b6      	uxthmi	r6, r6
 8007af2:	e7e6      	b.n	8007ac2 <_printf_i+0x182>
 8007af4:	4615      	mov	r5, r2
 8007af6:	e7bb      	b.n	8007a70 <_printf_i+0x130>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	6826      	ldr	r6, [r4, #0]
 8007afc:	6961      	ldr	r1, [r4, #20]
 8007afe:	1d18      	adds	r0, r3, #4
 8007b00:	6028      	str	r0, [r5, #0]
 8007b02:	0635      	lsls	r5, r6, #24
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0x1cc>
 8007b08:	6019      	str	r1, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0x1d2>
 8007b0c:	0670      	lsls	r0, r6, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0x1c8>
 8007b10:	8019      	strh	r1, [r3, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	4615      	mov	r5, r2
 8007b18:	e7ba      	b.n	8007a90 <_printf_i+0x150>
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	602a      	str	r2, [r5, #0]
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	2100      	movs	r1, #0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7f8 fb5a 	bl	80001e0 <memchr>
 8007b2c:	b108      	cbz	r0, 8007b32 <_printf_i+0x1f2>
 8007b2e:	1b40      	subs	r0, r0, r5
 8007b30:	6060      	str	r0, [r4, #4]
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	2300      	movs	r3, #0
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	e7a8      	b.n	8007a90 <_printf_i+0x150>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4649      	mov	r1, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	47d0      	blx	sl
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d0ab      	beq.n	8007aa4 <_printf_i+0x164>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	079b      	lsls	r3, r3, #30
 8007b50:	d413      	bmi.n	8007b7a <_printf_i+0x23a>
 8007b52:	68e0      	ldr	r0, [r4, #12]
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	4298      	cmp	r0, r3
 8007b58:	bfb8      	it	lt
 8007b5a:	4618      	movlt	r0, r3
 8007b5c:	e7a4      	b.n	8007aa8 <_printf_i+0x168>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4632      	mov	r2, r6
 8007b62:	4649      	mov	r1, r9
 8007b64:	4640      	mov	r0, r8
 8007b66:	47d0      	blx	sl
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d09b      	beq.n	8007aa4 <_printf_i+0x164>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	9903      	ldr	r1, [sp, #12]
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dcf2      	bgt.n	8007b5e <_printf_i+0x21e>
 8007b78:	e7eb      	b.n	8007b52 <_printf_i+0x212>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	f104 0619 	add.w	r6, r4, #25
 8007b80:	e7f5      	b.n	8007b6e <_printf_i+0x22e>
 8007b82:	bf00      	nop
 8007b84:	08007e75 	.word	0x08007e75
 8007b88:	08007e86 	.word	0x08007e86

08007b8c <memmove>:
 8007b8c:	4288      	cmp	r0, r1
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	eb01 0402 	add.w	r4, r1, r2
 8007b94:	d902      	bls.n	8007b9c <memmove+0x10>
 8007b96:	4284      	cmp	r4, r0
 8007b98:	4623      	mov	r3, r4
 8007b9a:	d807      	bhi.n	8007bac <memmove+0x20>
 8007b9c:	1e43      	subs	r3, r0, #1
 8007b9e:	42a1      	cmp	r1, r4
 8007ba0:	d008      	beq.n	8007bb4 <memmove+0x28>
 8007ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007baa:	e7f8      	b.n	8007b9e <memmove+0x12>
 8007bac:	4402      	add	r2, r0
 8007bae:	4601      	mov	r1, r0
 8007bb0:	428a      	cmp	r2, r1
 8007bb2:	d100      	bne.n	8007bb6 <memmove+0x2a>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bbe:	e7f7      	b.n	8007bb0 <memmove+0x24>

08007bc0 <_realloc_r>:
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4614      	mov	r4, r2
 8007bc8:	460e      	mov	r6, r1
 8007bca:	b921      	cbnz	r1, 8007bd6 <_realloc_r+0x16>
 8007bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	f7ff bb75 	b.w	80072c0 <_malloc_r>
 8007bd6:	b92a      	cbnz	r2, 8007be4 <_realloc_r+0x24>
 8007bd8:	f7ff fc9c 	bl	8007514 <_free_r>
 8007bdc:	4625      	mov	r5, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	f000 f81b 	bl	8007c1e <_malloc_usable_size_r>
 8007be8:	4284      	cmp	r4, r0
 8007bea:	4607      	mov	r7, r0
 8007bec:	d802      	bhi.n	8007bf4 <_realloc_r+0x34>
 8007bee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bf2:	d812      	bhi.n	8007c1a <_realloc_r+0x5a>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	f7ff fb62 	bl	80072c0 <_malloc_r>
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0ed      	beq.n	8007bde <_realloc_r+0x1e>
 8007c02:	42bc      	cmp	r4, r7
 8007c04:	4622      	mov	r2, r4
 8007c06:	4631      	mov	r1, r6
 8007c08:	bf28      	it	cs
 8007c0a:	463a      	movcs	r2, r7
 8007c0c:	f7ff fb22 	bl	8007254 <memcpy>
 8007c10:	4631      	mov	r1, r6
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff fc7e 	bl	8007514 <_free_r>
 8007c18:	e7e1      	b.n	8007bde <_realloc_r+0x1e>
 8007c1a:	4635      	mov	r5, r6
 8007c1c:	e7df      	b.n	8007bde <_realloc_r+0x1e>

08007c1e <_malloc_usable_size_r>:
 8007c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c22:	1f18      	subs	r0, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bfbc      	itt	lt
 8007c28:	580b      	ldrlt	r3, [r1, r0]
 8007c2a:	18c0      	addlt	r0, r0, r3
 8007c2c:	4770      	bx	lr
	...

08007c30 <_init>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr

08007c3c <_fini>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	bf00      	nop
 8007c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c42:	bc08      	pop	{r3}
 8007c44:	469e      	mov	lr, r3
 8007c46:	4770      	bx	lr
