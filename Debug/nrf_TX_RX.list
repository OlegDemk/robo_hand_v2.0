
nrf_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800819c  0800819c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080081a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  20000078  0800821c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c84  0800821c  00024c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4d5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003afc  00000000  00000000  0003e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040aa  00000000  00000000  00044fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0f8  00000000  00000000  00049062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a505b  00000000  00000000  0006315a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001081b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  00108208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ff8 	.word	0x08007ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007ff8 	.word	0x08007ff8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_Get_Value>:

	return adc_value;
}
// -------------------------------------------------------------------------------------
int ADC_Get_Value(uint8_t chanel)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
	uint32_t adc_value = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
	bool error_ststus = false;
 8000500:	2300      	movs	r3, #0
 8000502:	77fb      	strb	r3, [r7, #31]

	switch (chanel)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b09      	cmp	r3, #9
 8000508:	d82b      	bhi.n	8000562 <ADC_Get_Value+0x7e>
 800050a:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <ADC_Get_Value+0x2c>)
 800050c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000510:	08000539 	.word	0x08000539
 8000514:	0800053f 	.word	0x0800053f
 8000518:	08000563 	.word	0x08000563
 800051c:	08000563 	.word	0x08000563
 8000520:	08000563 	.word	0x08000563
 8000524:	08000545 	.word	0x08000545
 8000528:	0800054b 	.word	0x0800054b
 800052c:	08000551 	.word	0x08000551
 8000530:	08000557 	.word	0x08000557
 8000534:	0800055d 	.word	0x0800055d
	{
		case 0:
			sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
			break;
 800053c:	e014      	b.n	8000568 <ADC_Get_Value+0x84>
		case 1:
			sConfig.Channel = ADC_CHANNEL_1;
 800053e:	2301      	movs	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
			break;
 8000542:	e011      	b.n	8000568 <ADC_Get_Value+0x84>

		case 5:
			sConfig.Channel = ADC_CHANNEL_5;
 8000544:	2305      	movs	r3, #5
 8000546:	60bb      	str	r3, [r7, #8]
			break;
 8000548:	e00e      	b.n	8000568 <ADC_Get_Value+0x84>

		case 6:
			sConfig.Channel = ADC_CHANNEL_6;
 800054a:	2306      	movs	r3, #6
 800054c:	60bb      	str	r3, [r7, #8]
			break;
 800054e:	e00b      	b.n	8000568 <ADC_Get_Value+0x84>

		case 7:
			sConfig.Channel = ADC_CHANNEL_7;
 8000550:	2307      	movs	r3, #7
 8000552:	60bb      	str	r3, [r7, #8]
			break;
 8000554:	e008      	b.n	8000568 <ADC_Get_Value+0x84>

		case 8:
			sConfig.Channel = ADC_CHANNEL_8;
 8000556:	2308      	movs	r3, #8
 8000558:	60bb      	str	r3, [r7, #8]
			break;
 800055a:	e005      	b.n	8000568 <ADC_Get_Value+0x84>

		case 9:
			sConfig.Channel = ADC_CHANNEL_9;
 800055c:	2309      	movs	r3, #9
 800055e:	60bb      	str	r3, [r7, #8]
			break;
 8000560:	e002      	b.n	8000568 <ADC_Get_Value+0x84>

		default:
			error_ststus = true;
 8000562:	2301      	movs	r3, #1
 8000564:	77fb      	strb	r3, [r7, #31]
			break;
 8000566:	bf00      	nop
	}

	if(error_ststus != true)
 8000568:	7ffb      	ldrb	r3, [r7, #31]
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d01e      	beq.n	80005b2 <ADC_Get_Value+0xce>
	{
		sConfig.Rank = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <ADC_Get_Value+0xdc>)
 8000584:	f001 fd4a 	bl	800201c <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <ADC_Get_Value+0xae>
		{
			Error_Handler();
 800058e:	f000 fcc5 	bl	8000f1c <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ADC_Get_Value+0xdc>)
 8000594:	f001 fa94 	bl	8001ac0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000598:	2164      	movs	r1, #100	; 0x64
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <ADC_Get_Value+0xdc>)
 800059c:	f001 fb77 	bl	8001c8e <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <ADC_Get_Value+0xdc>)
 80005a2:	f001 fd0f 	bl	8001fc4 <HAL_ADC_GetValue>
 80005a6:	61b8      	str	r0, [r7, #24]
		HAL_ADC_Stop(&hadc1);
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <ADC_Get_Value+0xdc>)
 80005aa:	f001 fb3d 	bl	8001c28 <HAL_ADC_Stop>

		return adc_value;
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	e001      	b.n	80005b6 <ADC_Get_Value+0xd2>
	}
	else		// Init ERROR
	{
		return -1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000094 	.word	0x20000094

080005c4 <Set_Servo_Angle>:
		osDelay(50);
	}
}
// -------------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t ServoNum, uint8_t angle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	uint32_t DutyCycle = (200*angle)/180;		// convert angle into DutyCycle
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <Set_Servo_Angle+0x40>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	441a      	add	r2, r3
 80005e4:	11d2      	asrs	r2, r2, #7
 80005e6:	17db      	asrs	r3, r3, #31
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	60fb      	str	r3, [r7, #12]

	DutyCycle = DutyCycle + 45;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	332d      	adds	r3, #45	; 0x2d
 80005f0:	60fb      	str	r3, [r7, #12]

	PWM_Tim_Init(ServoNum, DutyCycle);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	68f9      	ldr	r1, [r7, #12]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f806 	bl	8000608 <PWM_Tim_Init>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	b60b60b7 	.word	0xb60b60b7

08000608 <PWM_Tim_Init>:
// -------------------------------------------------------------------------------------
void PWM_Tim_Init(uint8_t ServoNum, uint32_t DutyCycle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef *htim;
	uint32_t chanel = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28

	if((ServoNum >= 1) && (ServoNum <= 2))			// Servo motor 1 and 2 connect to Ttmer2
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00e      	beq.n	800063c <PWM_Tim_Init+0x34>
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d80b      	bhi.n	800063c <PWM_Tim_Init+0x34>
	{
		htim = &htim2;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <PWM_Tim_Init+0xcc>)
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(ServoNum == 1)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d101      	bne.n	8000632 <PWM_Tim_Init+0x2a>
		{
			chanel = TIM_CHANNEL_1;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 2)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d101      	bne.n	800063c <PWM_Tim_Init+0x34>
		{
			chanel = TIM_CHANNEL_2;
 8000638:	2304      	movs	r3, #4
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	}
	if((ServoNum >= 3) && (ServoNum <= 5))			// Servo motor 3, 4 and 5 connect to Ttmer4
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d913      	bls.n	800066a <PWM_Tim_Init+0x62>
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b05      	cmp	r3, #5
 8000646:	d810      	bhi.n	800066a <PWM_Tim_Init+0x62>
	{
		htim = &htim4;
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <PWM_Tim_Init+0xd0>)
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(ServoNum == 3)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d101      	bne.n	8000656 <PWM_Tim_Init+0x4e>
		{
			chanel = TIM_CHANNEL_1;
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 4)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d101      	bne.n	8000660 <PWM_Tim_Init+0x58>
		{
			chanel = TIM_CHANNEL_2;
 800065c:	2304      	movs	r3, #4
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 5)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b05      	cmp	r3, #5
 8000664:	d101      	bne.n	800066a <PWM_Tim_Init+0x62>
		{
			chanel = TIM_CHANNEL_3;
 8000666:	2308      	movs	r3, #8
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	}


	TIM_OC_InitTypeDef sConfigOC = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067e:	2360      	movs	r3, #96	; 0x60
 8000680:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = DutyCycle-1;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3b01      	subs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

	if(HAL_TIM_PWM_Stop(htim, chanel) != HAL_OK)
 8000690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000694:	f003 fc38 	bl	8003f08 <HAL_TIM_PWM_Stop>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <PWM_Tim_Init+0x9a>
	{
		Error_Handler();
 800069e:	f000 fc3d 	bl	8000f1c <Error_Handler>
	}

	if(HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, chanel) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006a8:	4619      	mov	r1, r3
 80006aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ac:	f003 fd98 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <PWM_Tim_Init+0xb2>
	{
		Error_Handler();
 80006b6:	f000 fc31 	bl	8000f1c <Error_Handler>
	}

	if(HAL_TIM_PWM_Start(htim, chanel) != HAL_OK)
 80006ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006be:	f003 fb73 	bl	8003da8 <HAL_TIM_PWM_Start>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <PWM_Tim_Init+0xc4>
	{
		Error_Handler();
 80006c8:	f000 fc28 	bl	8000f1c <Error_Handler>
	}
}
 80006cc:	bf00      	nop
 80006ce:	3730      	adds	r7, #48	; 0x30
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000134 	.word	0x20000134
 80006d8:	2000017c 	.word	0x2000017c

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f001 f944 	bl	800196c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f864 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 faaa 	bl	8000c40 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006ec:	f000 f970 	bl	80009d0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fa7c 	bl	8000bec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006f4:	f000 f8c6 	bl	8000884 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006f8:	f000 f9a0 	bl	8000a3c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006fc:	f000 fa06 	bl	8000b0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f001 f974 	bl	80019f0 <HAL_Delay>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000708:	f004 fc0e 	bl	8004f28 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 800070c:	4a19      	ldr	r2, [pc, #100]	; (8000774 <main+0x98>)
 800070e:	2101      	movs	r1, #1
 8000710:	2001      	movs	r0, #1
 8000712:	f004 fd00 	bl	8005116 <osSemaphoreNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <main+0x9c>)
 800071a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RQueue */
  RQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &RQueue_attributes);
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <main+0xa0>)
 800071e:	2102      	movs	r1, #2
 8000720:	2005      	movs	r0, #5
 8000722:	f004 fd81 	bl	8005228 <osMessageQueueNew>
 8000726:	4603      	mov	r3, r0
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <main+0xa4>)
 800072a:	6013      	str	r3, [r2, #0]

  /* creation of DATAQueue */
  DATAQueueHandle = osMessageQueueNew (1, sizeof(DATA), &DATAQueue_attributes);
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <main+0xa8>)
 800072e:	2110      	movs	r1, #16
 8000730:	2001      	movs	r0, #1
 8000732:	f004 fd79 	bl	8005228 <osMessageQueueNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <main+0xac>)
 800073a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <main+0xb0>)
 800073e:	2100      	movs	r1, #0
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <main+0xb4>)
 8000742:	f004 fc3b 	bl	8004fbc <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <main+0xb8>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of nrf_task */
  nrf_taskHandle = osThreadNew(Start_nrf_task, NULL, &nrf_task_attributes);
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <main+0xbc>)
 800074e:	2100      	movs	r1, #0
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0xc0>)
 8000752:	f004 fc33 	bl	8004fbc <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <main+0xc4>)
 800075a:	6013      	str	r3, [r2, #0]

  /* creation of AdcTask */
  AdcTaskHandle = osThreadNew(StartAdcTask, NULL, &AdcTask_attributes);
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0xc8>)
 800075e:	2100      	movs	r1, #0
 8000760:	4811      	ldr	r0, [pc, #68]	; (80007a8 <main+0xcc>)
 8000762:	f004 fc2b 	bl	8004fbc <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <main+0xd0>)
 800076a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800076c:	f004 fc00 	bl	8004f70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x94>
 8000772:	bf00      	nop
 8000774:	0800810c 	.word	0x0800810c
 8000778:	2000021c 	.word	0x2000021c
 800077c:	080080dc 	.word	0x080080dc
 8000780:	20000214 	.word	0x20000214
 8000784:	080080f4 	.word	0x080080f4
 8000788:	20000218 	.word	0x20000218
 800078c:	08008070 	.word	0x08008070
 8000790:	08000d75 	.word	0x08000d75
 8000794:	20000208 	.word	0x20000208
 8000798:	08008094 	.word	0x08008094
 800079c:	08000e2d 	.word	0x08000e2d
 80007a0:	2000020c 	.word	0x2000020c
 80007a4:	080080b8 	.word	0x080080b8
 80007a8:	08000e49 	.word	0x08000e49
 80007ac:	20000210 	.word	0x20000210

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f007 fb50 	bl	8007e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <SystemClock_Config+0xd0>)
 80007fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000824:	2319      	movs	r3, #25
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f002 f8ed 	bl	8002a18 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 fb6a 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2102      	movs	r1, #2
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fb4f 	bl	8002f08 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000870:	f000 fb54 	bl	8000f1c <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <MX_ADC1_Init+0x140>)
 8000898:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_ADC1_Init+0x144>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <MX_ADC1_Init+0x140>)
 800089e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a4:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b0:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008be:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008c6:	4a41      	ldr	r2, [pc, #260]	; (80009cc <MX_ADC1_Init+0x148>)
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008d2:	2207      	movs	r2, #7
 80008d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e4:	4837      	ldr	r0, [pc, #220]	; (80009c4 <MX_ADC1_Init+0x140>)
 80008e6:	f001 f8a7 	bl	8001a38 <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008f0:	f000 fb14 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008fc:	2301      	movs	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	482f      	ldr	r0, [pc, #188]	; (80009c4 <MX_ADC1_Init+0x140>)
 8000906:	f001 fb89 	bl	800201c <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 fb04 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000914:	2305      	movs	r3, #5
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4828      	ldr	r0, [pc, #160]	; (80009c4 <MX_ADC1_Init+0x140>)
 8000922:	f001 fb7b 	bl	800201c <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800092c:	f000 faf6 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000930:	2306      	movs	r3, #6
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000934:	2303      	movs	r3, #3
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_ADC1_Init+0x140>)
 800093e:	f001 fb6d 	bl	800201c <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000948:	f000 fae8 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800094c:	2307      	movs	r3, #7
 800094e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000950:	2304      	movs	r3, #4
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	481a      	ldr	r0, [pc, #104]	; (80009c4 <MX_ADC1_Init+0x140>)
 800095a:	f001 fb5f 	bl	800201c <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000964:	f000 fada 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000968:	2308      	movs	r3, #8
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800096c:	2305      	movs	r3, #5
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_ADC1_Init+0x140>)
 8000976:	f001 fb51 	bl	800201c <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000980:	f000 facc 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000988:	2306      	movs	r3, #6
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_ADC1_Init+0x140>)
 8000992:	f001 fb43 	bl	800201c <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800099c:	f000 fabe 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009a0:	2309      	movs	r3, #9
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_ADC1_Init+0x140>)
 80009ae:	f001 fb35 	bl	800201c <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80009b8:	f000 fab0 	bl	8000f1c <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000094 	.word	0x20000094
 80009c8:	40012000 	.word	0x40012000
 80009cc:	0f000001 	.word	0x0f000001

080009d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <MX_SPI2_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI2_Init+0x64>)
 80009fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a04:	2218      	movs	r2, #24
 8000a06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_SPI2_Init+0x64>)
 8000a22:	f002 fc83 	bl	800332c <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a2c:	f000 fa76 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000dc 	.word	0x200000dc
 8000a38:	40003800 	.word	0x40003800

08000a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a68:	f240 227f 	movw	r2, #639	; 0x27f
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a76:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000a8a:	f003 f93d 	bl	8003d08 <HAL_TIM_PWM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fa42 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000aa8:	f003 feb6 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ab2:	f000 fa33 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	2360      	movs	r3, #96	; 0x60
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8000aba:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000ad0:	f003 fb86 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000ada:	f000 fa1f 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000aea:	f003 fb79 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000af4:	f000 fa12 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM2_Init+0xcc>)
 8000afa:	f000 fb27 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000134 	.word	0x20000134

08000b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <MX_TIM4_Init+0xdc>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b36:	f240 227f 	movw	r2, #639	; 0x27f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b44:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b58:	f003 f8d6 	bl	8003d08 <HAL_TIM_PWM_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b62:	f000 f9db 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	4619      	mov	r1, r3
 8000b74:	481b      	ldr	r0, [pc, #108]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b76:	f003 fe4f 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b80:	f000 f9cc 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b84:	2360      	movs	r3, #96	; 0x60
 8000b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000b9c:	f003 fb20 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ba6:	f000 f9b9 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2204      	movs	r2, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000bb2:	f003 fb15 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 f9ae 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000bc8:	f003 fb0a 	bl	80041e0 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000bd2:	f000 f9a3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM4_Init+0xd8>)
 8000bd8:	f000 fab8 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000017c 	.word	0x2000017c
 8000be8:	40000800 	.word	0x40000800

08000bec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_USART1_UART_Init+0x50>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_USART1_UART_Init+0x4c>)
 8000c24:	f003 fe7a 	bl	800491c <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c2e:	f000 f975 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001c4 	.word	0x200001c4
 8000c3c:	40011000 	.word	0x40011000

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a3a      	ldr	r2, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a2c      	ldr	r2, [pc, #176]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <MX_GPIO_Init+0x124>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_GPIO_Init+0x128>)
 8000cce:	f001 fe4b 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2118      	movs	r1, #24
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000cd8:	f001 fe46 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481c      	ldr	r0, [pc, #112]	; (8000d68 <MX_GPIO_Init+0x128>)
 8000cf6:	f001 fc9b 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4817      	ldr	r0, [pc, #92]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000d10:	f001 fc8e 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 8000d14:	2318      	movs	r3, #24
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <MX_GPIO_Init+0x12c>)
 8000d2c:	f001 fc80 	bl	8002630 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_GPIO_Init+0x130>)
 8000d46:	f001 fc73 	bl	8002630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2008      	movs	r0, #8
 8000d50:	f001 fc44 	bl	80025dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d54:	2008      	movs	r0, #8
 8000d56:	f001 fc5d 	bl	8002614 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400

08000d74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	uint16_t data = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	83fb      	strh	r3, [r7, #30]
//	  2. Convert R data into angle
//	  3. Transmeet it into Set_Servo_Angle function


 //  не робить
	  if(xQueueReceive(DATAQueueHandle, &DATA_t, 0))            			// Show settings time
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <StartDefaultTask+0xb0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f107 010c 	add.w	r1, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 feea 	bl	8005b64 <xQueueReceive>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d042      	beq.n	8000e1c <StartDefaultTask+0xa8>
	  {
		  uint8_t angle = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	777b      	strb	r3, [r7, #29]

		  // convert R data into angle
		  DATA_t.R1 = DATA_t.R1 / 23;
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <StartDefaultTask+0xb4>)
 8000d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	81bb      	strh	r3, [r7, #12]
		  DATA_t.R2 = DATA_t.R2 / 23;
 8000da8:	89fb      	ldrh	r3, [r7, #14]
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <StartDefaultTask+0xb4>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	81fb      	strh	r3, [r7, #14]
		  DATA_t.R3 = DATA_t.R3 / 23;
 8000db6:	8a3b      	ldrh	r3, [r7, #16]
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <StartDefaultTask+0xb4>)
 8000dba:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	823b      	strh	r3, [r7, #16]
		  DATA_t.R4 = DATA_t.R4 / 23;
 8000dc4:	8a7b      	ldrh	r3, [r7, #18]
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <StartDefaultTask+0xb4>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	827b      	strh	r3, [r7, #18]
		  DATA_t.R5 = DATA_t.R5 / 23;
 8000dd2:	8abb      	ldrh	r3, [r7, #20]
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <StartDefaultTask+0xb4>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	82bb      	strh	r3, [r7, #20]


		  Set_Servo_Angle(1, DATA_t.R1);
 8000de0:	89bb      	ldrh	r3, [r7, #12]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fbec 	bl	80005c4 <Set_Servo_Angle>
		  Set_Servo_Angle(2, DATA_t.R2);
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff fbe6 	bl	80005c4 <Set_Servo_Angle>
		  Set_Servo_Angle(3, DATA_t.R3);
 8000df8:	8a3b      	ldrh	r3, [r7, #16]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f7ff fbe0 	bl	80005c4 <Set_Servo_Angle>
		  Set_Servo_Angle(4, DATA_t.R4);
 8000e04:	8a7b      	ldrh	r3, [r7, #18]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2004      	movs	r0, #4
 8000e0c:	f7ff fbda 	bl	80005c4 <Set_Servo_Angle>
		  Set_Servo_Angle(5, DATA_t.R5);
 8000e10:	8abb      	ldrh	r3, [r7, #20]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	2005      	movs	r0, #5
 8000e18:	f7ff fbd4 	bl	80005c4 <Set_Servo_Angle>
	  }

//	  Test_Servo_Motor();
//	  osDelay(3000);

	  osDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f004 f95f 	bl	80050e0 <osDelay>
	  if(xQueueReceive(DATAQueueHandle, &DATA_t, 0))            			// Show settings time
 8000e22:	e7ad      	b.n	8000d80 <StartDefaultTask+0xc>
 8000e24:	20000218 	.word	0x20000218
 8000e28:	b21642c9 	.word	0xb21642c9

08000e2c <Start_nrf_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_nrf_task */
void Start_nrf_task(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_nrf_task */
  /* Infinite loop */

	osDelay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f004 f952 	bl	80050e0 <osDelay>

	#if NRF_MODE == TX
	  NRF24_init_TX();
 8000e3c:	f000 fb24 	bl	8001488 <NRF24_init_TX>
#else
	  // NRF24L01_Receive();
	NRF24L01_Receive_Real_Data();
#endif

	  osDelay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f004 f94d 	bl	80050e0 <osDelay>
 8000e46:	e7fb      	b.n	8000e40 <Start_nrf_task+0x14>

08000e48 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	; 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
  /* Infinite loop */

	uint16_t adc_values[7] = {0};
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	819a      	strh	r2, [r3, #12]
  for(;;)
  {

#if NRF_MODE == TX
	  // Resistors
	  adc_values[0] = ADC_Get_Value(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff fb40 	bl	80004e4 <ADC_Get_Value>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	843b      	strh	r3, [r7, #32]
	  adc_values[1] = ADC_Get_Value(5);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f7ff fb3a 	bl	80004e4 <ADC_Get_Value>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	847b      	strh	r3, [r7, #34]	; 0x22
	  adc_values[2] = ADC_Get_Value(6);
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff fb34 	bl	80004e4 <ADC_Get_Value>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	84bb      	strh	r3, [r7, #36]	; 0x24
	  adc_values[3] = ADC_Get_Value(7);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f7ff fb2e 	bl	80004e4 <ADC_Get_Value>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
	  adc_values[4] = ADC_Get_Value(8);
 8000e8e:	2008      	movs	r0, #8
 8000e90:	f7ff fb28 	bl	80004e4 <ADC_Get_Value>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	853b      	strh	r3, [r7, #40]	; 0x28

	  // Joystick
	  adc_values[5] = ADC_Get_Value(0);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fb22 	bl	80004e4 <ADC_Get_Value>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
	  adc_values[6] = ADC_Get_Value(9);
 8000ea6:	2009      	movs	r0, #9
 8000ea8:	f7ff fb1c 	bl	80004e4 <ADC_Get_Value>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	  // Send data into queue
	  uint8_t adc_data[20] = {0};
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	8c3b      	ldrh	r3, [r7, #32]

	  memcpy(&adc_data[0], &adc_values[0], sizeof(uint16_t));
 8000ec6:	81bb      	strh	r3, [r7, #12]
 8000ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
	  memcpy(&adc_data[2], &adc_values[1], sizeof(uint16_t));
 8000eca:	81fb      	strh	r3, [r7, #14]
 8000ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
	  memcpy(&adc_data[4], &adc_values[2], sizeof(uint16_t));
 8000ece:	823b      	strh	r3, [r7, #16]
 8000ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
	  memcpy(&adc_data[6], &adc_values[3], sizeof(uint16_t));
 8000ed2:	827b      	strh	r3, [r7, #18]
 8000ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	  memcpy(&adc_data[8], &adc_values[4], sizeof(uint16_t));
 8000ed6:	82bb      	strh	r3, [r7, #20]
 8000ed8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c

	  memcpy(&adc_data[10], &adc_values[6], sizeof(uint16_t));
 8000eda:	82fb      	strh	r3, [r7, #22]
 8000edc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
	  memcpy(&adc_data[12], &adc_values[5], sizeof(uint16_t));
 8000ede:	833b      	strh	r3, [r7, #24]

	  adc_data[14] = 99;			// Заглушка під кнопку джойстика
 8000ee0:	2363      	movs	r3, #99	; 0x63
 8000ee2:	76bb      	strb	r3, [r7, #26]

	  //
	  NRF24L01_Transmit_Real_Data(adc_data);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd09 	bl	8001900 <NRF24L01_Transmit_Real_Data>





	  osDelay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f004 f8f6 	bl	80050e0 <osDelay>
  {
 8000ef4:	e7b3      	b.n	8000e5e <StartAdcTask+0x16>
	...

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0a:	f000 fd51 	bl	80019b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40014400 	.word	0x40014400

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_MspInit+0x54>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <HAL_MspInit+0x54>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_MspInit+0x54>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_MspInit+0x54>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_MspInit+0x54>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_MspInit+0x54>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	210f      	movs	r1, #15
 8000f6a:	f06f 0001 	mvn.w	r0, #1
 8000f6e:	f001 fb35 	bl	80025dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a28      	ldr	r2, [pc, #160]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d149      	bne.n	8001036 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000ff6:	23e3      	movs	r3, #227	; 0xe3
 8000ff8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 800100a:	f001 fb11 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800100e:	2303      	movs	r3, #3
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001012:	2303      	movs	r3, #3
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4619      	mov	r1, r3
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <HAL_ADC_MspInit+0xcc>)
 8001022:	f001 fb05 	bl	8002630 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	2012      	movs	r0, #18
 800102c:	f001 fad6 	bl	80025dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001030:	2012      	movs	r0, #18
 8001032:	f001 faef 	bl	8002614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012000 	.word	0x40012000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_SPI_MspInit+0x84>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12c      	bne.n	80010cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010bc:	2305      	movs	r3, #5
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 80010c8:	f001 fab2 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003800 	.word	0x40003800
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400

080010e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d10e      	bne.n	8001110 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800110e:	e012      	b.n	8001136 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_TIM_PWM_MspInit+0x68>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_TIM_PWM_MspInit+0x64>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40000800 	.word	0x40000800

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116c:	d13d      	bne.n	80011ea <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a2a      	ldr	r2, [pc, #168]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b8:	2301      	movs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	481f      	ldr	r0, [pc, #124]	; (8001240 <HAL_TIM_MspPostInit+0xf4>)
 80011c4:	f001 fa34 	bl	8002630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011c8:	2308      	movs	r3, #8
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d8:	2301      	movs	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <HAL_TIM_MspPostInit+0xf8>)
 80011e4:	f001 fa24 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011e8:	e023      	b.n	8001232 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_TIM_MspPostInit+0xfc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d11e      	bne.n	8001232 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_MspPostInit+0xf0>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001210:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001222:	2302      	movs	r3, #2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_TIM_MspPostInit+0xf8>)
 800122e:	f001 f9ff 	bl	8002630 <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40000800 	.word	0x40000800

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x84>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12c      	bne.n	80012c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_UART_MspInit+0x88>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b8:	2307      	movs	r3, #7
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_UART_MspInit+0x8c>)
 80012c4:	f001 f9b4 	bl	8002630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_InitTick+0xd0>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_InitTick+0xd0>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fa:	6453      	str	r3, [r2, #68]	; 0x44
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_InitTick+0xd0>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f001 ffd8 	bl	80032c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001318:	f001 ffc2 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 800131c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <HAL_InitTick+0xd4>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	3b01      	subs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_InitTick+0xd8>)
 800132e:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <HAL_InitTick+0xdc>)
 8001330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_InitTick+0xd8>)
 8001334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001338:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <HAL_InitTick+0xd8>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_InitTick+0xd8>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_InitTick+0xd8>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_InitTick+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001352:	4818      	ldr	r0, [pc, #96]	; (80013b4 <HAL_InitTick+0xd8>)
 8001354:	f002 fc1c 	bl	8003b90 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800135e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001362:	2b00      	cmp	r3, #0
 8001364:	d11b      	bne.n	800139e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001366:	4813      	ldr	r0, [pc, #76]	; (80013b4 <HAL_InitTick+0xd8>)
 8001368:	f002 fc6c 	bl	8003c44 <HAL_TIM_Base_Start_IT>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001376:	2b00      	cmp	r3, #0
 8001378:	d111      	bne.n	800139e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800137a:	2019      	movs	r0, #25
 800137c:	f001 f94a 	bl	8002614 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	d808      	bhi.n	8001398 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001386:	2200      	movs	r2, #0
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	2019      	movs	r0, #25
 800138c:	f001 f926 	bl	80025dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_InitTick+0xe0>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e002      	b.n	800139e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	20000220 	.word	0x20000220
 80013b8:	40014400 	.word	0x40014400
 80013bc:	20000008 	.word	0x20000008

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f001 faed 	bl	80029d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <ADC_IRQHandler+0x10>)
 8001402:	f000 fccf 	bl	8001da4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000094 	.word	0x20000094

08001410 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001416:	f002 fddb 	bl	8003fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000220 	.word	0x20000220

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <DelayMicro>:
void print_Data_Ower_uart(uint8_t *RX_BUF);
void parsing_Data(uint8_t *RX_BUF);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <DelayMicro+0x38>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <DelayMicro+0x3c>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0a9b      	lsrs	r3, r3, #10
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	607b      	str	r3, [r7, #4]

	/* Wait till done */
	while (micros--) ;
 8001466:	bf00      	nop
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1fa      	bne.n	8001468 <DelayMicro+0x20>
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000
 8001484:	02659117 	.word	0x02659117

08001488 <NRF24_init_TX>:
// -------------------------------------------------------------------------------------
void NRF24_init_TX(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	 CE_RESET;
 800148c:	2200      	movs	r2, #0
 800148e:	2108      	movs	r1, #8
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <NRF24_init_TX+0xa0>)
 8001492:	f001 fa69 	bl	8002968 <HAL_GPIO_WritePin>
	 //DelayMicro(5000);
	 osDelay(5);
 8001496:	2005      	movs	r0, #5
 8001498:	f003 fe22 	bl	80050e0 <osDelay>
	// HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800149c:	210a      	movs	r1, #10
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 f87c 	bl	800159c <NRF24_WriteReg>
	 //DelayMicro(5000);
//	 HAL_Delay(5);
	 osDelay(5);
 80014a4:	2005      	movs	r0, #5
 80014a6:	f003 fe1b 	bl	80050e0 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 80014aa:	2101      	movs	r1, #1
 80014ac:	2001      	movs	r0, #1
 80014ae:	f000 f875 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0
 80014b2:	2101      	movs	r1, #1
 80014b4:	2002      	movs	r0, #2
 80014b6:	f000 f871 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80014ba:	2101      	movs	r1, #1
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f86d 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 80014c2:	215f      	movs	r1, #95	; 0x5f
 80014c4:	2004      	movs	r0, #4
 80014c6:	f000 f869 	bl	800159c <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 80014ca:	f000 f895 	bl	80015f8 <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	201d      	movs	r0, #29
 80014d2:	f000 f863 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	201c      	movs	r0, #28
 80014da:	f000 f85f 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 80014de:	2170      	movs	r1, #112	; 0x70
 80014e0:	2007      	movs	r0, #7
 80014e2:	f000 f85b 	bl	800159c <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			//  2476 MHz
 80014e6:	214c      	movs	r1, #76	; 0x4c
 80014e8:	2005      	movs	r0, #5
 80014ea:	f000 f857 	bl	800159c <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, 0x06);		// TX_PWR:0dBm, Datarate:1Mbps      - WAS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	 NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps	- New version
 80014ee:	2126      	movs	r1, #38	; 0x26
 80014f0:	2006      	movs	r0, #6
 80014f2:	f000 f853 	bl	800159c <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80014f6:	2203      	movs	r2, #3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <NRF24_init_TX+0xa4>)
 80014fa:	2010      	movs	r0, #16
 80014fc:	f000 f8a6 	bl	800164c <NRF24_Write_Buf>

	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 8001500:	2203      	movs	r2, #3
 8001502:	490a      	ldr	r1, [pc, #40]	; (800152c <NRF24_init_TX+0xa4>)
 8001504:	200a      	movs	r0, #10
 8001506:	f000 f8a1 	bl	800164c <NRF24_Write_Buf>

	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 //Number of bytes in RX payload in data pipe 0
 800150a:	2112      	movs	r1, #18
 800150c:	2011      	movs	r0, #17
 800150e:	f000 f845 	bl	800159c <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 8001512:	f000 f911 	bl	8001738 <NRF24L01_RX_Mode>
	 LED_OFF;
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <NRF24_init_TX+0xa8>)
 800151e:	f001 fa23 	bl	8002968 <HAL_GPIO_WritePin>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40020000 	.word	0x40020000
 800152c:	20000004 	.word	0x20000004
 8001530:	40020800 	.word	0x40020800

08001534 <NRF24_ReadReg>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	4813      	ldr	r0, [pc, #76]	; (8001594 <NRF24_ReadReg+0x60>)
 8001548:	f001 fa0e 	bl	8002968 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 800154c:	f107 020f 	add.w	r2, r7, #15
 8001550:	1df9      	adds	r1, r7, #7
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <NRF24_ReadReg+0x64>)
 800155c:	f002 f8ab 	bl	80036b6 <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b07      	cmp	r3, #7
 8001564:	d00c      	beq.n	8001580 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 800156a:	f107 020f 	add.w	r2, r7, #15
 800156e:	f107 010e 	add.w	r1, r7, #14
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <NRF24_ReadReg+0x64>)
 800157c:	f002 f89b 	bl	80036b6 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <NRF24_ReadReg+0x60>)
 8001586:	f001 f9ef 	bl	8002968 <HAL_GPIO_WritePin>

	return dt;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40020000 	.word	0x40020000
 8001598:	200000dc 	.word	0x200000dc

0800159c <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f043 0320 	orr.w	r3, r3, #32
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80015b6:	2200      	movs	r2, #0
 80015b8:	2110      	movs	r1, #16
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <NRF24_WriteReg+0x54>)
 80015bc:	f001 f9d4 	bl	8002968 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 80015c0:	1df9      	adds	r1, r7, #7
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	2201      	movs	r2, #1
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <NRF24_WriteReg+0x58>)
 80015ca:	f001 ff38 	bl	800343e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 80015ce:	1db9      	adds	r1, r7, #6
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	2201      	movs	r2, #1
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <NRF24_WriteReg+0x58>)
 80015d8:	f001 ff31 	bl	800343e <HAL_SPI_Transmit>

	CS_OFF;
 80015dc:	2201      	movs	r2, #1
 80015de:	2110      	movs	r1, #16
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <NRF24_WriteReg+0x54>)
 80015e2:	f001 f9c1 	bl	8002968 <HAL_GPIO_WritePin>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020000 	.word	0x40020000
 80015f4:	200000dc 	.word	0x200000dc

080015f8 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 80015fe:	2350      	movs	r3, #80	; 0x50
 8001600:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001602:	2200      	movs	r2, #0
 8001604:	2110      	movs	r1, #16
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <NRF24_ToggleFeatures+0x4c>)
 8001608:	f001 f9ae 	bl	8002968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 800160c:	1d39      	adds	r1, r7, #4
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	2201      	movs	r2, #1
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <NRF24_ToggleFeatures+0x50>)
 8001616:	f001 ff12 	bl	800343e <HAL_SPI_Transmit>

	DelayMicro(1);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ff14 	bl	8001448 <DelayMicro>

	dt[0] = 0x73;
 8001620:	2373      	movs	r3, #115	; 0x73
 8001622:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	2201      	movs	r2, #1
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <NRF24_ToggleFeatures+0x50>)
 800162e:	f001 ff06 	bl	800343e <HAL_SPI_Transmit>
	CS_OFF;
 8001632:	2201      	movs	r2, #1
 8001634:	2110      	movs	r1, #16
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <NRF24_ToggleFeatures+0x4c>)
 8001638:	f001 f996 	bl	8002968 <HAL_GPIO_WritePin>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020000 	.word	0x40020000
 8001648:	200000dc 	.word	0x200000dc

0800164c <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	b2db      	uxtb	r3, r3
 8001664:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <NRF24_Write_Buf+0x5c>)
 800166c:	f001 f97c 	bl	8002968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8001670:	1df9      	adds	r1, r7, #7
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	2201      	movs	r2, #1
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <NRF24_Write_Buf+0x60>)
 800167a:	f001 fee0 	bl	800343e <HAL_SPI_Transmit>

	DelayMicro(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fee2 	bl	8001448 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <NRF24_Write_Buf+0x60>)
 8001690:	f001 fed5 	bl	800343e <HAL_SPI_Transmit>

	CS_OFF;
 8001694:	2201      	movs	r2, #1
 8001696:	2110      	movs	r1, #16
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <NRF24_Write_Buf+0x5c>)
 800169a:	f001 f965 	bl	8002968 <HAL_GPIO_WritePin>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020000 	.word	0x40020000
 80016ac:	200000dc 	.word	0x200000dc

080016b0 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 80016b6:	23e2      	movs	r3, #226	; 0xe2
 80016b8:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80016ba:	2200      	movs	r2, #0
 80016bc:	2110      	movs	r1, #16
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <NRF24_FlushRX+0x3c>)
 80016c0:	f001 f952 	bl	8002968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80016c4:	1d39      	adds	r1, r7, #4
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	2201      	movs	r2, #1
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <NRF24_FlushRX+0x40>)
 80016ce:	f001 feb6 	bl	800343e <HAL_SPI_Transmit>
	DelayMicro(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff feb8 	bl	8001448 <DelayMicro>
	CS_OFF;
 80016d8:	2201      	movs	r2, #1
 80016da:	2110      	movs	r1, #16
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <NRF24_FlushRX+0x3c>)
 80016de:	f001 f943 	bl	8002968 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020000 	.word	0x40020000
 80016f0:	200000dc 	.word	0x200000dc

080016f4 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 80016fa:	23e1      	movs	r3, #225	; 0xe1
 80016fc:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80016fe:	2200      	movs	r2, #0
 8001700:	2110      	movs	r1, #16
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <NRF24_FlushTX+0x3c>)
 8001704:	f001 f930 	bl	8002968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001708:	1d39      	adds	r1, r7, #4
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	2201      	movs	r2, #1
 8001710:	4808      	ldr	r0, [pc, #32]	; (8001734 <NRF24_FlushTX+0x40>)
 8001712:	f001 fe94 	bl	800343e <HAL_SPI_Transmit>
	DelayMicro(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fe96 	bl	8001448 <DelayMicro>
	CS_OFF;
 800171c:	2201      	movs	r2, #1
 800171e:	2110      	movs	r1, #16
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <NRF24_FlushTX+0x3c>)
 8001722:	f001 f921 	bl	8002968 <HAL_GPIO_WritePin>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40020000 	.word	0x40020000
 8001734:	200000dc 	.word	0x200000dc

08001738 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fef6 	bl	8001534 <NRF24_ReadReg>
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f043 0303 	orr.w	r3, r3, #3
 8001752:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4619      	mov	r1, r3
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff ff1f 	bl	800159c <NRF24_WriteReg>
	CE_SET;
 800175e:	2201      	movs	r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	4807      	ldr	r0, [pc, #28]	; (8001780 <NRF24L01_RX_Mode+0x48>)
 8001764:	f001 f900 	bl	8002968 <HAL_GPIO_WritePin>

	DelayMicro(150);
 8001768:	2096      	movs	r0, #150	; 0x96
 800176a:	f7ff fe6d 	bl	8001448 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 800176e:	f7ff ff9f 	bl	80016b0 <NRF24_FlushRX>
	NRF24_FlushTX();
 8001772:	f7ff ffbf 	bl	80016f4 <NRF24_FlushTX>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40020000 	.word	0x40020000

08001784 <NRF24L01_TX_Mode>:
	DelayMicro(1000);

}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800178c:	2203      	movs	r2, #3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <NRF24L01_TX_Mode+0x2c>)
 8001790:	2010      	movs	r0, #16
 8001792:	f7ff ff5b 	bl	800164c <NRF24_Write_Buf>
	CE_RESET;
 8001796:	2200      	movs	r2, #0
 8001798:	2108      	movs	r1, #8
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <NRF24L01_TX_Mode+0x30>)
 800179c:	f001 f8e4 	bl	8002968 <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 80017a0:	f7ff ff86 	bl	80016b0 <NRF24_FlushRX>
	NRF24_FlushTX();
 80017a4:	f7ff ffa6 	bl	80016f4 <NRF24_FlushTX>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000004 	.word	0x20000004
 80017b4:	40020000 	.word	0x40020000

080017b8 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 80017c8:	2200      	movs	r2, #0
 80017ca:	2108      	movs	r1, #8
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <NRF24_Transmit+0x64>)
 80017ce:	f001 f8cb 	bl	8002968 <HAL_GPIO_WritePin>
	CS_ON;
 80017d2:	2200      	movs	r2, #0
 80017d4:	2110      	movs	r1, #16
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <NRF24_Transmit+0x64>)
 80017d8:	f001 f8c6 	bl	8002968 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 80017dc:	1df9      	adds	r1, r7, #7
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	2201      	movs	r2, #1
 80017e4:	480e      	ldr	r0, [pc, #56]	; (8001820 <NRF24_Transmit+0x68>)
 80017e6:	f001 fe2a 	bl	800343e <HAL_SPI_Transmit>
	DelayMicro(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff fe2c 	bl	8001448 <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <NRF24_Transmit+0x68>)
 80017fc:	f001 fe1f 	bl	800343e <HAL_SPI_Transmit>

	CS_OFF;
 8001800:	2201      	movs	r2, #1
 8001802:	2110      	movs	r1, #16
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <NRF24_Transmit+0x64>)
 8001806:	f001 f8af 	bl	8002968 <HAL_GPIO_WritePin>
	CE_SET;
 800180a:	2201      	movs	r2, #1
 800180c:	2108      	movs	r1, #8
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <NRF24_Transmit+0x64>)
 8001810:	f001 f8aa 	bl	8002968 <HAL_GPIO_WritePin>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40020000 	.word	0x40020000
 8001820:	200000dc 	.word	0x200000dc

08001824 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	2300      	movs	r3, #0
 8001832:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode(pBuf);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffa5 	bl	8001784 <NRF24L01_TX_Mode>

	regval = NRF24_ReadReg(CONFIG);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fe7a 	bl	8001534 <NRF24_ReadReg>
 8001840:	4603      	mov	r3, r0
 8001842:	73bb      	strb	r3, [r7, #14]
	regval |= (1<<PWR_UP);
 8001844:	7bbb      	ldrb	r3, [r7, #14]
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);							// Turn on TX mode
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	73bb      	strb	r3, [r7, #14]

	NRF24_WriteReg(CONFIG,regval);
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	4619      	mov	r1, r3
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fe9f 	bl	800159c <NRF24_WriteReg>
	DelayMicro(150);
 800185e:	2096      	movs	r0, #150	; 0x96
 8001860:	f7ff fdf2 	bl	8001448 <DelayMicro>

	uint8_t dt_reg = NRF24_ReadReg(CONFIG);				// For debug
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fe65 	bl	8001534 <NRF24_ReadReg>
 800186a:	4603      	mov	r3, r0
 800186c:	737b      	strb	r3, [r7, #13]

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 800186e:	2212      	movs	r2, #18
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	20a0      	movs	r0, #160	; 0xa0
 8001874:	f7ff ffa0 	bl	80017b8 <NRF24_Transmit>
	CE_SET;
 8001878:	2201      	movs	r2, #1
 800187a:	2108      	movs	r1, #8
 800187c:	481e      	ldr	r0, [pc, #120]	; (80018f8 <NRF24L01_Send+0xd4>)
 800187e:	f001 f873 	bl	8002968 <HAL_GPIO_WritePin>
	DelayMicro(15); 			// minimum 10us high pulse (Page 21)
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff fde0 	bl	8001448 <DelayMicro>
	CE_RESET;
 8001888:	2200      	movs	r2, #0
 800188a:	2108      	movs	r1, #8
 800188c:	481a      	ldr	r0, [pc, #104]	; (80018f8 <NRF24L01_Send+0xd4>)
 800188e:	f001 f86b 	bl	8002968 <HAL_GPIO_WritePin>

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8001892:	bf00      	nop
 8001894:	2104      	movs	r1, #4
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <NRF24L01_Send+0xd4>)
 8001898:	f001 f84e 	bl	8002938 <HAL_GPIO_ReadPin>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d0f8      	beq.n	8001894 <NRF24L01_Send+0x70>

	//HAL_GPIO_TogglePin(GPIOA, TEST_OUT_Pin);    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< for debug latency

	status = NRF24_ReadReg(STATUS);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f7ff fe46 	bl	8001534 <NRF24_ReadReg>
 80018a8:	4603      	mov	r3, r0
 80018aa:	73fb      	strb	r3, [r7, #15]

	if(status&TX_DS) 			//tx_ds == 0x20   If data was transmitted
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <NRF24L01_Send+0xa6>
	{
	    LED_TGL;
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	4810      	ldr	r0, [pc, #64]	; (80018fc <NRF24L01_Send+0xd8>)
 80018bc:	f001 f86d 	bl	800299a <HAL_GPIO_TogglePin>
	    NRF24_WriteReg(STATUS, 0x20);
 80018c0:	2120      	movs	r1, #32
 80018c2:	2007      	movs	r0, #7
 80018c4:	f7ff fe6a 	bl	800159c <NRF24_WriteReg>
 80018c8:	e00a      	b.n	80018e0 <NRF24L01_Send+0xbc>
	}
	else if(status&MAX_RT)
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <NRF24L01_Send+0xbc>
	{
		NRF24_WriteReg(STATUS, 0x10);
 80018d4:	2110      	movs	r1, #16
 80018d6:	2007      	movs	r0, #7
 80018d8:	f7ff fe60 	bl	800159c <NRF24_WriteReg>
		NRF24_FlushTX();
 80018dc:	f7ff ff0a 	bl	80016f4 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 80018e0:	2008      	movs	r0, #8
 80018e2:	f7ff fe27 	bl	8001534 <NRF24_ReadReg>
 80018e6:	4603      	mov	r3, r0
 80018e8:	73bb      	strb	r3, [r7, #14]

	NRF24L01_RX_Mode();
 80018ea:	f7ff ff25 	bl	8001738 <NRF24L01_RX_Mode>

	return regval;
 80018ee:	7bbb      	ldrb	r3, [r7, #14]

}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020800 	.word	0x40020800

08001900 <NRF24L01_Transmit_Real_Data>:

	  }
}
// -------------------------------------------------------------------------------------
void NRF24L01_Transmit_Real_Data(uint8_t* data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
//	}
//	memcpy(buf1+2,(uint8_t*)&retr_cnt_full,2);



	NRF24L01_Send(data);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff8b 	bl	8001824 <NRF24L01_Send>
//	if(i>=999)
//	{
//		i=1;
//	}

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001920:	4a0e      	ldr	r2, [pc, #56]	; (800195c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001934:	4c0b      	ldr	r4, [pc, #44]	; (8001964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001942:	f7ff fd6f 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f006 fa59 	bl	8007dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7fe fec7 	bl	80006dc <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800195c:	080081a4 	.word	0x080081a4
  ldr r2, =_sbss
 8001960:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001964:	20004c84 	.word	0x20004c84

08001968 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <DMA1_Stream0_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 fe16 	bl	80025c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	200f      	movs	r0, #15
 800199c:	f7ff fc9e 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fac2 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x20>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x24>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_IncTick+0x24>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	20000268 	.word	0x20000268

080019d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return uwTick;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <HAL_GetTick+0x14>)
 80019de:	681b      	ldr	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000268 	.word	0x20000268

080019f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff ffee 	bl	80019d8 <HAL_GetTick>
 80019fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a08:	d005      	beq.n	8001a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_Delay+0x44>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a16:	bf00      	nop
 8001a18:	f7ff ffde 	bl	80019d8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8f7      	bhi.n	8001a18 <HAL_Delay+0x28>
  {
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c

08001a38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e033      	b.n	8001ab6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fa92 	bl	8000f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fbe8 	bl	8002260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Start+0x1a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e097      	b.n	8001c0a <HAL_ADC_Start+0x14a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d018      	beq.n	8001b22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_ADC_Start+0x158>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <HAL_ADC_Start+0x15c>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9a      	lsrs	r2, r3, #18
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d15f      	bne.n	8001bf0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f023 0206 	bic.w	r2, r3, #6
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_ADC_Start+0x160>)
 8001b8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d129      	bne.n	8001c08 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e020      	b.n	8001c08 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_ADC_Start+0x164>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d11b      	bne.n	8001c08 <HAL_ADC_Start+0x148>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d114      	bne.n	8001c08 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	e00b      	b.n	8001c08 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	431bde83 	.word	0x431bde83
 8001c20:	40012300 	.word	0x40012300
 8001c24:	40012000 	.word	0x40012000

08001c28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Stop+0x16>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e021      	b.n	8001c82 <HAL_ADC_Stop+0x5a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d113      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cba:	d10b      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e063      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fe80 	bl	80019d8 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cda:	e021      	b.n	8001d20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce2:	d01d      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_ADC_PollForConversion+0x6c>
 8001cea:	f7ff fe75 	bl	80019d8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d212      	bcs.n	8001d20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d00b      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e03d      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d1d6      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0212 	mvn.w	r2, #18
 8001d36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d123      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d111      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d049      	beq.n	8001e6e <HAL_ADC_IRQHandler+0xca>
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d046      	beq.n	8001e6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12b      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d127      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0220 	bic.w	r2, r2, #32
 8001e38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8bd 	bl	8001fde <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0212 	mvn.w	r2, #18
 8001e6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d057      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x190>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d054      	beq.n	8001f34 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d139      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12b      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d124      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11d      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d119      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fa97 	bl	8002458 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f06f 020c 	mvn.w	r2, #12
 8001f32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f841 	bl	8001ff2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0201 	mvn.w	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x218>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0202 	orr.w	r2, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f06f 0220 	mvn.w	r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f82a 	bl	8002006 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0220 	mvn.w	r2, #32
 8001fba:	601a      	str	r2, [r3, #0]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1c>
 8002034:	2302      	movs	r3, #2
 8002036:	e105      	b.n	8002244 <HAL_ADC_ConfigChannel+0x228>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b09      	cmp	r3, #9
 8002046:	d925      	bls.n	8002094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68d9      	ldr	r1, [r3, #12]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	3b1e      	subs	r3, #30
 800205e:	2207      	movs	r2, #7
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43da      	mvns	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	400a      	ands	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68d9      	ldr	r1, [r3, #12]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	4603      	mov	r3, r0
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4403      	add	r3, r0
 8002086:	3b1e      	subs	r3, #30
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	e022      	b.n	80020da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	2207      	movs	r2, #7
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6919      	ldr	r1, [r3, #16]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4403      	add	r3, r0
 80020d0:	409a      	lsls	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d824      	bhi.n	800212c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b05      	subs	r3, #5
 80020f4:	221f      	movs	r2, #31
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b05      	subs	r3, #5
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	635a      	str	r2, [r3, #52]	; 0x34
 800212a:	e04c      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d824      	bhi.n	800217e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	3b23      	subs	r3, #35	; 0x23
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43da      	mvns	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b29b      	uxth	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b23      	subs	r3, #35	; 0x23
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
 800217c:	e023      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b41      	subs	r3, #65	; 0x41
 8002190:	221f      	movs	r2, #31
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b41      	subs	r3, #65	; 0x41
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c6:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_ADC_ConfigChannel+0x234>)
 80021c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a21      	ldr	r2, [pc, #132]	; (8002254 <HAL_ADC_ConfigChannel+0x238>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1cc>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_ADC_ConfigChannel+0x238>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d123      	bne.n	800223a <HAL_ADC_ConfigChannel+0x21e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d003      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x1e6>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d11b      	bne.n	800223a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d111      	bne.n	800223a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_ADC_ConfigChannel+0x23c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_ADC_ConfigChannel+0x240>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9a      	lsrs	r2, r3, #18
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800222c:	e002      	b.n	8002234 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3b01      	subs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40012300 	.word	0x40012300
 8002254:	40012000 	.word	0x40012000
 8002258:	20000000 	.word	0x20000000
 800225c:	431bde83 	.word	0x431bde83

08002260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <ADC_Init+0x1f0>)
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	021a      	lsls	r2, r3, #8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	4a58      	ldr	r2, [pc, #352]	; (8002454 <ADC_Init+0x1f4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	e00f      	b.n	800235e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800234c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800235c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0202 	bic.w	r2, r2, #2
 800236c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
 8002378:	005a      	lsls	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	3b01      	subs	r3, #1
 80023b8:	035a      	lsls	r2, r3, #13
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e007      	b.n	80023d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	051a      	lsls	r2, r3, #20
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002416:	025a      	lsls	r2, r3, #9
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	029a      	lsls	r2, r3, #10
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40012300 	.word	0x40012300
 8002454:	0f000001 	.word	0x0f000001

08002458 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff4c 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ee:	f7ff ff61 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 80025f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f7ff ffb1 	bl	8002560 <NVIC_EncodePriority>
 80025fe:	4602      	mov	r2, r0
 8002600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff80 	bl	800250c <__NVIC_SetPriority>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff54 	bl	80024d0 <__NVIC_EnableIRQ>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e159      	b.n	8002900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 8148 	bne.w	80028fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	2b02      	cmp	r3, #2
 8002680:	d130      	bne.n	80026e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0201 	and.w	r2, r3, #1
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d017      	beq.n	8002720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d123      	bne.n	8002774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	08da      	lsrs	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3208      	adds	r2, #8
 8002734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0203 	and.w	r2, r3, #3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a2 	beq.w	80028fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_GPIO_Init+0x2e8>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a56      	ldr	r2, [pc, #344]	; (8002918 <HAL_GPIO_Init+0x2e8>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_GPIO_Init+0x2ec>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a49      	ldr	r2, [pc, #292]	; (8002920 <HAL_GPIO_Init+0x2f0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x202>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a48      	ldr	r2, [pc, #288]	; (8002924 <HAL_GPIO_Init+0x2f4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x1fe>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a47      	ldr	r2, [pc, #284]	; (8002928 <HAL_GPIO_Init+0x2f8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x1fa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a46      	ldr	r2, [pc, #280]	; (800292c <HAL_GPIO_Init+0x2fc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x1f6>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a45      	ldr	r2, [pc, #276]	; (8002930 <HAL_GPIO_Init+0x300>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x1f2>
 800281e:	2304      	movs	r3, #4
 8002820:	e008      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002822:	2307      	movs	r3, #7
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002826:	2303      	movs	r3, #3
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x204>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x204>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x204>
 8002832:	2300      	movs	r3, #0
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002844:	4935      	ldr	r1, [pc, #212]	; (800291c <HAL_GPIO_Init+0x2ec>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_GPIO_Init+0x304>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <HAL_GPIO_Init+0x304>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_GPIO_Init+0x304>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_GPIO_Init+0x304>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_GPIO_Init+0x304>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_GPIO_Init+0x304>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_GPIO_Init+0x304>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <HAL_GPIO_Init+0x304>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f67f aea2 	bls.w	800264c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f806 	bl	8002a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e267      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d075      	beq.n	8002b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d00c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a42:	4b85      	ldr	r3, [pc, #532]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d112      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4e:	4b82      	ldr	r3, [pc, #520]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4b7e      	ldr	r3, [pc, #504]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d05b      	beq.n	8002b20 <HAL_RCC_OscConfig+0x108>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d157      	bne.n	8002b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e242      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_OscConfig+0x74>
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e01d      	b.n	8002ac8 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x98>
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6f      	ldr	r2, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6c      	ldr	r2, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xb0>
 8002ab0:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a68      	ldr	r2, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe ff82 	bl	80019d8 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fe ff7e 	bl	80019d8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e207      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0xc0>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe ff6e 	bl	80019d8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b00:	f7fe ff6a 	bl	80019d8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	; 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1f3      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0xe8>
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d063      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d11c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b46:	4b44      	ldr	r3, [pc, #272]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d116      	bne.n	8002b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_RCC_OscConfig+0x152>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e1c7      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4937      	ldr	r1, [pc, #220]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	e03a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_OscConfig+0x244>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe ff23 	bl	80019d8 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe ff1f 	bl	80019d8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e1a8      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4925      	ldr	r1, [pc, #148]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x244>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe ff02 	bl	80019d8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd8:	f7fe fefe 	bl	80019d8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e187      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d036      	beq.n	8002c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCC_OscConfig+0x248>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe fee2 	bl	80019d8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fe fede 	bl	80019d8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e167      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x200>
 8002c36:	e01b      	b.n	8002c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_OscConfig+0x248>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fecb 	bl	80019d8 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	e00e      	b.n	8002c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c46:	f7fe fec7 	bl	80019d8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d907      	bls.n	8002c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e150      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	42470000 	.word	0x42470000
 8002c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ea      	bne.n	8002c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8097 	beq.w	8002dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a7c      	ldr	r2, [pc, #496]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b77      	ldr	r3, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x474>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b74      	ldr	r3, [pc, #464]	; (8002e8c <HAL_RCC_OscConfig+0x474>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a73      	ldr	r2, [pc, #460]	; (8002e8c <HAL_RCC_OscConfig+0x474>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fe87 	bl	80019d8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe fe83 	bl	80019d8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e10c      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x474>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2ea>
 8002cf4:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e01c      	b.n	8002d3c <HAL_RCC_OscConfig+0x324>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x30c>
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	4b5c      	ldr	r3, [pc, #368]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0x324>
 8002d24:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d30:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 0304 	bic.w	r3, r3, #4
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe fe48 	bl	80019d8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fe44 	bl	80019d8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0cb      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0ee      	beq.n	8002d4c <HAL_RCC_OscConfig+0x334>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe fe32 	bl	80019d8 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe fe2e 	bl	80019d8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0b5      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ee      	bne.n	8002d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a38      	ldr	r2, [pc, #224]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a1 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db6:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d05c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d141      	bne.n	8002e4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_OscConfig+0x478>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fe02 	bl	80019d8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fdfe 	bl	80019d8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e087      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	491b      	ldr	r1, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x478>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe fdd7 	bl	80019d8 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fdd3 	bl	80019d8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e05c      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x416>
 8002e4c:	e054      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x478>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fdc0 	bl	80019d8 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fdbc 	bl	80019d8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e045      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_OscConfig+0x470>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x444>
 8002e7a:	e03d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e038      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x4ec>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d121      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d11a      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cc      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90c      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b8      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	494d      	ldr	r1, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4934      	ldr	r1, [pc, #208]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fcee 	bl	80019d8 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe fcea 	bl	80019d8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d20c      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4916      	ldr	r1, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	490e      	ldr	r1, [pc, #56]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308e:	f000 f821 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490a      	ldr	r1, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f914 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	0800811c 	.word	0x0800811c
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000008 	.word	0x20000008

080030d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b090      	sub	sp, #64	; 0x40
 80030da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
 80030e0:	2300      	movs	r3, #0
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e4:	2300      	movs	r3, #0
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d00d      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x40>
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	f200 80a1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x16c>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x34>
 8003102:	2b04      	cmp	r3, #4
 8003104:	d003      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x3a>
 8003106:	e09b      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_GetSysClockFreq+0x184>)
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800310c:	e09b      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_GetSysClockFreq+0x188>)
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003112:	e098      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311e:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d028      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	2200      	movs	r2, #0
 8003132:	623b      	str	r3, [r7, #32]
 8003134:	627a      	str	r2, [r7, #36]	; 0x24
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800313c:	2100      	movs	r1, #0
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_GetSysClockFreq+0x188>)
 8003140:	fb03 f201 	mul.w	r2, r3, r1
 8003144:	2300      	movs	r3, #0
 8003146:	fb00 f303 	mul.w	r3, r0, r3
 800314a:	4413      	add	r3, r2
 800314c:	4a43      	ldr	r2, [pc, #268]	; (800325c <HAL_RCC_GetSysClockFreq+0x188>)
 800314e:	fba0 1202 	umull	r1, r2, r0, r2
 8003152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003154:	460a      	mov	r2, r1
 8003156:	62ba      	str	r2, [r7, #40]	; 0x28
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	4413      	add	r3, r2
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	2200      	movs	r2, #0
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	61fa      	str	r2, [r7, #28]
 8003166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800316a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800316e:	f7fd f837 	bl	80001e0 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4613      	mov	r3, r2
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317a:	e053      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	2200      	movs	r2, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	617a      	str	r2, [r7, #20]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800318e:	f04f 0b00 	mov.w	fp, #0
 8003192:	4652      	mov	r2, sl
 8003194:	465b      	mov	r3, fp
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	ebb2 080a 	subs.w	r8, r2, sl
 80031ae:	eb63 090b 	sbc.w	r9, r3, fp
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031c6:	ebb2 0408 	subs.w	r4, r2, r8
 80031ca:	eb63 0509 	sbc.w	r5, r3, r9
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	00eb      	lsls	r3, r5, #3
 80031d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031dc:	00e2      	lsls	r2, r4, #3
 80031de:	4614      	mov	r4, r2
 80031e0:	461d      	mov	r5, r3
 80031e2:	eb14 030a 	adds.w	r3, r4, sl
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	eb45 030b 	adc.w	r3, r5, fp
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	2200      	movs	r2, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003218:	f7fc ffe2 	bl	80001e0 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_GetSysClockFreq+0x180>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetSysClockFreq+0x184>)
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003248:	4618      	mov	r0, r3
 800324a:	3740      	adds	r7, #64	; 0x40
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	017d7840 	.word	0x017d7840

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	0800812c 	.word	0x0800812c

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	0800812c 	.word	0x0800812c

080032c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	220f      	movs	r2, #15
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCC_GetClockConfig+0x5c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0203 	and.w	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCC_GetClockConfig+0x60>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0207 	and.w	r2, r3, #7
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07b      	b.n	8003436 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334e:	d009      	beq.n	8003364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	61da      	str	r2, [r3, #28]
 8003356:	e005      	b.n	8003364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fe66 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	ea42 0103 	orr.w	r1, r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0104 	and.w	r1, r3, #4
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0210 	and.w	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003424:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b088      	sub	sp, #32
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_SPI_Transmit+0x22>
 800345c:	2302      	movs	r3, #2
 800345e:	e126      	b.n	80036ae <HAL_SPI_Transmit+0x270>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003468:	f7fe fab6 	bl	80019d8 <HAL_GetTick>
 800346c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800347e:	2302      	movs	r3, #2
 8003480:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003482:	e10b      	b.n	800369c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Transmit+0x52>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003494:	e102      	b.n	800369c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d10f      	bne.n	80034fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d007      	beq.n	800351c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003524:	d14b      	bne.n	80035be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0xf6>
 800352e:	8afb      	ldrh	r3, [r7, #22]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d13e      	bne.n	80035b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003558:	e02b      	b.n	80035b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d112      	bne.n	800358e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	; 0x36
 800358c:	e011      	b.n	80035b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358e:	f7fe fa23 	bl	80019d8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_Transmit+0x168>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x16e>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b0:	e074      	b.n	800369c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ce      	bne.n	800355a <HAL_SPI_Transmit+0x11c>
 80035bc:	e04c      	b.n	8003658 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Transmit+0x18e>
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d140      	bne.n	800364e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035f2:	e02c      	b.n	800364e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d113      	bne.n	800362a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	86da      	strh	r2, [r3, #54]	; 0x36
 8003628:	e011      	b.n	800364e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362a:	f7fe f9d5 	bl	80019d8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d803      	bhi.n	8003642 <HAL_SPI_Transmit+0x204>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d102      	bne.n	8003648 <HAL_SPI_Transmit+0x20a>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800364c:	e026      	b.n	800369c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1cd      	bne.n	80035f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fa55 	bl	8003b0c <SPI_EndRxTxTransaction>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e000      	b.n	800369c <HAL_SPI_Transmit+0x25e>
  }

error:
 800369a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b08c      	sub	sp, #48	; 0x30
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036c4:	2301      	movs	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x26>
 80036d8:	2302      	movs	r3, #2
 80036da:	e18a      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x33c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e4:	f7fe f978 	bl	80019d8 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003702:	2b01      	cmp	r3, #1
 8003704:	d00f      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x70>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370c:	d107      	bne.n	800371e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_SPI_TransmitReceive+0x68>
 8003716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003724:	e15b      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x82>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x82>
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800373e:	e14e      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b04      	cmp	r3, #4
 800374a:	d003      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2205      	movs	r2, #5
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b0:	d178      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x10a>
 80037ba:	8b7b      	ldrh	r3, [r7, #26]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d166      	bne.n	800388e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e4:	e053      	b.n	800388e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11b      	bne.n	800382c <HAL_SPI_TransmitReceive+0x176>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_SPI_TransmitReceive+0x176>
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d113      	bne.n	800382c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d119      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1b8>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d014      	beq.n	800386e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	b292      	uxth	r2, r2
 8003850:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800386a:	2301      	movs	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800386e:	f7fe f8b3 	bl	80019d8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387a:	429a      	cmp	r2, r3
 800387c:	d807      	bhi.n	800388e <HAL_SPI_TransmitReceive+0x1d8>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003884:	d003      	beq.n	800388e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800388c:	e0a7      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1a6      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x130>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1a1      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x130>
 80038a2:	e07c      	b.n	800399e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x1fc>
 80038ac:	8b7b      	ldrh	r3, [r7, #26]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d16b      	bne.n	800398a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	7812      	ldrb	r2, [r2, #0]
 80038be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d8:	e057      	b.n	800398a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d11c      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x26c>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x26c>
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d114      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	7812      	ldrb	r2, [r2, #0]
 8003904:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d119      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x2ae>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d014      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003960:	2301      	movs	r3, #1
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003964:	f7fe f838 	bl	80019d8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003970:	429a      	cmp	r2, r3
 8003972:	d803      	bhi.n	800397c <HAL_SPI_TransmitReceive+0x2c6>
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397a:	d102      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x2cc>
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003988:	e029      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1a2      	bne.n	80038da <HAL_SPI_TransmitReceive+0x224>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d19d      	bne.n	80038da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8b2 	bl	8003b0c <SPI_EndRxTxTransaction>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039ba:	e010      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	e000      	b.n	80039de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3730      	adds	r7, #48	; 0x30
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a0c:	f7fd ffe4 	bl	80019d8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4413      	add	r3, r2
 8003a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a1c:	f7fd ffdc 	bl	80019d8 <HAL_GetTick>
 8003a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	015b      	lsls	r3, r3, #5
 8003a28:	0d1b      	lsrs	r3, r3, #20
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a32:	e054      	b.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d050      	beq.n	8003ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a3c:	f7fd ffcc 	bl	80019d8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d902      	bls.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d13d      	bne.n	8003ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6a:	d111      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	d004      	beq.n	8003a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	d107      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a98:	d10f      	bne.n	8003aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e017      	b.n	8003afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d19b      	bne.n	8003a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000000 	.word	0x20000000

08003b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <SPI_EndRxTxTransaction+0x7c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <SPI_EndRxTxTransaction+0x80>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0d5b      	lsrs	r3, r3, #21
 8003b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b28:	fb02 f303 	mul.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b36:	d112      	bne.n	8003b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff ff5a 	bl	80039fc <SPI_WaitFlagStateUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00f      	b.n	8003b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d0f2      	beq.n	8003b5e <SPI_EndRxTxTransaction+0x52>
 8003b78:	e000      	b.n	8003b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8003b7a:	bf00      	nop
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	165e9f81 	.word	0x165e9f81

08003b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e041      	b.n	8003c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f839 	bl	8003c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fbf0 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e044      	b.n	8003ce6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d013      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_TIM_Base_Start_IT+0xb8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <HAL_TIM_Base_Start_IT+0xc0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d111      	bne.n	8003cd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d010      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	e007      	b.n	8003ce4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40014000 	.word	0x40014000

08003d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e041      	b.n	8003d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd f9d6 	bl	80010e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4610      	mov	r0, r2
 8003d48:	f000 fb34 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_PWM_Start+0x24>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e022      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x3e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e015      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x58>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e008      	b.n	8003e12 <HAL_TIM_PWM_Start+0x6a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e068      	b.n	8003eec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e28:	e013      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0x92>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	e00b      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_PWM_Start+0xa2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e003      	b.n	8003e52 <HAL_TIM_PWM_Start+0xaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fcb6 	bl	80047cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_TIM_PWM_Start+0x14c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d107      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_TIM_PWM_Start+0x14c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d018      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x10e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d013      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x10e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_TIM_PWM_Start+0x150>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x10e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_TIM_PWM_Start+0x154>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x10e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <HAL_TIM_PWM_Start+0x158>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x10e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a14      	ldr	r2, [pc, #80]	; (8003f04 <HAL_TIM_PWM_Start+0x15c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d111      	bne.n	8003eda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d010      	beq.n	8003eea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	e007      	b.n	8003eea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40014000 	.word	0x40014000

08003f08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fc56 	bl	80047cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a29      	ldr	r2, [pc, #164]	; (8003fcc <HAL_TIM_PWM_Stop+0xc4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d117      	bne.n	8003f5a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_TIM_PWM_Stop+0x52>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	f240 4344 	movw	r3, #1092	; 0x444
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_PWM_Stop+0x52>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_TIM_PWM_Stop+0x82>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	f240 4344 	movw	r3, #1092	; 0x444
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_PWM_Stop+0x82>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Stop+0x92>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	e013      	b.n	8003fc2 <HAL_TIM_PWM_Stop+0xba>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Stop+0xa2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa8:	e00b      	b.n	8003fc2 <HAL_TIM_PWM_Stop+0xba>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Stop+0xb2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	e003      	b.n	8003fc2 <HAL_TIM_PWM_Stop+0xba>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0202 	mvn.w	r2, #2
 8003ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9b0 	bl	8004378 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f9a2 	bl	8004364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f9b3 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0204 	mvn.w	r2, #4
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f986 	bl	8004378 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f978 	bl	8004364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f989 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0208 	mvn.w	r2, #8
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2204      	movs	r2, #4
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f95c 	bl	8004378 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f94e 	bl	8004364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f95f 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0210 	mvn.w	r2, #16
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2208      	movs	r2, #8
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f932 	bl	8004378 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f924 	bl	8004364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f935 	bl	800438c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0201 	mvn.w	r2, #1
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc fed2 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fbc4 	bl	8004908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8fa 	bl	80043a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0220 	mvn.w	r2, #32
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fb8e 	bl	80048f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0ae      	b.n	800435c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	f200 809f 	bhi.w	800434c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004249 	.word	0x08004249
 8004218:	0800434d 	.word	0x0800434d
 800421c:	0800434d 	.word	0x0800434d
 8004220:	0800434d 	.word	0x0800434d
 8004224:	08004289 	.word	0x08004289
 8004228:	0800434d 	.word	0x0800434d
 800422c:	0800434d 	.word	0x0800434d
 8004230:	0800434d 	.word	0x0800434d
 8004234:	080042cb 	.word	0x080042cb
 8004238:	0800434d 	.word	0x0800434d
 800423c:	0800434d 	.word	0x0800434d
 8004240:	0800434d 	.word	0x0800434d
 8004244:	0800430b 	.word	0x0800430b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f930 	bl	80044b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
      break;
 8004286:	e064      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f976 	bl	8004580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]
      break;
 80042c8:	e043      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f9c1 	bl	8004658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0208 	orr.w	r2, r2, #8
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
      break;
 8004308:	e023      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fa0b 	bl	800472c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	61da      	str	r2, [r3, #28]
      break;
 800434a:	e002      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
      break;
 8004350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800435a:	7dfb      	ldrb	r3, [r7, #23]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a34      	ldr	r2, [pc, #208]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00b      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <TIM_Base_SetConfig+0xe8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <TIM_Base_SetConfig+0xe8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <TIM_Base_SetConfig+0xf4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <TIM_Base_SetConfig+0xf8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <TIM_Base_SetConfig+0xfc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1c      	ldr	r2, [pc, #112]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0308 	bic.w	r3, r3, #8
 8004516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000

08004580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0320 	bic.w	r3, r3, #32
 80045ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d113      	bne.n	800462c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800460a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40010000 	.word	0x40010000

0800472c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <TIM_OC4_SetConfig+0x9c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d109      	bne.n	80047a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000

080047cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e050      	b.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d018      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d013      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10c      	bne.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000

080048f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e03f      	b.n	80049ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fc82 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800495e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f829 	bl	80049b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049bc:	b0c0      	sub	sp, #256	; 0x100
 80049be:	af00      	add	r7, sp, #0
 80049c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	68d9      	ldr	r1, [r3, #12]
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	ea40 0301 	orr.w	r3, r0, r1
 80049e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a10:	f021 010c 	bic.w	r1, r1, #12
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	6999      	ldr	r1, [r3, #24]
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	ea40 0301 	orr.w	r3, r0, r1
 8004a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b8f      	ldr	r3, [pc, #572]	; (8004c84 <UART_SetConfig+0x2cc>)
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d005      	beq.n	8004a58 <UART_SetConfig+0xa0>
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8d      	ldr	r3, [pc, #564]	; (8004c88 <UART_SetConfig+0x2d0>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d104      	bne.n	8004a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe fc22 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8004a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a60:	e003      	b.n	8004a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a62:	f7fe fc09 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	f040 810c 	bne.w	8004c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a92:	415b      	adcs	r3, r3
 8004a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	eb12 0801 	adds.w	r8, r2, r1
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	eb43 0901 	adc.w	r9, r3, r1
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aba:	4690      	mov	r8, r2
 8004abc:	4699      	mov	r9, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	eb18 0303 	adds.w	r3, r8, r3
 8004ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ac8:	462b      	mov	r3, r5
 8004aca:	eb49 0303 	adc.w	r3, r9, r3
 8004ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	18db      	adds	r3, r3, r3
 8004aea:	653b      	str	r3, [r7, #80]	; 0x50
 8004aec:	4613      	mov	r3, r2
 8004aee:	eb42 0303 	adc.w	r3, r2, r3
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
 8004af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004afc:	f7fb fb70 	bl	80001e0 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <UART_SetConfig+0x2d4>)
 8004b06:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	011c      	lsls	r4, r3, #4
 8004b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b30:	4641      	mov	r1, r8
 8004b32:	eb12 0a01 	adds.w	sl, r2, r1
 8004b36:	4649      	mov	r1, r9
 8004b38:	eb43 0b01 	adc.w	fp, r3, r1
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b50:	4692      	mov	sl, r2
 8004b52:	469b      	mov	fp, r3
 8004b54:	4643      	mov	r3, r8
 8004b56:	eb1a 0303 	adds.w	r3, sl, r3
 8004b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	eb4b 0303 	adc.w	r3, fp, r3
 8004b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	18db      	adds	r3, r3, r3
 8004b80:	643b      	str	r3, [r7, #64]	; 0x40
 8004b82:	4613      	mov	r3, r2
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b92:	f7fb fb25 	bl	80001e0 <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <UART_SetConfig+0x2d4>)
 8004b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	2264      	movs	r2, #100	; 0x64
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	1acb      	subs	r3, r1, r3
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <UART_SetConfig+0x2d4>)
 8004bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bc0:	441c      	add	r4, r3
 8004bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004be4:	4641      	mov	r1, r8
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6339      	str	r1, [r7, #48]	; 0x30
 8004bea:	4649      	mov	r1, r9
 8004bec:	414b      	adcs	r3, r1
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	00cb      	lsls	r3, r1, #3
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c06:	4651      	mov	r1, sl
 8004c08:	00ca      	lsls	r2, r1, #3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4642      	mov	r2, r8
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c18:	464b      	mov	r3, r9
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c38:	460b      	mov	r3, r1
 8004c3a:	18db      	adds	r3, r3, r3
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3e:	4613      	mov	r3, r2
 8004c40:	eb42 0303 	adc.w	r3, r2, r3
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c4e:	f7fb fac7 	bl	80001e0 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <UART_SetConfig+0x2d4>)
 8004c58:	fba3 1302 	umull	r1, r3, r3, r2
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	2164      	movs	r1, #100	; 0x64
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	3332      	adds	r3, #50	; 0x32
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <UART_SetConfig+0x2d4>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	f003 0207 	and.w	r2, r3, #7
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4422      	add	r2, r4
 8004c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c80:	e105      	b.n	8004e8e <UART_SetConfig+0x4d6>
 8004c82:	bf00      	nop
 8004c84:	40011000 	.word	0x40011000
 8004c88:	40011400 	.word	0x40011400
 8004c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ca2:	4642      	mov	r2, r8
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	1891      	adds	r1, r2, r2
 8004ca8:	6239      	str	r1, [r7, #32]
 8004caa:	415b      	adcs	r3, r3
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cb2:	4641      	mov	r1, r8
 8004cb4:	1854      	adds	r4, r2, r1
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	eb43 0501 	adc.w	r5, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	00eb      	lsls	r3, r5, #3
 8004cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cca:	00e2      	lsls	r2, r4, #3
 8004ccc:	4614      	mov	r4, r2
 8004cce:	461d      	mov	r5, r3
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	18e3      	adds	r3, r4, r3
 8004cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd8:	464b      	mov	r3, r9
 8004cda:	eb45 0303 	adc.w	r3, r5, r3
 8004cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cfe:	4629      	mov	r1, r5
 8004d00:	008b      	lsls	r3, r1, #2
 8004d02:	4621      	mov	r1, r4
 8004d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d08:	4621      	mov	r1, r4
 8004d0a:	008a      	lsls	r2, r1, #2
 8004d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d10:	f7fb fa66 	bl	80001e0 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <UART_SetConfig+0x4e4>)
 8004d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	011c      	lsls	r4, r3, #4
 8004d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d34:	4642      	mov	r2, r8
 8004d36:	464b      	mov	r3, r9
 8004d38:	1891      	adds	r1, r2, r2
 8004d3a:	61b9      	str	r1, [r7, #24]
 8004d3c:	415b      	adcs	r3, r3
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d44:	4641      	mov	r1, r8
 8004d46:	1851      	adds	r1, r2, r1
 8004d48:	6139      	str	r1, [r7, #16]
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	414b      	adcs	r3, r1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	00cb      	lsls	r3, r1, #3
 8004d60:	4651      	mov	r1, sl
 8004d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d66:	4651      	mov	r1, sl
 8004d68:	00ca      	lsls	r2, r1, #3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4642      	mov	r2, r8
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d78:	464b      	mov	r3, r9
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	eb42 0303 	adc.w	r3, r2, r3
 8004d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	008b      	lsls	r3, r1, #2
 8004da0:	4641      	mov	r1, r8
 8004da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004da6:	4641      	mov	r1, r8
 8004da8:	008a      	lsls	r2, r1, #2
 8004daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dae:	f7fb fa17 	bl	80001e0 <__aeabi_uldivmod>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <UART_SetConfig+0x4e4>)
 8004db8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	2164      	movs	r1, #100	; 0x64
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	3332      	adds	r3, #50	; 0x32
 8004dca:	4a34      	ldr	r2, [pc, #208]	; (8004e9c <UART_SetConfig+0x4e4>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd6:	441c      	add	r4, r3
 8004dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ddc:	2200      	movs	r2, #0
 8004dde:	673b      	str	r3, [r7, #112]	; 0x70
 8004de0:	677a      	str	r2, [r7, #116]	; 0x74
 8004de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004de6:	4642      	mov	r2, r8
 8004de8:	464b      	mov	r3, r9
 8004dea:	1891      	adds	r1, r2, r2
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	415b      	adcs	r3, r3
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df6:	4641      	mov	r1, r8
 8004df8:	1851      	adds	r1, r2, r1
 8004dfa:	6039      	str	r1, [r7, #0]
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	414b      	adcs	r3, r1
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e0e:	4659      	mov	r1, fp
 8004e10:	00cb      	lsls	r3, r1, #3
 8004e12:	4651      	mov	r1, sl
 8004e14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e18:	4651      	mov	r1, sl
 8004e1a:	00ca      	lsls	r2, r1, #3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4603      	mov	r3, r0
 8004e22:	4642      	mov	r2, r8
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e28:	464b      	mov	r3, r9
 8004e2a:	460a      	mov	r2, r1
 8004e2c:	eb42 0303 	adc.w	r3, r2, r3
 8004e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	008b      	lsls	r3, r1, #2
 8004e4e:	4641      	mov	r1, r8
 8004e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e54:	4641      	mov	r1, r8
 8004e56:	008a      	lsls	r2, r1, #2
 8004e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e5c:	f7fb f9c0 	bl	80001e0 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <UART_SetConfig+0x4e4>)
 8004e66:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2164      	movs	r1, #100	; 0x64
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	; 0x32
 8004e78:	4a08      	ldr	r2, [pc, #32]	; (8004e9c <UART_SetConfig+0x4e4>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4422      	add	r2, r4
 8004e8c:	609a      	str	r2, [r3, #8]
}
 8004e8e:	bf00      	nop
 8004e90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e94:	46bd      	mov	sp, r7
 8004e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9a:	bf00      	nop
 8004e9c:	51eb851f 	.word	0x51eb851f

08004ea0 <__NVIC_SetPriority>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	6039      	str	r1, [r7, #0]
 8004eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	db0a      	blt.n	8004eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	490c      	ldr	r1, [pc, #48]	; (8004eec <__NVIC_SetPriority+0x4c>)
 8004eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ec8:	e00a      	b.n	8004ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <__NVIC_SetPriority+0x50>)
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	3b04      	subs	r3, #4
 8004ed8:	0112      	lsls	r2, r2, #4
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	440b      	add	r3, r1
 8004ede:	761a      	strb	r2, [r3, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	e000e100 	.word	0xe000e100
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <SysTick_Handler+0x1c>)
 8004efa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004efc:	f001 ff16 	bl	8006d2c <xTaskGetSchedulerState>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d001      	beq.n	8004f0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f06:	f002 fcff 	bl	8007908 <xPortSysTickHandler>
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010

08004f14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f06f 0004 	mvn.w	r0, #4
 8004f1e:	f7ff ffbf 	bl	8004ea0 <__NVIC_SetPriority>
#endif
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2e:	f3ef 8305 	mrs	r3, IPSR
 8004f32:	603b      	str	r3, [r7, #0]
  return(result);
 8004f34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f3a:	f06f 0305 	mvn.w	r3, #5
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	e00c      	b.n	8004f5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <osKernelInitialize+0x44>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <osKernelInitialize+0x44>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e002      	b.n	8004f5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f5c:	687b      	ldr	r3, [r7, #4]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	2000026c 	.word	0x2000026c

08004f70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f76:	f3ef 8305 	mrs	r3, IPSR
 8004f7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f82:	f06f 0305 	mvn.w	r3, #5
 8004f86:	607b      	str	r3, [r7, #4]
 8004f88:	e010      	b.n	8004fac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <osKernelStart+0x48>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d109      	bne.n	8004fa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f92:	f7ff ffbf 	bl	8004f14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <osKernelStart+0x48>)
 8004f98:	2202      	movs	r2, #2
 8004f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f9c:	f001 fa6a 	bl	8006474 <vTaskStartScheduler>
      stat = osOK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	e002      	b.n	8004fac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2000026c 	.word	0x2000026c

08004fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fcc:	f3ef 8305 	mrs	r3, IPSR
 8004fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d17e      	bne.n	80050d6 <osThreadNew+0x11a>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d07b      	beq.n	80050d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fe2:	2318      	movs	r3, #24
 8004fe4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d045      	beq.n	8005082 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <osThreadNew+0x48>
        name = attr->name;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <osThreadNew+0x6e>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b38      	cmp	r3, #56	; 0x38
 800501c:	d805      	bhi.n	800502a <osThreadNew+0x6e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <osThreadNew+0x72>
        return (NULL);
 800502a:	2300      	movs	r3, #0
 800502c:	e054      	b.n	80050d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <osThreadNew+0xa8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2bbb      	cmp	r3, #187	; 0xbb
 800504c:	d90a      	bls.n	8005064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <osThreadNew+0xa8>
        mem = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e010      	b.n	8005086 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <osThreadNew+0xca>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <osThreadNew+0xca>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <osThreadNew+0xca>
          mem = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e001      	b.n	8005086 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d110      	bne.n	80050ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005094:	9202      	str	r2, [sp, #8]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fffa 	bl	800609c <xTaskCreateStatic>
 80050a8:	4603      	mov	r3, r0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e013      	b.n	80050d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d110      	bne.n	80050d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f001 f845 	bl	8006156 <xTaskCreate>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <osThreadNew+0x11a>
            hTask = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050d6:	693b      	ldr	r3, [r7, #16]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	; 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e8:	f3ef 8305 	mrs	r3, IPSR
 80050ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <osDelay+0x1c>
    stat = osErrorISR;
 80050f4:	f06f 0305 	mvn.w	r3, #5
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e007      	b.n	800510c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 f980 	bl	800640c <vTaskDelay>
    }
  }

  return (stat);
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005116:	b580      	push	{r7, lr}
 8005118:	b08a      	sub	sp, #40	; 0x28
 800511a:	af02      	add	r7, sp, #8
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005126:	f3ef 8305 	mrs	r3, IPSR
 800512a:	613b      	str	r3, [r7, #16]
  return(result);
 800512c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800512e:	2b00      	cmp	r3, #0
 8005130:	d175      	bne.n	800521e <osSemaphoreNew+0x108>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d072      	beq.n	800521e <osSemaphoreNew+0x108>
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	429a      	cmp	r2, r3
 800513e:	d86e      	bhi.n	800521e <osSemaphoreNew+0x108>
    mem = -1;
 8005140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005144:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <osSemaphoreNew+0x4c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b4f      	cmp	r3, #79	; 0x4f
 800515a:	d902      	bls.n	8005162 <osSemaphoreNew+0x4c>
        mem = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	e00c      	b.n	800517c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <osSemaphoreNew+0x66>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <osSemaphoreNew+0x66>
          mem = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e001      	b.n	800517c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005182:	d04c      	beq.n	800521e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d128      	bne.n	80051dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10a      	bne.n	80051a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2203      	movs	r2, #3
 8005196:	9200      	str	r2, [sp, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	2100      	movs	r1, #0
 800519c:	2001      	movs	r0, #1
 800519e:	f000 fa07 	bl	80055b0 <xQueueGenericCreateStatic>
 80051a2:	61f8      	str	r0, [r7, #28]
 80051a4:	e005      	b.n	80051b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80051a6:	2203      	movs	r2, #3
 80051a8:	2100      	movs	r1, #0
 80051aa:	2001      	movs	r0, #1
 80051ac:	f000 fa78 	bl	80056a0 <xQueueGenericCreate>
 80051b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d022      	beq.n	80051fe <osSemaphoreNew+0xe8>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01f      	beq.n	80051fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051be:	2300      	movs	r3, #0
 80051c0:	2200      	movs	r2, #0
 80051c2:	2100      	movs	r1, #0
 80051c4:	69f8      	ldr	r0, [r7, #28]
 80051c6:	f000 fb33 	bl	8005830 <xQueueGenericSend>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d016      	beq.n	80051fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80051d0:	69f8      	ldr	r0, [r7, #28]
 80051d2:	f000 fda7 	bl	8005d24 <vQueueDelete>
            hSemaphore = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e010      	b.n	80051fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d108      	bne.n	80051f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fab5 	bl	800575a <xQueueCreateCountingSemaphoreStatic>
 80051f0:	61f8      	str	r0, [r7, #28]
 80051f2:	e004      	b.n	80051fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fae6 	bl	80057c8 <xQueueCreateCountingSemaphore>
 80051fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <osSemaphoreNew+0xfc>
          name = attr->name;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e001      	b.n	8005216 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005216:	6979      	ldr	r1, [r7, #20]
 8005218:	69f8      	ldr	r0, [r7, #28]
 800521a:	f000 feb7 	bl	8005f8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800521e:	69fb      	ldr	r3, [r7, #28]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005238:	f3ef 8305 	mrs	r3, IPSR
 800523c:	613b      	str	r3, [r7, #16]
  return(result);
 800523e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005240:	2b00      	cmp	r3, #0
 8005242:	d15f      	bne.n	8005304 <osMessageQueueNew+0xdc>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d05c      	beq.n	8005304 <osMessageQueueNew+0xdc>
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d059      	beq.n	8005304 <osMessageQueueNew+0xdc>
    mem = -1;
 8005250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005254:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d029      	beq.n	80052b0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <osMessageQueueNew+0x62>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b4f      	cmp	r3, #79	; 0x4f
 800526a:	d90e      	bls.n	800528a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <osMessageQueueNew+0x62>
        mem = 1;
 8005284:	2301      	movs	r3, #1
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e014      	b.n	80052b4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d110      	bne.n	80052b4 <osMessageQueueNew+0x8c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10c      	bne.n	80052b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <osMessageQueueNew+0x8c>
          mem = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e001      	b.n	80052b4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10b      	bne.n	80052d2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2100      	movs	r1, #0
 80052c4:	9100      	str	r1, [sp, #0]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f971 	bl	80055b0 <xQueueGenericCreateStatic>
 80052ce:	61f8      	str	r0, [r7, #28]
 80052d0:	e008      	b.n	80052e4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80052d8:	2200      	movs	r2, #0
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f9df 	bl	80056a0 <xQueueGenericCreate>
 80052e2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e001      	b.n	80052fc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	69f8      	ldr	r0, [r7, #28]
 8005300:	f000 fe44 	bl	8005f8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005304:	69fb      	ldr	r3, [r7, #28]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a07      	ldr	r2, [pc, #28]	; (800533c <vApplicationGetIdleTaskMemory+0x2c>)
 8005320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a06      	ldr	r2, [pc, #24]	; (8005340 <vApplicationGetIdleTaskMemory+0x30>)
 8005326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000270 	.word	0x20000270
 8005340:	2000032c 	.word	0x2000032c

08005344 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a07      	ldr	r2, [pc, #28]	; (8005370 <vApplicationGetTimerTaskMemory+0x2c>)
 8005354:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a06      	ldr	r2, [pc, #24]	; (8005374 <vApplicationGetTimerTaskMemory+0x30>)
 800535a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	2000052c 	.word	0x2000052c
 8005374:	200005e8 	.word	0x200005e8

08005378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f103 0208 	add.w	r2, r3, #8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f103 0208 	add.w	r2, r3, #8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f103 0208 	add.w	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005430:	d103      	bne.n	800543a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e00c      	b.n	8005454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3308      	adds	r3, #8
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e002      	b.n	8005448 <vListInsert+0x2e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	d2f6      	bcs.n	8005442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6892      	ldr	r2, [r2, #8]
 80054a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6852      	ldr	r2, [r2, #4]
 80054ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d103      	bne.n	80054c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10a      	bne.n	800550a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800550a:	f002 f96b 	bl	80077e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	441a      	add	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	3b01      	subs	r3, #1
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	22ff      	movs	r2, #255	; 0xff
 800554e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	22ff      	movs	r2, #255	; 0xff
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d114      	bne.n	800558a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01a      	beq.n	800559e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f001 fa1b 	bl	80069a8 <xTaskRemoveFromEventList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d012      	beq.n	800559e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <xQueueGenericReset+0xcc>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	e009      	b.n	800559e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3310      	adds	r3, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fef2 	bl	8005378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3324      	adds	r3, #36	; 0x24
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff feed 	bl	8005378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800559e:	f002 f951 	bl	8007844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055a2:	2301      	movs	r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08e      	sub	sp, #56	; 0x38
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <xQueueGenericCreateStatic+0x52>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <xQueueGenericCreateStatic+0x56>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <xQueueGenericCreateStatic+0x58>
 8005606:	2300      	movs	r3, #0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	623b      	str	r3, [r7, #32]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <xQueueGenericCreateStatic+0x7e>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <xQueueGenericCreateStatic+0x82>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueGenericCreateStatic+0x84>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	61fb      	str	r3, [r7, #28]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800564e:	2350      	movs	r3, #80	; 0x50
 8005650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b50      	cmp	r3, #80	; 0x50
 8005656:	d00a      	beq.n	800566e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	61bb      	str	r3, [r7, #24]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800566e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4613      	mov	r3, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f83f 	bl	8005714 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005698:	4618      	mov	r0, r3
 800569a:	3730      	adds	r7, #48	; 0x30
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	613b      	str	r3, [r7, #16]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3350      	adds	r3, #80	; 0x50
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 f9a5 	bl	8007a28 <pvPortMalloc>
 80056de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3350      	adds	r3, #80	; 0x50
 80056ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056f8:	79fa      	ldrb	r2, [r7, #7]
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f805 	bl	8005714 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800570a:	69bb      	ldr	r3, [r7, #24]
	}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e002      	b.n	8005736 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005742:	2101      	movs	r1, #1
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f7ff fecb 	bl	80054e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800575a:	b580      	push	{r7, lr}
 800575c:	b08a      	sub	sp, #40	; 0x28
 800575e:	af02      	add	r7, sp, #8
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61bb      	str	r3, [r7, #24]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	429a      	cmp	r2, r3
 8005788:	d90a      	bls.n	80057a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	617b      	str	r3, [r7, #20]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057a0:	2302      	movs	r3, #2
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f7ff ff00 	bl	80055b0 <xQueueGenericCreateStatic>
 80057b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057be:	69fb      	ldr	r3, [r7, #28]
	}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	613b      	str	r3, [r7, #16]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d90a      	bls.n	800580c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	60fb      	str	r3, [r7, #12]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800580c:	2202      	movs	r2, #2
 800580e:	2100      	movs	r1, #0
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff ff45 	bl	80056a0 <xQueueGenericCreate>
 8005816:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005824:	697b      	ldr	r3, [r7, #20]
	}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800583e:	2300      	movs	r3, #0
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericSend+0x32>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <xQueueGenericSend+0x40>
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <xQueueGenericSend+0x44>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <xQueueGenericSend+0x46>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <xQueueGenericSend+0x60>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d103      	bne.n	800589e <xQueueGenericSend+0x6e>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <xQueueGenericSend+0x72>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericSend+0x74>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xQueueGenericSend+0x8e>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	623b      	str	r3, [r7, #32]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058be:	f001 fa35 	bl	8006d2c <xTaskGetSchedulerState>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <xQueueGenericSend+0x9e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <xQueueGenericSend+0xa2>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <xQueueGenericSend+0xa4>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericSend+0xbe>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	61fb      	str	r3, [r7, #28]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058ee:	f001 ff79 	bl	80077e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <xQueueGenericSend+0xd4>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d129      	bne.n	8005958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800590a:	f000 fa2e 	bl	8005d6a <prvCopyDataToQueue>
 800590e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	3324      	adds	r3, #36	; 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f843 	bl	80069a8 <xTaskRemoveFromEventList>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005928:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <xQueueGenericSend+0x1f8>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	e00a      	b.n	8005950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005940:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <xQueueGenericSend+0x1f8>)
 8005942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005950:	f001 ff78 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 8005954:	2301      	movs	r3, #1
 8005956:	e063      	b.n	8005a20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800595e:	f001 ff71 	bl	8007844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005962:	2300      	movs	r3, #0
 8005964:	e05c      	b.n	8005a20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f87d 	bl	8006a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005976:	2301      	movs	r3, #1
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800597a:	f001 ff63 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800597e:	f000 fde9 	bl	8006554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005982:	f001 ff2f 	bl	80077e4 <vPortEnterCritical>
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800598c:	b25b      	sxtb	r3, r3
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005992:	d103      	bne.n	800599c <xQueueGenericSend+0x16c>
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a8:	d103      	bne.n	80059b2 <xQueueGenericSend+0x182>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b2:	f001 ff47 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059b6:	1d3a      	adds	r2, r7, #4
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 f86c 	bl	8006a9c <xTaskCheckForTimeOut>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d124      	bne.n	8005a14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059cc:	f000 fac5 	bl	8005f5a <prvIsQueueFull>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	3310      	adds	r3, #16
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 ff92 	bl	8006908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e6:	f000 fa50 	bl	8005e8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059ea:	f000 fdc1 	bl	8006570 <xTaskResumeAll>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f47f af7c 	bne.w	80058ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <xQueueGenericSend+0x1f8>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e772      	b.n	80058ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0a:	f000 fa3e 	bl	8005e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a0e:	f000 fdaf 	bl	8006570 <xTaskResumeAll>
 8005a12:	e76c      	b.n	80058ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a16:	f000 fa38 	bl	8005e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a1a:	f000 fda9 	bl	8006570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3738      	adds	r7, #56	; 0x38
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b090      	sub	sp, #64	; 0x40
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10a      	bne.n	8005a5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <xQueueGenericSendFromISR+0x3c>
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <xQueueGenericSendFromISR+0x40>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <xQueueGenericSendFromISR+0x42>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d103      	bne.n	8005a96 <xQueueGenericSendFromISR+0x6a>
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <xQueueGenericSendFromISR+0x6e>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <xQueueGenericSendFromISR+0x70>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	623b      	str	r3, [r7, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ab6:	f001 ff77 	bl	80079a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aba:	f3ef 8211 	mrs	r2, BASEPRI
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61fa      	str	r2, [r7, #28]
 8005ad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <xQueueGenericSendFromISR+0xbc>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d12f      	bne.n	8005b48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005afe:	f000 f934 	bl	8005d6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0a:	d112      	bne.n	8005b32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d016      	beq.n	8005b42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	3324      	adds	r3, #36	; 0x24
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 ff45 	bl	80069a8 <xTaskRemoveFromEventList>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e007      	b.n	8005b42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b36:	3301      	adds	r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	b25a      	sxtb	r2, r3
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b42:	2301      	movs	r3, #1
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b46:	e001      	b.n	8005b4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3740      	adds	r7, #64	; 0x40
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xQueueReceive+0x30>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	623b      	str	r3, [r7, #32]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <xQueueReceive+0x3e>
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <xQueueReceive+0x42>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueReceive+0x44>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xQueueReceive+0x5e>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	61fb      	str	r3, [r7, #28]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc2:	f001 f8b3 	bl	8006d2c <xTaskGetSchedulerState>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <xQueueReceive+0x6e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <xQueueReceive+0x72>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueReceive+0x74>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueReceive+0x8e>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	61bb      	str	r3, [r7, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf2:	f001 fdf7 	bl	80077e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01f      	beq.n	8005c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c06:	f000 f91a 	bl	8005e3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1e5a      	subs	r2, r3, #1
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fec2 	bl	80069a8 <xTaskRemoveFromEventList>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c2a:	4b3d      	ldr	r3, [pc, #244]	; (8005d20 <xQueueReceive+0x1bc>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c3a:	f001 fe03 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e069      	b.n	8005d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c48:	f001 fdfc 	bl	8007844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e062      	b.n	8005d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 ff08 	bl	8006a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c64:	f001 fdee 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c68:	f000 fc74 	bl	8006554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c6c:	f001 fdba 	bl	80077e4 <vPortEnterCritical>
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7c:	d103      	bne.n	8005c86 <xQueueReceive+0x122>
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c92:	d103      	bne.n	8005c9c <xQueueReceive+0x138>
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9c:	f001 fdd2 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ca0:	1d3a      	adds	r2, r7, #4
 8005ca2:	f107 0310 	add.w	r3, r7, #16
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fef7 	bl	8006a9c <xTaskCheckForTimeOut>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d123      	bne.n	8005cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb6:	f000 f93a 	bl	8005f2e <prvIsQueueEmpty>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d017      	beq.n	8005cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	3324      	adds	r3, #36	; 0x24
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fe1d 	bl	8006908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd0:	f000 f8db 	bl	8005e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cd4:	f000 fc4c 	bl	8006570 <xTaskResumeAll>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d189      	bne.n	8005bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005cde:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xQueueReceive+0x1bc>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	e780      	b.n	8005bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf2:	f000 f8ca 	bl	8005e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cf6:	f000 fc3b 	bl	8006570 <xTaskResumeAll>
 8005cfa:	e77a      	b.n	8005bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f000 f8c4 	bl	8005e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d02:	f000 fc35 	bl	8006570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d08:	f000 f911 	bl	8005f2e <prvIsQueueEmpty>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f43f af6f 	beq.w	8005bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3730      	adds	r7, #48	; 0x30
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000ed04 	.word	0xe000ed04

08005d24 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <vQueueDelete+0x28>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60bb      	str	r3, [r7, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f947 	bl	8005fe0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f001 ff2f 	bl	8007bc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d14d      	bne.n	8005e2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 ffe7 	bl	8006d68 <xTaskPriorityDisinherit>
 8005d9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
 8005da2:	e043      	b.n	8005e2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d119      	bne.n	8005dde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6858      	ldr	r0, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	461a      	mov	r2, r3
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	f002 f847 	bl	8007e48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d32b      	bcc.n	8005e2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	e026      	b.n	8005e2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68d8      	ldr	r0, [r3, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	461a      	mov	r2, r3
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	f002 f82d 	bl	8007e48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	425b      	negs	r3, r3
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d207      	bcs.n	8005e1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	425b      	negs	r3, r3
 8005e14:	441a      	add	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d105      	bne.n	8005e2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d018      	beq.n	8005e82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	441a      	add	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d303      	bcc.n	8005e72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68d9      	ldr	r1, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6838      	ldr	r0, [r7, #0]
 8005e7e:	f001 ffe3 	bl	8007e48 <memcpy>
	}
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e92:	f001 fca7 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e9e:	e011      	b.n	8005ec4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fd7b 	bl	80069a8 <xTaskRemoveFromEventList>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eb8:	f000 fe52 	bl	8006b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dce9      	bgt.n	8005ea0 <prvUnlockQueue+0x16>
 8005ecc:	e000      	b.n	8005ed0 <prvUnlockQueue+0x46>
					break;
 8005ece:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	22ff      	movs	r2, #255	; 0xff
 8005ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ed8:	f001 fcb4 	bl	8007844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005edc:	f001 fc82 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ee8:	e011      	b.n	8005f0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d012      	beq.n	8005f18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fd56 	bl	80069a8 <xTaskRemoveFromEventList>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f02:	f000 fe2d 	bl	8006b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dce9      	bgt.n	8005eea <prvUnlockQueue+0x60>
 8005f16:	e000      	b.n	8005f1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f22:	f001 fc8f 	bl	8007844 <vPortExitCritical>
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f36:	f001 fc55 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f42:	2301      	movs	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e001      	b.n	8005f4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f4c:	f001 fc7a 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f62:	f001 fc3f 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d102      	bne.n	8005f78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e001      	b.n	8005f7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f7c:	f001 fc62 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e014      	b.n	8005fc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f9c:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <vQueueAddToRegistry+0x50>)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fa8:	490c      	ldr	r1, [pc, #48]	; (8005fdc <vQueueAddToRegistry+0x50>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <vQueueAddToRegistry+0x50>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fbe:	e006      	b.n	8005fce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	d9e7      	bls.n	8005f9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	200009e8 	.word	0x200009e8

08005fe0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	e016      	b.n	800601c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005fee:	4a10      	ldr	r2, [pc, #64]	; (8006030 <vQueueUnregisterQueue+0x50>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d10b      	bne.n	8006016 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <vQueueUnregisterQueue+0x50>)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2100      	movs	r1, #0
 8006004:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <vQueueUnregisterQueue+0x50>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	2200      	movs	r2, #0
 8006012:	605a      	str	r2, [r3, #4]
				break;
 8006014:	e006      	b.n	8006024 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b07      	cmp	r3, #7
 8006020:	d9e5      	bls.n	8005fee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	200009e8 	.word	0x200009e8

08006034 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006044:	f001 fbce 	bl	80077e4 <vPortEnterCritical>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006054:	d103      	bne.n	800605e <vQueueWaitForMessageRestricted+0x2a>
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006064:	b25b      	sxtb	r3, r3
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800606a:	d103      	bne.n	8006074 <vQueueWaitForMessageRestricted+0x40>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006074:	f001 fbe6 	bl	8007844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3324      	adds	r3, #36	; 0x24
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fc61 	bl	8006950 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f7ff fefb 	bl	8005e8a <prvUnlockQueue>
	}
 8006094:	bf00      	nop
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	; 0x38
 80060a0:	af04      	add	r7, sp, #16
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61fb      	str	r3, [r7, #28]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060e2:	23bc      	movs	r3, #188	; 0xbc
 80060e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2bbc      	cmp	r3, #188	; 0xbc
 80060ea:	d00a      	beq.n	8006102 <xTaskCreateStatic+0x66>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	61bb      	str	r3, [r7, #24]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006102:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01e      	beq.n	8006148 <xTaskCreateStatic+0xac>
 800610a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006118:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2202      	movs	r2, #2
 800611e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006122:	2300      	movs	r3, #0
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f850 	bl	80061e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006142:	f000 f8f3 	bl	800632c <prvAddNewTaskToReadyList>
 8006146:	e001      	b.n	800614c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800614c:	697b      	ldr	r3, [r7, #20]
	}
 800614e:	4618      	mov	r0, r3
 8006150:	3728      	adds	r7, #40	; 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006156:	b580      	push	{r7, lr}
 8006158:	b08c      	sub	sp, #48	; 0x30
 800615a:	af04      	add	r7, sp, #16
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fc5c 	bl	8007a28 <pvPortMalloc>
 8006170:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006178:	20bc      	movs	r0, #188	; 0xbc
 800617a:	f001 fc55 	bl	8007a28 <pvPortMalloc>
 800617e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
 800618c:	e005      	b.n	800619a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800618e:	6978      	ldr	r0, [r7, #20]
 8006190:	f001 fd16 	bl	8007bc0 <vPortFree>
 8006194:	e001      	b.n	800619a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d017      	beq.n	80061d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f80e 	bl	80061e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061c4:	69f8      	ldr	r0, [r7, #28]
 80061c6:	f000 f8b1 	bl	800632c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061ca:	2301      	movs	r3, #1
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e002      	b.n	80061d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061d6:	69bb      	ldr	r3, [r7, #24]
	}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	461a      	mov	r2, r3
 80061f8:	21a5      	movs	r1, #165	; 0xa5
 80061fa:	f001 fe33 	bl	8007e64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006208:	3b01      	subs	r3, #1
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	617b      	str	r3, [r7, #20]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01f      	beq.n	800627e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	e012      	b.n	800626a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	7819      	ldrb	r1, [r3, #0]
 800624c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	3334      	adds	r3, #52	; 0x34
 8006254:	460a      	mov	r2, r1
 8006256:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d006      	beq.n	8006272 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b0f      	cmp	r3, #15
 800626e:	d9e9      	bls.n	8006244 <prvInitialiseNewTask+0x64>
 8006270:	e000      	b.n	8006274 <prvInitialiseNewTask+0x94>
			{
				break;
 8006272:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800627c:	e003      	b.n	8006286 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	2b37      	cmp	r3, #55	; 0x37
 800628a:	d901      	bls.n	8006290 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800628c:	2337      	movs	r3, #55	; 0x37
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006294:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff f886 	bl	80053b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	3318      	adds	r3, #24
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff f881 	bl	80053b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	3354      	adds	r3, #84	; 0x54
 80062e0:	2260      	movs	r2, #96	; 0x60
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 fdbd 	bl	8007e64 <memset>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	4a0c      	ldr	r2, [pc, #48]	; (8006320 <prvInitialiseNewTask+0x140>)
 80062ee:	659a      	str	r2, [r3, #88]	; 0x58
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <prvInitialiseNewTask+0x144>)
 80062f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	4a0b      	ldr	r2, [pc, #44]	; (8006328 <prvInitialiseNewTask+0x148>)
 80062fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f001 f941 	bl	8007588 <pxPortInitialiseStack>
 8006306:	4602      	mov	r2, r0
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006316:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006318:	bf00      	nop
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	08008154 	.word	0x08008154
 8006324:	08008174 	.word	0x08008174
 8006328:	08008134 	.word	0x08008134

0800632c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006334:	f001 fa56 	bl	80077e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <prvAddNewTaskToReadyList+0xc4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	4a2c      	ldr	r2, [pc, #176]	; (80063f0 <prvAddNewTaskToReadyList+0xc4>)
 8006340:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006342:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <prvAddNewTaskToReadyList+0xc8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800634a:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <prvAddNewTaskToReadyList+0xc8>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <prvAddNewTaskToReadyList+0xc4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d110      	bne.n	800637a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006358:	f000 fc26 	bl	8006ba8 <prvInitialiseTaskLists>
 800635c:	e00d      	b.n	800637a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800635e:	4b26      	ldr	r3, [pc, #152]	; (80063f8 <prvAddNewTaskToReadyList+0xcc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006366:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <prvAddNewTaskToReadyList+0xc8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	429a      	cmp	r2, r3
 8006372:	d802      	bhi.n	800637a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006374:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <prvAddNewTaskToReadyList+0xc8>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800637a:	4b20      	ldr	r3, [pc, #128]	; (80063fc <prvAddNewTaskToReadyList+0xd0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3301      	adds	r3, #1
 8006380:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <prvAddNewTaskToReadyList+0xd0>)
 8006382:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <prvAddNewTaskToReadyList+0xd0>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006390:	4b1b      	ldr	r3, [pc, #108]	; (8006400 <prvAddNewTaskToReadyList+0xd4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d903      	bls.n	80063a0 <prvAddNewTaskToReadyList+0x74>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <prvAddNewTaskToReadyList+0xd4>)
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4a15      	ldr	r2, [pc, #84]	; (8006404 <prvAddNewTaskToReadyList+0xd8>)
 80063ae:	441a      	add	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7ff f80b 	bl	80053d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063bc:	f001 fa42 	bl	8007844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <prvAddNewTaskToReadyList+0xcc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00e      	beq.n	80063e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <prvAddNewTaskToReadyList+0xc8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d207      	bcs.n	80063e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063d6:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <prvAddNewTaskToReadyList+0xdc>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000efc 	.word	0x20000efc
 80063f4:	20000a28 	.word	0x20000a28
 80063f8:	20000f08 	.word	0x20000f08
 80063fc:	20000f18 	.word	0x20000f18
 8006400:	20000f04 	.word	0x20000f04
 8006404:	20000a2c 	.word	0x20000a2c
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <vTaskDelay+0x60>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <vTaskDelay+0x30>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800643c:	f000 f88a 	bl	8006554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006440:	2100      	movs	r1, #0
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fcfe 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006448:	f000 f892 	bl	8006570 <xTaskResumeAll>
 800644c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d107      	bne.n	8006464 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <vTaskDelay+0x64>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000f24 	.word	0x20000f24
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	; 0x28
 8006478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006482:	463a      	mov	r2, r7
 8006484:	1d39      	adds	r1, r7, #4
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe ff40 	bl	8005310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	9202      	str	r2, [sp, #8]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	2300      	movs	r3, #0
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	460a      	mov	r2, r1
 80064a2:	4924      	ldr	r1, [pc, #144]	; (8006534 <vTaskStartScheduler+0xc0>)
 80064a4:	4824      	ldr	r0, [pc, #144]	; (8006538 <vTaskStartScheduler+0xc4>)
 80064a6:	f7ff fdf9 	bl	800609c <xTaskCreateStatic>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4a23      	ldr	r2, [pc, #140]	; (800653c <vTaskStartScheduler+0xc8>)
 80064ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064b0:	4b22      	ldr	r3, [pc, #136]	; (800653c <vTaskStartScheduler+0xc8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e001      	b.n	80064c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064c8:	f000 fd10 	bl	8006eec <xTimerCreateTimerTask>
 80064cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d11b      	bne.n	800650c <vTaskStartScheduler+0x98>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	613b      	str	r3, [r7, #16]
}
 80064e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <vTaskStartScheduler+0xcc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3354      	adds	r3, #84	; 0x54
 80064ee:	4a15      	ldr	r2, [pc, #84]	; (8006544 <vTaskStartScheduler+0xd0>)
 80064f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <vTaskStartScheduler+0xd4>)
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <vTaskStartScheduler+0xd8>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006500:	4b13      	ldr	r3, [pc, #76]	; (8006550 <vTaskStartScheduler+0xdc>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006506:	f001 f8cb 	bl	80076a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800650a:	e00e      	b.n	800652a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d10a      	bne.n	800652a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <vTaskStartScheduler+0xb4>
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	08008058 	.word	0x08008058
 8006538:	08006b79 	.word	0x08006b79
 800653c:	20000f20 	.word	0x20000f20
 8006540:	20000a28 	.word	0x20000a28
 8006544:	20000014 	.word	0x20000014
 8006548:	20000f1c 	.word	0x20000f1c
 800654c:	20000f08 	.word	0x20000f08
 8006550:	20000f00 	.word	0x20000f00

08006554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <vTaskSuspendAll+0x18>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3301      	adds	r3, #1
 800655e:	4a03      	ldr	r2, [pc, #12]	; (800656c <vTaskSuspendAll+0x18>)
 8006560:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006562:	bf00      	nop
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000f24 	.word	0x20000f24

08006570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800657e:	4b42      	ldr	r3, [pc, #264]	; (8006688 <xTaskResumeAll+0x118>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <xTaskResumeAll+0x2c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	603b      	str	r3, [r7, #0]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800659c:	f001 f922 	bl	80077e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065a0:	4b39      	ldr	r3, [pc, #228]	; (8006688 <xTaskResumeAll+0x118>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4a38      	ldr	r2, [pc, #224]	; (8006688 <xTaskResumeAll+0x118>)
 80065a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065aa:	4b37      	ldr	r3, [pc, #220]	; (8006688 <xTaskResumeAll+0x118>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d162      	bne.n	8006678 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065b2:	4b36      	ldr	r3, [pc, #216]	; (800668c <xTaskResumeAll+0x11c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d05e      	beq.n	8006678 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ba:	e02f      	b.n	800661c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065bc:	4b34      	ldr	r3, [pc, #208]	; (8006690 <xTaskResumeAll+0x120>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3318      	adds	r3, #24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe ff5f 	bl	800548c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ff5a 	bl	800548c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <xTaskResumeAll+0x124>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d903      	bls.n	80065ec <xTaskResumeAll+0x7c>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <xTaskResumeAll+0x124>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4a27      	ldr	r2, [pc, #156]	; (8006698 <xTaskResumeAll+0x128>)
 80065fa:	441a      	add	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fe fee5 	bl	80053d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	4b23      	ldr	r3, [pc, #140]	; (800669c <xTaskResumeAll+0x12c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	429a      	cmp	r2, r3
 8006614:	d302      	bcc.n	800661c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006616:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <xTaskResumeAll+0x130>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800661c:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <xTaskResumeAll+0x120>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1cb      	bne.n	80065bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800662a:	f000 fb5f 	bl	8006cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <xTaskResumeAll+0x134>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800663a:	f000 f847 	bl	80066cc <xTaskIncrementTick>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006644:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <xTaskResumeAll+0x130>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3b01      	subs	r3, #1
 800664e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f1      	bne.n	800663a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006656:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <xTaskResumeAll+0x134>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <xTaskResumeAll+0x130>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <xTaskResumeAll+0x138>)
 800666a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006678:	f001 f8e4 	bl	8007844 <vPortExitCritical>

	return xAlreadyYielded;
 800667c:	68bb      	ldr	r3, [r7, #8]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000f24 	.word	0x20000f24
 800668c:	20000efc 	.word	0x20000efc
 8006690:	20000ebc 	.word	0x20000ebc
 8006694:	20000f04 	.word	0x20000f04
 8006698:	20000a2c 	.word	0x20000a2c
 800669c:	20000a28 	.word	0x20000a28
 80066a0:	20000f10 	.word	0x20000f10
 80066a4:	20000f0c 	.word	0x20000f0c
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <xTaskGetTickCount+0x1c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066b8:	687b      	ldr	r3, [r7, #4]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000f00 	.word	0x20000f00

080066cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d6:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <xTaskIncrementTick+0x148>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 808f 	bne.w	80067fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066e0:	4b4d      	ldr	r3, [pc, #308]	; (8006818 <xTaskIncrementTick+0x14c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066e8:	4a4b      	ldr	r2, [pc, #300]	; (8006818 <xTaskIncrementTick+0x14c>)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d120      	bne.n	8006736 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80066f4:	4b49      	ldr	r3, [pc, #292]	; (800681c <xTaskIncrementTick+0x150>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <xTaskIncrementTick+0x48>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	603b      	str	r3, [r7, #0]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <xTaskIncrementTick+0x46>
 8006714:	4b41      	ldr	r3, [pc, #260]	; (800681c <xTaskIncrementTick+0x150>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	4b41      	ldr	r3, [pc, #260]	; (8006820 <xTaskIncrementTick+0x154>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a3f      	ldr	r2, [pc, #252]	; (800681c <xTaskIncrementTick+0x150>)
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <xTaskIncrementTick+0x154>)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <xTaskIncrementTick+0x158>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	4a3d      	ldr	r2, [pc, #244]	; (8006824 <xTaskIncrementTick+0x158>)
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	f000 fadb 	bl	8006cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006736:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <xTaskIncrementTick+0x15c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d349      	bcc.n	80067d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006740:	4b36      	ldr	r3, [pc, #216]	; (800681c <xTaskIncrementTick+0x150>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <xTaskIncrementTick+0x15c>)
 800674c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006750:	601a      	str	r2, [r3, #0]
					break;
 8006752:	e03f      	b.n	80067d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006754:	4b31      	ldr	r3, [pc, #196]	; (800681c <xTaskIncrementTick+0x150>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d203      	bcs.n	8006774 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800676c:	4a2e      	ldr	r2, [pc, #184]	; (8006828 <xTaskIncrementTick+0x15c>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006772:	e02f      	b.n	80067d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	3304      	adds	r3, #4
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fe87 	bl	800548c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	3318      	adds	r3, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fe7e 	bl	800548c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4b25      	ldr	r3, [pc, #148]	; (800682c <xTaskIncrementTick+0x160>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <xTaskIncrementTick+0xd8>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <xTaskIncrementTick+0x160>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <xTaskIncrementTick+0x164>)
 80067b2:	441a      	add	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fe09 	bl	80053d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <xTaskIncrementTick+0x168>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3b8      	bcc.n	8006740 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d2:	e7b5      	b.n	8006740 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <xTaskIncrementTick+0x168>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	4915      	ldr	r1, [pc, #84]	; (8006830 <xTaskIncrementTick+0x164>)
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d901      	bls.n	80067f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067f0:	4b11      	ldr	r3, [pc, #68]	; (8006838 <xTaskIncrementTick+0x16c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e004      	b.n	8006808 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <xTaskIncrementTick+0x170>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a0d      	ldr	r2, [pc, #52]	; (800683c <xTaskIncrementTick+0x170>)
 8006806:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006808:	697b      	ldr	r3, [r7, #20]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000f24 	.word	0x20000f24
 8006818:	20000f00 	.word	0x20000f00
 800681c:	20000eb4 	.word	0x20000eb4
 8006820:	20000eb8 	.word	0x20000eb8
 8006824:	20000f14 	.word	0x20000f14
 8006828:	20000f1c 	.word	0x20000f1c
 800682c:	20000f04 	.word	0x20000f04
 8006830:	20000a2c 	.word	0x20000a2c
 8006834:	20000a28 	.word	0x20000a28
 8006838:	20000f10 	.word	0x20000f10
 800683c:	20000f0c 	.word	0x20000f0c

08006840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006846:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <vTaskSwitchContext+0xb0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <vTaskSwitchContext+0xb4>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006854:	e046      	b.n	80068e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006856:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <vTaskSwitchContext+0xb4>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685c:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <vTaskSwitchContext+0xb8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e010      	b.n	8006886 <vTaskSwitchContext+0x46>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <vTaskSwitchContext+0x40>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <vTaskSwitchContext+0x3e>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b01      	subs	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	491d      	ldr	r1, [pc, #116]	; (80068fc <vTaskSwitchContext+0xbc>)
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0e4      	beq.n	8006864 <vTaskSwitchContext+0x24>
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a15      	ldr	r2, [pc, #84]	; (80068fc <vTaskSwitchContext+0xbc>)
 80068a6:	4413      	add	r3, r2
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	3308      	adds	r3, #8
 80068bc:	429a      	cmp	r2, r3
 80068be:	d104      	bne.n	80068ca <vTaskSwitchContext+0x8a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a0b      	ldr	r2, [pc, #44]	; (8006900 <vTaskSwitchContext+0xc0>)
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <vTaskSwitchContext+0xb8>)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <vTaskSwitchContext+0xc0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3354      	adds	r3, #84	; 0x54
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <vTaskSwitchContext+0xc4>)
 80068e2:	6013      	str	r3, [r2, #0]
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000f24 	.word	0x20000f24
 80068f4:	20000f10 	.word	0x20000f10
 80068f8:	20000f04 	.word	0x20000f04
 80068fc:	20000a2c 	.word	0x20000a2c
 8006900:	20000a28 	.word	0x20000a28
 8006904:	20000014 	.word	0x20000014

08006908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60fb      	str	r3, [r7, #12]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <vTaskPlaceOnEventList+0x44>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3318      	adds	r3, #24
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe fd6f 	bl	800541a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800693c:	2101      	movs	r1, #1
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	f000 fa80 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000a28 	.word	0x20000a28

08006950 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	617b      	str	r3, [r7, #20]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3318      	adds	r3, #24
 800697e:	4619      	mov	r1, r3
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7fe fd26 	bl	80053d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800698c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006990:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	68b8      	ldr	r0, [r7, #8]
 8006996:	f000 fa55 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
	}
 800699a:	bf00      	nop
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000a28 	.word	0x20000a28

080069a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fd57 	bl	800548c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <xTaskRemoveFromEventList+0xb0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11d      	bne.n	8006a22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fd4e 	bl	800548c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <xTaskRemoveFromEventList+0xb4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d903      	bls.n	8006a04 <xTaskRemoveFromEventList+0x5c>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <xTaskRemoveFromEventList+0xb4>)
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <xTaskRemoveFromEventList+0xb8>)
 8006a12:	441a      	add	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7fe fcd9 	bl	80053d2 <vListInsertEnd>
 8006a20:	e005      	b.n	8006a2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3318      	adds	r3, #24
 8006a26:	4619      	mov	r1, r3
 8006a28:	480e      	ldr	r0, [pc, #56]	; (8006a64 <xTaskRemoveFromEventList+0xbc>)
 8006a2a:	f7fe fcd2 	bl	80053d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <xTaskRemoveFromEventList+0xc0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d905      	bls.n	8006a48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <xTaskRemoveFromEventList+0xc4>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e001      	b.n	8006a4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a4c:	697b      	ldr	r3, [r7, #20]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000f24 	.word	0x20000f24
 8006a5c:	20000f04 	.word	0x20000f04
 8006a60:	20000a2c 	.word	0x20000a2c
 8006a64:	20000ebc 	.word	0x20000ebc
 8006a68:	20000a28 	.word	0x20000a28
 8006a6c:	20000f10 	.word	0x20000f10

08006a70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <vTaskInternalSetTimeOutState+0x24>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <vTaskInternalSetTimeOutState+0x28>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	605a      	str	r2, [r3, #4]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000f14 	.word	0x20000f14
 8006a98:	20000f00 	.word	0x20000f00

08006a9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	613b      	str	r3, [r7, #16]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	60fb      	str	r3, [r7, #12]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ade:	f000 fe81 	bl	80077e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <xTaskCheckForTimeOut+0xbc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006afa:	d102      	bne.n	8006b02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e023      	b.n	8006b4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <xTaskCheckForTimeOut+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d007      	beq.n	8006b1e <xTaskCheckForTimeOut+0x82>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e015      	b.n	8006b4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d20b      	bcs.n	8006b40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	1ad2      	subs	r2, r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff ff9b 	bl	8006a70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	e004      	b.n	8006b4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b4a:	f000 fe7b 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3720      	adds	r7, #32
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000f00 	.word	0x20000f00
 8006b5c:	20000f14 	.word	0x20000f14

08006b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <vTaskMissedYield+0x14>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000f10 	.word	0x20000f10

08006b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b80:	f000 f852 	bl	8006c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <prvIdleTask+0x28>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d9f9      	bls.n	8006b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <prvIdleTask+0x2c>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b9c:	e7f0      	b.n	8006b80 <prvIdleTask+0x8>
 8006b9e:	bf00      	nop
 8006ba0:	20000a2c 	.word	0x20000a2c
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bae:	2300      	movs	r3, #0
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	e00c      	b.n	8006bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <prvInitialiseTaskLists+0x60>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fbd8 	bl	8005378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b37      	cmp	r3, #55	; 0x37
 8006bd2:	d9ef      	bls.n	8006bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bd4:	480d      	ldr	r0, [pc, #52]	; (8006c0c <prvInitialiseTaskLists+0x64>)
 8006bd6:	f7fe fbcf 	bl	8005378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bda:	480d      	ldr	r0, [pc, #52]	; (8006c10 <prvInitialiseTaskLists+0x68>)
 8006bdc:	f7fe fbcc 	bl	8005378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006be0:	480c      	ldr	r0, [pc, #48]	; (8006c14 <prvInitialiseTaskLists+0x6c>)
 8006be2:	f7fe fbc9 	bl	8005378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006be6:	480c      	ldr	r0, [pc, #48]	; (8006c18 <prvInitialiseTaskLists+0x70>)
 8006be8:	f7fe fbc6 	bl	8005378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bec:	480b      	ldr	r0, [pc, #44]	; (8006c1c <prvInitialiseTaskLists+0x74>)
 8006bee:	f7fe fbc3 	bl	8005378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <prvInitialiseTaskLists+0x78>)
 8006bf4:	4a05      	ldr	r2, [pc, #20]	; (8006c0c <prvInitialiseTaskLists+0x64>)
 8006bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	; (8006c24 <prvInitialiseTaskLists+0x7c>)
 8006bfa:	4a05      	ldr	r2, [pc, #20]	; (8006c10 <prvInitialiseTaskLists+0x68>)
 8006bfc:	601a      	str	r2, [r3, #0]
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000a2c 	.word	0x20000a2c
 8006c0c:	20000e8c 	.word	0x20000e8c
 8006c10:	20000ea0 	.word	0x20000ea0
 8006c14:	20000ebc 	.word	0x20000ebc
 8006c18:	20000ed0 	.word	0x20000ed0
 8006c1c:	20000ee8 	.word	0x20000ee8
 8006c20:	20000eb4 	.word	0x20000eb4
 8006c24:	20000eb8 	.word	0x20000eb8

08006c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c2e:	e019      	b.n	8006c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c30:	f000 fdd8 	bl	80077e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c34:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <prvCheckTasksWaitingTermination+0x50>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fc23 	bl	800548c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <prvCheckTasksWaitingTermination+0x54>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	4a0b      	ldr	r2, [pc, #44]	; (8006c7c <prvCheckTasksWaitingTermination+0x54>)
 8006c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <prvCheckTasksWaitingTermination+0x58>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <prvCheckTasksWaitingTermination+0x58>)
 8006c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c5a:	f000 fdf3 	bl	8007844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f810 	bl	8006c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c64:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <prvCheckTasksWaitingTermination+0x58>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e1      	bne.n	8006c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000ed0 	.word	0x20000ed0
 8006c7c:	20000efc 	.word	0x20000efc
 8006c80:	20000ee4 	.word	0x20000ee4

08006c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3354      	adds	r3, #84	; 0x54
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f8fd 	bl	8007e90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 ff8b 	bl	8007bc0 <vPortFree>
				vPortFree( pxTCB );
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 ff88 	bl	8007bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cb0:	e018      	b.n	8006ce4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d103      	bne.n	8006cc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 ff7f 	bl	8007bc0 <vPortFree>
	}
 8006cc2:	e00f      	b.n	8006ce4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d00a      	beq.n	8006ce4 <prvDeleteTCB+0x60>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <prvDeleteTCB+0x5e>
	}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <prvResetNextTaskUnblockTime+0x38>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <prvResetNextTaskUnblockTime+0x3c>)
 8006cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d04:	e008      	b.n	8006d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <prvResetNextTaskUnblockTime+0x38>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4a04      	ldr	r2, [pc, #16]	; (8006d28 <prvResetNextTaskUnblockTime+0x3c>)
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000eb4 	.word	0x20000eb4
 8006d28:	20000f1c 	.word	0x20000f1c

08006d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <xTaskGetSchedulerState+0x34>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	e008      	b.n	8006d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <xTaskGetSchedulerState+0x38>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	e001      	b.n	8006d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d52:	687b      	ldr	r3, [r7, #4]
	}
 8006d54:	4618      	mov	r0, r3
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000f08 	.word	0x20000f08
 8006d64:	20000f24 	.word	0x20000f24

08006d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d056      	beq.n	8006e2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d7e:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <xTaskPriorityDisinherit+0xd0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d00a      	beq.n	8006d9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60fb      	str	r3, [r7, #12]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60bb      	str	r3, [r7, #8]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d02c      	beq.n	8006e2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d128      	bne.n	8006e2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fb54 	bl	800548c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <xTaskPriorityDisinherit+0xd4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <xTaskPriorityDisinherit+0xa4>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <xTaskPriorityDisinherit+0xd4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <xTaskPriorityDisinherit+0xd8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fad5 	bl	80053d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e2c:	697b      	ldr	r3, [r7, #20]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000a28 	.word	0x20000a28
 8006e3c:	20000f04 	.word	0x20000f04
 8006e40:	20000a2c 	.word	0x20000a2c

08006e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e4e:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fb16 	bl	800548c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e66:	d10a      	bne.n	8006e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4819      	ldr	r0, [pc, #100]	; (8006edc <prvAddCurrentTaskToDelayedList+0x98>)
 8006e78:	f7fe faab 	bl	80053d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e7c:	e026      	b.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d209      	bcs.n	8006eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fe fab9 	bl	800541a <vListInsert>
}
 8006ea8:	e010      	b.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fe faaf 	bl	800541a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d202      	bcs.n	8006ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ec6:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000f00 	.word	0x20000f00
 8006ed8:	20000a28 	.word	0x20000a28
 8006edc:	20000ee8 	.word	0x20000ee8
 8006ee0:	20000eb8 	.word	0x20000eb8
 8006ee4:	20000eb4 	.word	0x20000eb4
 8006ee8:	20000f1c 	.word	0x20000f1c

08006eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08a      	sub	sp, #40	; 0x28
 8006ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ef6:	f000 fb07 	bl	8007508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006efa:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <xTimerCreateTimerTask+0x80>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d021      	beq.n	8006f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f0a:	1d3a      	adds	r2, r7, #4
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	f107 030c 	add.w	r3, r7, #12
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fa15 	bl	8005344 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	9202      	str	r2, [sp, #8]
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	2302      	movs	r3, #2
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	4910      	ldr	r1, [pc, #64]	; (8006f70 <xTimerCreateTimerTask+0x84>)
 8006f2e:	4811      	ldr	r0, [pc, #68]	; (8006f74 <xTimerCreateTimerTask+0x88>)
 8006f30:	f7ff f8b4 	bl	800609c <xTaskCreateStatic>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <xTimerCreateTimerTask+0x8c>)
 8006f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <xTimerCreateTimerTask+0x8c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	613b      	str	r3, [r7, #16]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f62:	697b      	ldr	r3, [r7, #20]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000f58 	.word	0x20000f58
 8006f70:	08008060 	.word	0x08008060
 8006f74:	080070b1 	.word	0x080070b1
 8006f78:	20000f5c 	.word	0x20000f5c

08006f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	623b      	str	r3, [r7, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006faa:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <xTimerGenericCommand+0x98>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02a      	beq.n	8007008 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b05      	cmp	r3, #5
 8006fc2:	dc18      	bgt.n	8006ff6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fc4:	f7ff feb2 	bl	8006d2c <xTaskGetSchedulerState>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d109      	bne.n	8006fe2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xTimerGenericCommand+0x98>)
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f107 0110 	add.w	r1, r7, #16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fda:	f7fe fc29 	bl	8005830 <xQueueGenericSend>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24
 8006fe0:	e012      	b.n	8007008 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <xTimerGenericCommand+0x98>)
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f107 0110 	add.w	r1, r7, #16
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	f7fe fc1f 	bl	8005830 <xQueueGenericSend>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff4:	e008      	b.n	8007008 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ff6:	4b07      	ldr	r3, [pc, #28]	; (8007014 <xTimerGenericCommand+0x98>)
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	f107 0110 	add.w	r1, r7, #16
 8006ffe:	2300      	movs	r3, #0
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	f7fe fd13 	bl	8005a2c <xQueueGenericSendFromISR>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800700a:	4618      	mov	r0, r3
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000f58 	.word	0x20000f58

08007018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af02      	add	r7, sp, #8
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007022:	4b22      	ldr	r3, [pc, #136]	; (80070ac <prvProcessExpiredTimer+0x94>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe fa2b 	bl	800548c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d022      	beq.n	800708a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	18d1      	adds	r1, r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6978      	ldr	r0, [r7, #20]
 8007052:	f000 f8d1 	bl	80071f8 <prvInsertTimerInActiveList>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01f      	beq.n	800709c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2300      	movs	r3, #0
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2100      	movs	r1, #0
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f7ff ff88 	bl	8006f7c <xTimerGenericCommand>
 800706c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d113      	bne.n	800709c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	60fb      	str	r3, [r7, #12]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	6978      	ldr	r0, [r7, #20]
 80070a2:	4798      	blx	r3
}
 80070a4:	bf00      	nop
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000f50 	.word	0x20000f50

080070b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070b8:	f107 0308 	add.w	r3, r7, #8
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f857 	bl	8007170 <prvGetNextExpireTime>
 80070c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f803 	bl	80070d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ce:	f000 f8d5 	bl	800727c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d2:	e7f1      	b.n	80070b8 <prvTimerTask+0x8>

080070d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070de:	f7ff fa39 	bl	8006554 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070e2:	f107 0308 	add.w	r3, r7, #8
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f866 	bl	80071b8 <prvSampleTimeNow>
 80070ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d130      	bne.n	8007156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <prvProcessTimerOrBlockTask+0x3c>
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d806      	bhi.n	8007110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007102:	f7ff fa35 	bl	8006570 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff ff85 	bl	8007018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800710e:	e024      	b.n	800715a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <prvProcessTimerOrBlockTask+0x90>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <prvProcessTimerOrBlockTask+0x50>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <prvProcessTimerOrBlockTask+0x52>
 8007124:	2300      	movs	r3, #0
 8007126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <prvProcessTimerOrBlockTask+0x94>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	f7fe ff7d 	bl	8006034 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800713a:	f7ff fa19 	bl	8006570 <xTaskResumeAll>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <prvProcessTimerOrBlockTask+0x98>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
}
 8007154:	e001      	b.n	800715a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007156:	f7ff fa0b 	bl	8006570 <xTaskResumeAll>
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000f54 	.word	0x20000f54
 8007168:	20000f58 	.word	0x20000f58
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <prvGetNextExpireTime+0x44>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <prvGetNextExpireTime+0x16>
 8007182:	2201      	movs	r2, #1
 8007184:	e000      	b.n	8007188 <prvGetNextExpireTime+0x18>
 8007186:	2200      	movs	r2, #0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <prvGetNextExpireTime+0x44>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e001      	b.n	80071a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000f50 	.word	0x20000f50

080071b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071c0:	f7ff fa74 	bl	80066ac <xTaskGetTickCount>
 80071c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071c6:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <prvSampleTimeNow+0x3c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d205      	bcs.n	80071dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071d0:	f000 f936 	bl	8007440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	e002      	b.n	80071e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071e2:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <prvSampleTimeNow+0x3c>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000f60 	.word	0x20000f60

080071f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	429a      	cmp	r2, r3
 800721c:	d812      	bhi.n	8007244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	e01b      	b.n	800726a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007232:	4b10      	ldr	r3, [pc, #64]	; (8007274 <prvInsertTimerInActiveList+0x7c>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7fe f8ec 	bl	800541a <vListInsert>
 8007242:	e012      	b.n	800726a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d206      	bcs.n	800725a <prvInsertTimerInActiveList+0x62>
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e007      	b.n	800726a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <prvInsertTimerInActiveList+0x80>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe f8d8 	bl	800541a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800726a:	697b      	ldr	r3, [r7, #20]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000f54 	.word	0x20000f54
 8007278:	20000f50 	.word	0x20000f50

0800727c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08e      	sub	sp, #56	; 0x38
 8007280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007282:	e0ca      	b.n	800741a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	da18      	bge.n	80072bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	3304      	adds	r3, #4
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10a      	bne.n	80072ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	61fb      	str	r3, [r7, #28]
}
 80072a8:	bf00      	nop
 80072aa:	e7fe      	b.n	80072aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b2:	6850      	ldr	r0, [r2, #4]
 80072b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b6:	6892      	ldr	r2, [r2, #8]
 80072b8:	4611      	mov	r1, r2
 80072ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f2c0 80aa 	blt.w	8007418 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	3304      	adds	r3, #4
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe f8d9 	bl	800548c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072da:	463b      	mov	r3, r7
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ff6b 	bl	80071b8 <prvSampleTimeNow>
 80072e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	f200 8097 	bhi.w	800741a <prvProcessReceivedCommands+0x19e>
 80072ec:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <prvProcessReceivedCommands+0x78>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	0800731d 	.word	0x0800731d
 8007300:	08007391 	.word	0x08007391
 8007304:	080073a5 	.word	0x080073a5
 8007308:	080073ef 	.word	0x080073ef
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800731d 	.word	0x0800731d
 8007314:	08007391 	.word	0x08007391
 8007318:	080073a5 	.word	0x080073a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	18d1      	adds	r1, r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733c:	f7ff ff5c 	bl	80071f8 <prvInsertTimerInActiveList>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d069      	beq.n	800741a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05e      	beq.n	800741a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	441a      	add	r2, r3
 8007364:	2300      	movs	r3, #0
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2300      	movs	r3, #0
 800736a:	2100      	movs	r1, #0
 800736c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736e:	f7ff fe05 	bl	8006f7c <xTimerGenericCommand>
 8007372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d14f      	bne.n	800741a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	61bb      	str	r3, [r7, #24]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007396:	f023 0301 	bic.w	r3, r3, #1
 800739a:	b2da      	uxtb	r2, r3
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073a2:	e03a      	b.n	800741a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	617b      	str	r3, [r7, #20]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	18d1      	adds	r1, r2, r3
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e8:	f7ff ff06 	bl	80071f8 <prvInsertTimerInActiveList>
					break;
 80073ec:	e015      	b.n	800741a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80073fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fe:	f000 fbdf 	bl	8007bc0 <vPortFree>
 8007402:	e00a      	b.n	800741a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	b2da      	uxtb	r2, r3
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007416:	e000      	b.n	800741a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007418:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <prvProcessReceivedCommands+0x1c0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	1d39      	adds	r1, r7, #4
 8007420:	2200      	movs	r2, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fb9e 	bl	8005b64 <xQueueReceive>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	f47f af2a 	bne.w	8007284 <prvProcessReceivedCommands+0x8>
	}
}
 8007430:	bf00      	nop
 8007432:	bf00      	nop
 8007434:	3730      	adds	r7, #48	; 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000f58 	.word	0x20000f58

08007440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007446:	e048      	b.n	80074da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007448:	4b2d      	ldr	r3, [pc, #180]	; (8007500 <prvSwitchTimerLists+0xc0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <prvSwitchTimerLists+0xc0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3304      	adds	r3, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe f813 	bl	800548c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02e      	beq.n	80074da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d90e      	bls.n	80074ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800749a:	4b19      	ldr	r3, [pc, #100]	; (8007500 <prvSwitchTimerLists+0xc0>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fd ffb8 	bl	800541a <vListInsert>
 80074aa:	e016      	b.n	80074da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074ac:	2300      	movs	r3, #0
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	2100      	movs	r1, #0
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff fd60 	bl	8006f7c <xTimerGenericCommand>
 80074bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	603b      	str	r3, [r7, #0]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <prvSwitchTimerLists+0xc0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1b1      	bne.n	8007448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <prvSwitchTimerLists+0xc0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvSwitchTimerLists+0xc4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a04      	ldr	r2, [pc, #16]	; (8007500 <prvSwitchTimerLists+0xc0>)
 80074f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074f2:	4a04      	ldr	r2, [pc, #16]	; (8007504 <prvSwitchTimerLists+0xc4>)
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	6013      	str	r3, [r2, #0]
}
 80074f8:	bf00      	nop
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000f50 	.word	0x20000f50
 8007504:	20000f54 	.word	0x20000f54

08007508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800750e:	f000 f969 	bl	80077e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <prvCheckForValidListAndQueue+0x60>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d120      	bne.n	800755c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800751a:	4814      	ldr	r0, [pc, #80]	; (800756c <prvCheckForValidListAndQueue+0x64>)
 800751c:	f7fd ff2c 	bl	8005378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007520:	4813      	ldr	r0, [pc, #76]	; (8007570 <prvCheckForValidListAndQueue+0x68>)
 8007522:	f7fd ff29 	bl	8005378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <prvCheckForValidListAndQueue+0x6c>)
 8007528:	4a10      	ldr	r2, [pc, #64]	; (800756c <prvCheckForValidListAndQueue+0x64>)
 800752a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800752c:	4b12      	ldr	r3, [pc, #72]	; (8007578 <prvCheckForValidListAndQueue+0x70>)
 800752e:	4a10      	ldr	r2, [pc, #64]	; (8007570 <prvCheckForValidListAndQueue+0x68>)
 8007530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <prvCheckForValidListAndQueue+0x74>)
 8007538:	4a11      	ldr	r2, [pc, #68]	; (8007580 <prvCheckForValidListAndQueue+0x78>)
 800753a:	2110      	movs	r1, #16
 800753c:	200a      	movs	r0, #10
 800753e:	f7fe f837 	bl	80055b0 <xQueueGenericCreateStatic>
 8007542:	4603      	mov	r3, r0
 8007544:	4a08      	ldr	r2, [pc, #32]	; (8007568 <prvCheckForValidListAndQueue+0x60>)
 8007546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <prvCheckForValidListAndQueue+0x60>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <prvCheckForValidListAndQueue+0x60>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	490b      	ldr	r1, [pc, #44]	; (8007584 <prvCheckForValidListAndQueue+0x7c>)
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fd18 	bl	8005f8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800755c:	f000 f972 	bl	8007844 <vPortExitCritical>
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000f58 	.word	0x20000f58
 800756c:	20000f28 	.word	0x20000f28
 8007570:	20000f3c 	.word	0x20000f3c
 8007574:	20000f50 	.word	0x20000f50
 8007578:	20000f54 	.word	0x20000f54
 800757c:	20001004 	.word	0x20001004
 8007580:	20000f64 	.word	0x20000f64
 8007584:	08008068 	.word	0x08008068

08007588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3b04      	subs	r3, #4
 8007598:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f023 0201 	bic.w	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3b04      	subs	r3, #4
 80075b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075b8:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <pxPortInitialiseStack+0x64>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b14      	subs	r3, #20
 80075c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3b04      	subs	r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f06f 0202 	mvn.w	r2, #2
 80075d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b20      	subs	r3, #32
 80075dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	080075f1 	.word	0x080075f1

080075f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <prvTaskExitError+0x54>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007602:	d00a      	beq.n	800761a <prvTaskExitError+0x2a>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60fb      	str	r3, [r7, #12]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <prvTaskExitError+0x28>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	60bb      	str	r3, [r7, #8]
}
 800762c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800762e:	bf00      	nop
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0fc      	beq.n	8007630 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000010 	.word	0x20000010
	...

08007650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	4770      	bx	lr
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst2>:
 8007670:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007678:	4808      	ldr	r0, [pc, #32]	; (800769c <prvPortStartFirstTask+0x24>)
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	6800      	ldr	r0, [r0, #0]
 800767e:	f380 8808 	msr	MSP, r0
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8814 	msr	CONTROL, r0
 800768a:	b662      	cpsie	i
 800768c:	b661      	cpsie	f
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	df00      	svc	0
 8007698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800769a:	bf00      	nop
 800769c:	e000ed08 	.word	0xe000ed08

080076a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076a6:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <xPortStartScheduler+0x120>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a46      	ldr	r2, [pc, #280]	; (80077c4 <xPortStartScheduler+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10a      	bne.n	80076c6 <xPortStartScheduler+0x26>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a3f      	ldr	r2, [pc, #252]	; (80077c8 <xPortStartScheduler+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x46>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076e6:	4b39      	ldr	r3, [pc, #228]	; (80077cc <xPortStartScheduler+0x12c>)
 80076e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	22ff      	movs	r2, #255	; 0xff
 80076f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <xPortStartScheduler+0x130>)
 800770c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800770e:	4b31      	ldr	r3, [pc, #196]	; (80077d4 <xPortStartScheduler+0x134>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007714:	e009      	b.n	800772a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007716:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <xPortStartScheduler+0x134>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <xPortStartScheduler+0x134>)
 800771e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d0ef      	beq.n	8007716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1c3 0307 	rsb	r3, r3, #7
 800773e:	2b04      	cmp	r3, #4
 8007740:	d00a      	beq.n	8007758 <xPortStartScheduler+0xb8>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <xPortStartScheduler+0x134>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <xPortStartScheduler+0x134>)
 8007760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <xPortStartScheduler+0x134>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <xPortStartScheduler+0x134>)
 800776c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <xPortStartScheduler+0x138>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <xPortStartScheduler+0x138>)
 800777c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007782:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <xPortStartScheduler+0x138>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <xPortStartScheduler+0x138>)
 8007788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800778c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800778e:	f000 f8dd 	bl	800794c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007792:	4b12      	ldr	r3, [pc, #72]	; (80077dc <xPortStartScheduler+0x13c>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007798:	f000 f8fc 	bl	8007994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <xPortStartScheduler+0x140>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <xPortStartScheduler+0x140>)
 80077a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077a8:	f7ff ff66 	bl	8007678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077ac:	f7ff f848 	bl	8006840 <vTaskSwitchContext>
	prvTaskExitError();
 80077b0:	f7ff ff1e 	bl	80075f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	e000ed00 	.word	0xe000ed00
 80077c4:	410fc271 	.word	0x410fc271
 80077c8:	410fc270 	.word	0x410fc270
 80077cc:	e000e400 	.word	0xe000e400
 80077d0:	20001054 	.word	0x20001054
 80077d4:	20001058 	.word	0x20001058
 80077d8:	e000ed20 	.word	0xe000ed20
 80077dc:	20000010 	.word	0x20000010
 80077e0:	e000ef34 	.word	0xe000ef34

080077e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	607b      	str	r3, [r7, #4]
}
 80077fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <vPortEnterCritical+0x58>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <vPortEnterCritical+0x58>)
 8007806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <vPortEnterCritical+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d10f      	bne.n	8007830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortEnterCritical+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <vPortEnterCritical+0x4c>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	603b      	str	r3, [r7, #0]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vPortEnterCritical+0x4a>
	}
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000010 	.word	0x20000010
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vPortExitCritical+0x50>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <vPortExitCritical+0x24>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <vPortExitCritical+0x50>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3b01      	subs	r3, #1
 800786e:	4a09      	ldr	r2, [pc, #36]	; (8007894 <vPortExitCritical+0x50>)
 8007870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <vPortExitCritical+0x50>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <vPortExitCritical+0x42>
 800787a:	2300      	movs	r3, #0
 800787c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f383 8811 	msr	BASEPRI, r3
}
 8007884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000010 	.word	0x20000010
	...

080078a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078a0:	f3ef 8009 	mrs	r0, PSP
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <pxCurrentTCBConst>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f01e 0f10 	tst.w	lr, #16
 80078b0:	bf08      	it	eq
 80078b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ba:	6010      	str	r0, [r2, #0]
 80078bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078c4:	f380 8811 	msr	BASEPRI, r0
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f7fe ffb6 	bl	8006840 <vTaskSwitchContext>
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f380 8811 	msr	BASEPRI, r0
 80078dc:	bc09      	pop	{r0, r3}
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	6808      	ldr	r0, [r1, #0]
 80078e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e6:	f01e 0f10 	tst.w	lr, #16
 80078ea:	bf08      	it	eq
 80078ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078f0:	f380 8809 	msr	PSP, r0
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst>:
 8007900:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
}
 8007920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007922:	f7fe fed3 	bl	80066cc <xTaskIncrementTick>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <xPortSysTickHandler+0x40>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f383 8811 	msr	BASEPRI, r3
}
 800793e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <vPortSetupTimerInterrupt+0x38>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <vPortSetupTimerInterrupt+0x3c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <vPortSetupTimerInterrupt+0x40>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <vPortSetupTimerInterrupt+0x44>)
 800796a:	3b01      	subs	r3, #1
 800796c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010
 8007984:	e000e018 	.word	0xe000e018
 8007988:	20000000 	.word	0x20000000
 800798c:	10624dd3 	.word	0x10624dd3
 8007990:	e000e014 	.word	0xe000e014

08007994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079a4 <vPortEnableVFP+0x10>
 8007998:	6801      	ldr	r1, [r0, #0]
 800799a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800799e:	6001      	str	r1, [r0, #0]
 80079a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079a2:	bf00      	nop
 80079a4:	e000ed88 	.word	0xe000ed88

080079a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ae:	f3ef 8305 	mrs	r3, IPSR
 80079b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d914      	bls.n	80079e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <vPortValidateInterruptPriority+0x70>)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <vPortValidateInterruptPriority+0x74>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d20a      	bcs.n	80079e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <vPortValidateInterruptPriority+0x78>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <vPortValidateInterruptPriority+0x7c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d90a      	bls.n	8007a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	603b      	str	r3, [r7, #0]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <vPortValidateInterruptPriority+0x60>
	}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000e3f0 	.word	0xe000e3f0
 8007a1c:	20001054 	.word	0x20001054
 8007a20:	e000ed0c 	.word	0xe000ed0c
 8007a24:	20001058 	.word	0x20001058

08007a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a34:	f7fe fd8e 	bl	8006554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a38:	4b5b      	ldr	r3, [pc, #364]	; (8007ba8 <pvPortMalloc+0x180>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a40:	f000 f920 	bl	8007c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <pvPortMalloc+0x184>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8093 	bne.w	8007b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01d      	beq.n	8007a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a58:	2208      	movs	r2, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d014      	beq.n	8007a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f023 0307 	bic.w	r3, r3, #7
 8007a70:	3308      	adds	r3, #8
 8007a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <pvPortMalloc+0x6c>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	617b      	str	r3, [r7, #20]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d06e      	beq.n	8007b78 <pvPortMalloc+0x150>
 8007a9a:	4b45      	ldr	r3, [pc, #276]	; (8007bb0 <pvPortMalloc+0x188>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d869      	bhi.n	8007b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007aa4:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <pvPortMalloc+0x18c>)
 8007aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <pvPortMalloc+0x18c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aae:	e004      	b.n	8007aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d903      	bls.n	8007acc <pvPortMalloc+0xa4>
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f1      	bne.n	8007ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007acc:	4b36      	ldr	r3, [pc, #216]	; (8007ba8 <pvPortMalloc+0x180>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d050      	beq.n	8007b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2208      	movs	r2, #8
 8007adc:	4413      	add	r3, r2
 8007ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	2308      	movs	r3, #8
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d91f      	bls.n	8007b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <pvPortMalloc+0xf8>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	613b      	str	r3, [r7, #16]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b32:	69b8      	ldr	r0, [r7, #24]
 8007b34:	f000 f908 	bl	8007d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b38:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <pvPortMalloc+0x190>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d203      	bcs.n	8007b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b52:	4b17      	ldr	r3, [pc, #92]	; (8007bb0 <pvPortMalloc+0x188>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <pvPortMalloc+0x190>)
 8007b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <pvPortMalloc+0x184>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <pvPortMalloc+0x194>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	4a11      	ldr	r2, [pc, #68]	; (8007bbc <pvPortMalloc+0x194>)
 8007b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b78:	f7fe fcfa 	bl	8006570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f003 0307 	and.w	r3, r3, #7
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <pvPortMalloc+0x174>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <pvPortMalloc+0x172>
	return pvReturn;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3728      	adds	r7, #40	; 0x28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20004c64 	.word	0x20004c64
 8007bac:	20004c78 	.word	0x20004c78
 8007bb0:	20004c68 	.word	0x20004c68
 8007bb4:	20004c5c 	.word	0x20004c5c
 8007bb8:	20004c6c 	.word	0x20004c6c
 8007bbc:	20004c70 	.word	0x20004c70

08007bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d04d      	beq.n	8007c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	425b      	negs	r3, r3
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <vPortFree+0xb8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <vPortFree+0x44>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	60fb      	str	r3, [r7, #12]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <vPortFree+0x62>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60bb      	str	r3, [r7, #8]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <vPortFree+0xb8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01e      	beq.n	8007c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11a      	bne.n	8007c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <vPortFree+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c48:	f7fe fc84 	bl	8006554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <vPortFree+0xbc>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <vPortFree+0xbc>)
 8007c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f000 f874 	bl	8007d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vPortFree+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a06      	ldr	r2, [pc, #24]	; (8007c80 <vPortFree+0xc0>)
 8007c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c6a:	f7fe fc81 	bl	8006570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c6e:	bf00      	nop
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20004c78 	.word	0x20004c78
 8007c7c:	20004c68 	.word	0x20004c68
 8007c80:	20004c74 	.word	0x20004c74

08007c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c90:	4b27      	ldr	r3, [pc, #156]	; (8007d30 <prvHeapInit+0xac>)
 8007c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00c      	beq.n	8007cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1f      	ldr	r2, [pc, #124]	; (8007d30 <prvHeapInit+0xac>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	; (8007d34 <prvHeapInit+0xb0>)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc2:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <prvHeapInit+0xb0>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4413      	add	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0307 	bic.w	r3, r3, #7
 8007cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <prvHeapInit+0xb4>)
 8007ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ce6:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <prvHeapInit+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cee:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <prvHeapInit+0xb4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d04:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <prvHeapInit+0xb4>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <prvHeapInit+0xb8>)
 8007d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <prvHeapInit+0xbc>)
 8007d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <prvHeapInit+0xc0>)
 8007d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	2000105c 	.word	0x2000105c
 8007d34:	20004c5c 	.word	0x20004c5c
 8007d38:	20004c64 	.word	0x20004c64
 8007d3c:	20004c6c 	.word	0x20004c6c
 8007d40:	20004c68 	.word	0x20004c68
 8007d44:	20004c78 	.word	0x20004c78

08007d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d50:	4b28      	ldr	r3, [pc, #160]	; (8007df4 <prvInsertBlockIntoFreeList+0xac>)
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e002      	b.n	8007d5c <prvInsertBlockIntoFreeList+0x14>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8f7      	bhi.n	8007d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	4413      	add	r3, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d108      	bne.n	8007d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	441a      	add	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d118      	bne.n	8007dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d00d      	beq.n	8007dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	441a      	add	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e008      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc6:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e003      	b.n	8007dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d002      	beq.n	8007de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20004c5c 	.word	0x20004c5c
 8007df8:	20004c64 	.word	0x20004c64

08007dfc <__libc_init_array>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4d0d      	ldr	r5, [pc, #52]	; (8007e34 <__libc_init_array+0x38>)
 8007e00:	4c0d      	ldr	r4, [pc, #52]	; (8007e38 <__libc_init_array+0x3c>)
 8007e02:	1b64      	subs	r4, r4, r5
 8007e04:	10a4      	asrs	r4, r4, #2
 8007e06:	2600      	movs	r6, #0
 8007e08:	42a6      	cmp	r6, r4
 8007e0a:	d109      	bne.n	8007e20 <__libc_init_array+0x24>
 8007e0c:	4d0b      	ldr	r5, [pc, #44]	; (8007e3c <__libc_init_array+0x40>)
 8007e0e:	4c0c      	ldr	r4, [pc, #48]	; (8007e40 <__libc_init_array+0x44>)
 8007e10:	f000 f8f2 	bl	8007ff8 <_init>
 8007e14:	1b64      	subs	r4, r4, r5
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	2600      	movs	r6, #0
 8007e1a:	42a6      	cmp	r6, r4
 8007e1c:	d105      	bne.n	8007e2a <__libc_init_array+0x2e>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e24:	4798      	blx	r3
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7ee      	b.n	8007e08 <__libc_init_array+0xc>
 8007e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2e:	4798      	blx	r3
 8007e30:	3601      	adds	r6, #1
 8007e32:	e7f2      	b.n	8007e1a <__libc_init_array+0x1e>
 8007e34:	0800819c 	.word	0x0800819c
 8007e38:	0800819c 	.word	0x0800819c
 8007e3c:	0800819c 	.word	0x0800819c
 8007e40:	080081a0 	.word	0x080081a0

08007e44 <__retarget_lock_acquire_recursive>:
 8007e44:	4770      	bx	lr

08007e46 <__retarget_lock_release_recursive>:
 8007e46:	4770      	bx	lr

08007e48 <memcpy>:
 8007e48:	440a      	add	r2, r1
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e50:	d100      	bne.n	8007e54 <memcpy+0xc>
 8007e52:	4770      	bx	lr
 8007e54:	b510      	push	{r4, lr}
 8007e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5e:	4291      	cmp	r1, r2
 8007e60:	d1f9      	bne.n	8007e56 <memcpy+0xe>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <memset>:
 8007e64:	4402      	add	r2, r0
 8007e66:	4603      	mov	r3, r0
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d100      	bne.n	8007e6e <memset+0xa>
 8007e6c:	4770      	bx	lr
 8007e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e72:	e7f9      	b.n	8007e68 <memset+0x4>

08007e74 <cleanup_glue>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	460c      	mov	r4, r1
 8007e78:	6809      	ldr	r1, [r1, #0]
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b109      	cbz	r1, 8007e82 <cleanup_glue+0xe>
 8007e7e:	f7ff fff9 	bl	8007e74 <cleanup_glue>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8a:	f000 b869 	b.w	8007f60 <_free_r>
	...

08007e90 <_reclaim_reent>:
 8007e90:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <_reclaim_reent+0xb4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4283      	cmp	r3, r0
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d051      	beq.n	8007f40 <_reclaim_reent+0xb0>
 8007e9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e9e:	b143      	cbz	r3, 8007eb2 <_reclaim_reent+0x22>
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d14a      	bne.n	8007f3c <_reclaim_reent+0xac>
 8007ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea8:	6819      	ldr	r1, [r3, #0]
 8007eaa:	b111      	cbz	r1, 8007eb2 <_reclaim_reent+0x22>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 f857 	bl	8007f60 <_free_r>
 8007eb2:	6961      	ldr	r1, [r4, #20]
 8007eb4:	b111      	cbz	r1, 8007ebc <_reclaim_reent+0x2c>
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f852 	bl	8007f60 <_free_r>
 8007ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ebe:	b111      	cbz	r1, 8007ec6 <_reclaim_reent+0x36>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 f84d 	bl	8007f60 <_free_r>
 8007ec6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ec8:	b111      	cbz	r1, 8007ed0 <_reclaim_reent+0x40>
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f848 	bl	8007f60 <_free_r>
 8007ed0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ed2:	b111      	cbz	r1, 8007eda <_reclaim_reent+0x4a>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 f843 	bl	8007f60 <_free_r>
 8007eda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007edc:	b111      	cbz	r1, 8007ee4 <_reclaim_reent+0x54>
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f83e 	bl	8007f60 <_free_r>
 8007ee4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ee6:	b111      	cbz	r1, 8007eee <_reclaim_reent+0x5e>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 f839 	bl	8007f60 <_free_r>
 8007eee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ef0:	b111      	cbz	r1, 8007ef8 <_reclaim_reent+0x68>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f834 	bl	8007f60 <_free_r>
 8007ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007efa:	b111      	cbz	r1, 8007f02 <_reclaim_reent+0x72>
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 f82f 	bl	8007f60 <_free_r>
 8007f02:	69a3      	ldr	r3, [r4, #24]
 8007f04:	b1e3      	cbz	r3, 8007f40 <_reclaim_reent+0xb0>
 8007f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f08:	4620      	mov	r0, r4
 8007f0a:	4798      	blx	r3
 8007f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f0e:	b1b9      	cbz	r1, 8007f40 <_reclaim_reent+0xb0>
 8007f10:	4620      	mov	r0, r4
 8007f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f16:	f7ff bfad 	b.w	8007e74 <cleanup_glue>
 8007f1a:	5949      	ldr	r1, [r1, r5]
 8007f1c:	b941      	cbnz	r1, 8007f30 <_reclaim_reent+0xa0>
 8007f1e:	3504      	adds	r5, #4
 8007f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f22:	2d80      	cmp	r5, #128	; 0x80
 8007f24:	68d9      	ldr	r1, [r3, #12]
 8007f26:	d1f8      	bne.n	8007f1a <_reclaim_reent+0x8a>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 f819 	bl	8007f60 <_free_r>
 8007f2e:	e7ba      	b.n	8007ea6 <_reclaim_reent+0x16>
 8007f30:	680e      	ldr	r6, [r1, #0]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f814 	bl	8007f60 <_free_r>
 8007f38:	4631      	mov	r1, r6
 8007f3a:	e7ef      	b.n	8007f1c <_reclaim_reent+0x8c>
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	e7ef      	b.n	8007f20 <_reclaim_reent+0x90>
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	bf00      	nop
 8007f44:	20000014 	.word	0x20000014

08007f48 <__malloc_lock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__malloc_lock+0x8>)
 8007f4a:	f7ff bf7b 	b.w	8007e44 <__retarget_lock_acquire_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20004c7c 	.word	0x20004c7c

08007f54 <__malloc_unlock>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__malloc_unlock+0x8>)
 8007f56:	f7ff bf76 	b.w	8007e46 <__retarget_lock_release_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20004c7c 	.word	0x20004c7c

08007f60 <_free_r>:
 8007f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d044      	beq.n	8007ff0 <_free_r+0x90>
 8007f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6a:	9001      	str	r0, [sp, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f72:	bfb8      	it	lt
 8007f74:	18e4      	addlt	r4, r4, r3
 8007f76:	f7ff ffe7 	bl	8007f48 <__malloc_lock>
 8007f7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <_free_r+0x94>)
 8007f7c:	9801      	ldr	r0, [sp, #4]
 8007f7e:	6813      	ldr	r3, [r2, #0]
 8007f80:	b933      	cbnz	r3, 8007f90 <_free_r+0x30>
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	6014      	str	r4, [r2, #0]
 8007f86:	b003      	add	sp, #12
 8007f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f8c:	f7ff bfe2 	b.w	8007f54 <__malloc_unlock>
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d908      	bls.n	8007fa6 <_free_r+0x46>
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1961      	adds	r1, r4, r5
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf01      	itttt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	1949      	addeq	r1, r1, r5
 8007fa2:	6021      	streq	r1, [r4, #0]
 8007fa4:	e7ed      	b.n	8007f82 <_free_r+0x22>
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b10b      	cbz	r3, 8007fb0 <_free_r+0x50>
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	d9fa      	bls.n	8007fa6 <_free_r+0x46>
 8007fb0:	6811      	ldr	r1, [r2, #0]
 8007fb2:	1855      	adds	r5, r2, r1
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	d10b      	bne.n	8007fd0 <_free_r+0x70>
 8007fb8:	6824      	ldr	r4, [r4, #0]
 8007fba:	4421      	add	r1, r4
 8007fbc:	1854      	adds	r4, r2, r1
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	6011      	str	r1, [r2, #0]
 8007fc2:	d1e0      	bne.n	8007f86 <_free_r+0x26>
 8007fc4:	681c      	ldr	r4, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	6053      	str	r3, [r2, #4]
 8007fca:	4421      	add	r1, r4
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	e7da      	b.n	8007f86 <_free_r+0x26>
 8007fd0:	d902      	bls.n	8007fd8 <_free_r+0x78>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	e7d6      	b.n	8007f86 <_free_r+0x26>
 8007fd8:	6825      	ldr	r5, [r4, #0]
 8007fda:	1961      	adds	r1, r4, r5
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	bf04      	itt	eq
 8007fe0:	6819      	ldreq	r1, [r3, #0]
 8007fe2:	685b      	ldreq	r3, [r3, #4]
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	bf04      	itt	eq
 8007fe8:	1949      	addeq	r1, r1, r5
 8007fea:	6021      	streq	r1, [r4, #0]
 8007fec:	6054      	str	r4, [r2, #4]
 8007fee:	e7ca      	b.n	8007f86 <_free_r+0x26>
 8007ff0:	b003      	add	sp, #12
 8007ff2:	bd30      	pop	{r4, r5, pc}
 8007ff4:	20004c80 	.word	0x20004c80

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
