
nrf_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d98  08008d98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008da0  08008da0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c4c  20000078  08008e20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cc4  08008e20  00024cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e58d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bca  00000000  00000000  0003e635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00042200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00043a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043ea  00000000  00000000  00045168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4de  00000000  00000000  00049552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5375  00000000  00000000  00063a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c98  00000000  00000000  00108df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008af0 	.word	0x08008af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08008af0 	.word	0x08008af0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Set_Servo_Angle>:
		osDelay(50);
	}
}
// -------------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t ServoNum, uint8_t angle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	460a      	mov	r2, r1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	4613      	mov	r3, r2
 8000592:	71bb      	strb	r3, [r7, #6]
	uint32_t DutyCycle = (200*angle)/180;		// convert angle into DutyCycle
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	22c8      	movs	r2, #200	; 0xc8
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <Set_Servo_Angle+0x40>)
 800059e:	fb82 1203 	smull	r1, r2, r2, r3
 80005a2:	441a      	add	r2, r3
 80005a4:	11d2      	asrs	r2, r2, #7
 80005a6:	17db      	asrs	r3, r3, #31
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	60fb      	str	r3, [r7, #12]

	DutyCycle = DutyCycle + 45;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	332d      	adds	r3, #45	; 0x2d
 80005b0:	60fb      	str	r3, [r7, #12]

	PWM_Tim_Init(ServoNum, DutyCycle);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	68f9      	ldr	r1, [r7, #12]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f806 	bl	80005c8 <PWM_Tim_Init>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	b60b60b7 	.word	0xb60b60b7

080005c8 <PWM_Tim_Init>:
// -------------------------------------------------------------------------------------
void PWM_Tim_Init(uint8_t ServoNum, uint32_t DutyCycle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef *htim;
	uint32_t chanel = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28

	if((ServoNum >= 1) && (ServoNum <= 2))			// Servo motor 1 and 2 connect to Ttmer2
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00e      	beq.n	80005fc <PWM_Tim_Init+0x34>
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d80b      	bhi.n	80005fc <PWM_Tim_Init+0x34>
	{
		htim = &htim2;
 80005e4:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <PWM_Tim_Init+0xcc>)
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(ServoNum == 1)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d101      	bne.n	80005f2 <PWM_Tim_Init+0x2a>
		{
			chanel = TIM_CHANNEL_1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 2)
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d101      	bne.n	80005fc <PWM_Tim_Init+0x34>
		{
			chanel = TIM_CHANNEL_2;
 80005f8:	2304      	movs	r3, #4
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	}
	if((ServoNum >= 3) && (ServoNum <= 5))			// Servo motor 3, 4 and 5 connect to Ttmer4
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d913      	bls.n	800062a <PWM_Tim_Init+0x62>
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b05      	cmp	r3, #5
 8000606:	d810      	bhi.n	800062a <PWM_Tim_Init+0x62>
	{
		htim = &htim4;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <PWM_Tim_Init+0xd0>)
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(ServoNum == 3)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d101      	bne.n	8000616 <PWM_Tim_Init+0x4e>
		{
			chanel = TIM_CHANNEL_1;
 8000612:	2300      	movs	r3, #0
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 4)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d101      	bne.n	8000620 <PWM_Tim_Init+0x58>
		{
			chanel = TIM_CHANNEL_2;
 800061c:	2304      	movs	r3, #4
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(ServoNum == 5)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b05      	cmp	r3, #5
 8000624:	d101      	bne.n	800062a <PWM_Tim_Init+0x62>
		{
			chanel = TIM_CHANNEL_3;
 8000626:	2308      	movs	r3, #8
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
		}
	}


	TIM_OC_InitTypeDef sConfigOC = {0};
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = DutyCycle-1;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

	if(HAL_TIM_PWM_Stop(htim, chanel) != HAL_OK)
 8000650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000654:	f003 fcba 	bl	8003fcc <HAL_TIM_PWM_Stop>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <PWM_Tim_Init+0x9a>
	{
		Error_Handler();
 800065e:	f000 fbf9 	bl	8000e54 <Error_Handler>
	}

	if(HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, chanel) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000668:	4619      	mov	r1, r3
 800066a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800066c:	f003 fe1a 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <PWM_Tim_Init+0xb2>
	{
		Error_Handler();
 8000676:	f000 fbed 	bl	8000e54 <Error_Handler>
	}

	if(HAL_TIM_PWM_Start(htim, chanel) != HAL_OK)
 800067a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800067c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800067e:	f003 fbf5 	bl	8003e6c <HAL_TIM_PWM_Start>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <PWM_Tim_Init+0xc4>
	{
		Error_Handler();
 8000688:	f000 fbe4 	bl	8000e54 <Error_Handler>
	}
}
 800068c:	bf00      	nop
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000015c 	.word	0x2000015c
 8000698:	200001a4 	.word	0x200001a4

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f001 f9d0 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f864 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 faaa 	bl	8000c00 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006ac:	f000 f970 	bl	8000990 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80006b0:	f000 fa7c 	bl	8000bac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80006b4:	f000 f8c6 	bl	8000844 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006b8:	f000 f9a0 	bl	80009fc <MX_TIM2_Init>
  MX_TIM4_Init();
 80006bc:	f000 fa06 	bl	8000acc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c4:	f001 fa00 	bl	8001ac8 <HAL_Delay>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c8:	f004 fd90 	bl	80051ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80006cc:	4a19      	ldr	r2, [pc, #100]	; (8000734 <main+0x98>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f004 fe82 	bl	80053da <osSemaphoreNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <main+0x9c>)
 80006da:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RQueue */
  RQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &RQueue_attributes);
 80006dc:	4a17      	ldr	r2, [pc, #92]	; (800073c <main+0xa0>)
 80006de:	2102      	movs	r1, #2
 80006e0:	2005      	movs	r0, #5
 80006e2:	f004 ff03 	bl	80054ec <osMessageQueueNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <main+0xa4>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of DATAQueue */
  DATAQueueHandle = osMessageQueueNew (1, sizeof(DATA), &DATAQueue_attributes);
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <main+0xa8>)
 80006ee:	210a      	movs	r1, #10
 80006f0:	2001      	movs	r0, #1
 80006f2:	f004 fefb 	bl	80054ec <osMessageQueueNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <main+0xac>)
 80006fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <main+0xb0>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <main+0xb4>)
 8000702:	f004 fdbd 	bl	8005280 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <main+0xb8>)
 800070a:	6013      	str	r3, [r2, #0]

  /* creation of tx_task */
  tx_taskHandle = osThreadNew(Start_tx_task, NULL, &tx_task_attributes);
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <main+0xbc>)
 800070e:	2100      	movs	r1, #0
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <main+0xc0>)
 8000712:	f004 fdb5 	bl	8005280 <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <main+0xc4>)
 800071a:	6013      	str	r3, [r2, #0]

  /* creation of rx_Task */
  rx_TaskHandle = osThreadNew(Start_rx_Task, NULL, &rx_Task_attributes);
 800071c:	4a11      	ldr	r2, [pc, #68]	; (8000764 <main+0xc8>)
 800071e:	2100      	movs	r1, #0
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <main+0xcc>)
 8000722:	f004 fdad 	bl	8005280 <osThreadNew>
 8000726:	4603      	mov	r3, r0
 8000728:	4a10      	ldr	r2, [pc, #64]	; (800076c <main+0xd0>)
 800072a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800072c:	f004 fd82 	bl	8005234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000730:	e7fe      	b.n	8000730 <main+0x94>
 8000732:	bf00      	nop
 8000734:	08008cdc 	.word	0x08008cdc
 8000738:	20000244 	.word	0x20000244
 800073c:	08008cac 	.word	0x08008cac
 8000740:	2000023c 	.word	0x2000023c
 8000744:	08008cc4 	.word	0x08008cc4
 8000748:	20000240 	.word	0x20000240
 800074c:	08008c40 	.word	0x08008c40
 8000750:	08000d35 	.word	0x08000d35
 8000754:	20000230 	.word	0x20000230
 8000758:	08008c64 	.word	0x08008c64
 800075c:	08000d45 	.word	0x08000d45
 8000760:	20000234 	.word	0x20000234
 8000764:	08008c88 	.word	0x08008c88
 8000768:	08000e21 	.word	0x08000e21
 800076c:	20000238 	.word	0x20000238

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 fcd6 	bl	8008130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <SystemClock_Config+0xcc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <SystemClock_Config+0xd0>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <SystemClock_Config+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007e4:	2319      	movs	r3, #25
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fff9 	bl	80027f0 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000804:	f000 fb26 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2102      	movs	r1, #2
 8000824:	4618      	mov	r0, r3
 8000826:	f002 fa5b 	bl	8002ce0 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000830:	f000 fb10 	bl	8000e54 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <MX_ADC1_Init+0x140>)
 8000858:	4a4b      	ldr	r2, [pc, #300]	; (8000988 <MX_ADC1_Init+0x144>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800085c:	4b49      	ldr	r3, [pc, #292]	; (8000984 <MX_ADC1_Init+0x140>)
 800085e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000862:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000864:	4b47      	ldr	r3, [pc, #284]	; (8000984 <MX_ADC1_Init+0x140>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_ADC1_Init+0x140>)
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000870:	4b44      	ldr	r3, [pc, #272]	; (8000984 <MX_ADC1_Init+0x140>)
 8000872:	2201      	movs	r2, #1
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_ADC1_Init+0x140>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087e:	4b41      	ldr	r3, [pc, #260]	; (8000984 <MX_ADC1_Init+0x140>)
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000884:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <MX_ADC1_Init+0x140>)
 8000886:	4a41      	ldr	r2, [pc, #260]	; (800098c <MX_ADC1_Init+0x148>)
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088a:	4b3e      	ldr	r3, [pc, #248]	; (8000984 <MX_ADC1_Init+0x140>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8000890:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <MX_ADC1_Init+0x140>)
 8000892:	2207      	movs	r2, #7
 8000894:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <MX_ADC1_Init+0x140>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <MX_ADC1_Init+0x140>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a4:	4837      	ldr	r0, [pc, #220]	; (8000984 <MX_ADC1_Init+0x140>)
 80008a6:	f001 f933 	bl	8001b10 <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 fad0 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008bc:	2301      	movs	r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	482f      	ldr	r0, [pc, #188]	; (8000984 <MX_ADC1_Init+0x140>)
 80008c6:	f001 fa95 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fac0 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008d4:	2305      	movs	r3, #5
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4828      	ldr	r0, [pc, #160]	; (8000984 <MX_ADC1_Init+0x140>)
 80008e2:	f001 fa87 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008ec:	f000 fab2 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008f0:	2306      	movs	r3, #6
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_ADC1_Init+0x140>)
 80008fe:	f001 fa79 	bl	8001df4 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000908:	f000 faa4 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800090c:	2307      	movs	r3, #7
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_ADC1_Init+0x140>)
 800091a:	f001 fa6b 	bl	8001df4 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000924:	f000 fa96 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000928:	2308      	movs	r3, #8
 800092a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800092c:	2305      	movs	r3, #5
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <MX_ADC1_Init+0x140>)
 8000936:	f001 fa5d 	bl	8001df4 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000940:	f000 fa88 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000948:	2306      	movs	r3, #6
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ADC1_Init+0x140>)
 8000952:	f001 fa4f 	bl	8001df4 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800095c:	f000 fa7a 	bl	8000e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000960:	2309      	movs	r3, #9
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_ADC1_Init+0x140>)
 800096e:	f001 fa41 	bl	8001df4 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000978:	f000 fa6c 	bl	8000e54 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000bc 	.word	0x200000bc
 8000988:	40012000 	.word	0x40012000
 800098c:	0f000001 	.word	0x0f000001

08000990 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI2_Init+0x64>)
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_SPI2_Init+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI2_Init+0x64>)
 800099c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009dc:	220a      	movs	r2, #10
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_SPI2_Init+0x64>)
 80009e2:	f002 fb8f 	bl	8003104 <HAL_SPI_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009ec:	f000 fa32 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000104 	.word	0x20000104
 80009f8:	40003800 	.word	0x40003800

080009fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a28:	f240 227f 	movw	r2, #639	; 0x27f
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a36:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a4a:	f003 f9bf 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 f9fe 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4619      	mov	r1, r3
 8000a66:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a68:	f003 ff38 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a72:	f000 f9ef 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8000a7a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000a90:	f003 fc08 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000a9a:	f000 f9db 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000aaa:	f003 fbfb 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000ab4:	f000 f9ce 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM2_Init+0xcc>)
 8000aba:	f000 fae3 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000015c 	.word	0x2000015c

08000acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000af0:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <MX_TIM4_Init+0xdc>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000af6:	f240 227f 	movw	r2, #639	; 0x27f
 8000afa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b18:	f003 f958 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000b22:	f000 f997 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4619      	mov	r1, r3
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b36:	f003 fed1 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000b40:	f000 f988 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b5c:	f003 fba2 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000b66:	f000 f975 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b72:	f003 fb97 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000b7c:	f000 f96a 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2208      	movs	r2, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b88:	f003 fb8c 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000b92:	f000 f95f 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM4_Init+0xd8>)
 8000b98:	f000 fa74 	bl	8001084 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001a4 	.word	0x200001a4
 8000ba8:	40000800 	.word	0x40000800

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f003 fefc 	bl	80049e0 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f931 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001ec 	.word	0x200001ec
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a33      	ldr	r2, [pc, #204]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_GPIO_Init+0x124>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	4826      	ldr	r0, [pc, #152]	; (8000d28 <MX_GPIO_Init+0x128>)
 8000c8e:	f001 fd57 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2118      	movs	r1, #24
 8000c96:	4825      	ldr	r0, [pc, #148]	; (8000d2c <MX_GPIO_Init+0x12c>)
 8000c98:	f001 fd52 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_GPIO_Init+0x128>)
 8000cb6:	f001 fba7 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <MX_GPIO_Init+0x12c>)
 8000cd0:	f001 fb9a 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 8000cd4:	2318      	movs	r3, #24
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <MX_GPIO_Init+0x12c>)
 8000cec:	f001 fb8c 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <MX_GPIO_Init+0x130>)
 8000d06:	f001 fb7f 	bl	8002408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	2008      	movs	r0, #8
 8000d10:	f001 fb50 	bl	80023b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d14:	2008      	movs	r0, #8
 8000d16:	f001 fb69 	bl	80023ec <HAL_NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400

08000d34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]


  for(;;)
  {

	  osDelay(10);
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f004 fb31 	bl	80053a4 <osDelay>
 8000d42:	e7fb      	b.n	8000d3c <StartDefaultTask+0x8>

08000d44 <Start_tx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_tx_task */
void Start_tx_task(void *argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_tx_task */
  /* Infinite loop */
#if NRF_MODE == RX
	uint16_t data = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	82fb      	strh	r3, [r7, #22]
	DATA DATA_t;

	NRF24_init_RX();
 8000d50:	f000 fb6c 	bl	800142c <NRF24_init_RX>
#endif

	for(;;)
	{
#if NRF_MODE == RX
	NRF24L01_Receive_Real_Data();
 8000d54:	f000 fd12 	bl	800177c <NRF24L01_Receive_Real_Data>

	if(xQueueReceive(DATAQueueHandle, &DATA_t, 0))
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <Start_tx_task+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f005 f860 	bl	8005e28 <xQueueReceive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d04c      	beq.n	8000e08 <Start_tx_task+0xc4>
	{
		// convert R data into angle
		DATA_t.R1 = DATA_t.R1 / 23;
 8000d6e:	89bb      	ldrh	r3, [r7, #12]
 8000d70:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <Start_tx_task+0xd8>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	81bb      	strh	r3, [r7, #12]
		DATA_t.R2 = DATA_t.R2 / 23;
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <Start_tx_task+0xd8>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	81fb      	strh	r3, [r7, #14]
		DATA_t.R3 = DATA_t.R3 / 23;
 8000d8a:	8a3b      	ldrh	r3, [r7, #16]
 8000d8c:	4a23      	ldr	r2, [pc, #140]	; (8000e1c <Start_tx_task+0xd8>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	823b      	strh	r3, [r7, #16]
		DATA_t.R4 = DATA_t.R4 / 23;
 8000d98:	8a7b      	ldrh	r3, [r7, #18]
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <Start_tx_task+0xd8>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	827b      	strh	r3, [r7, #18]
		DATA_t.R5 = DATA_t.R5 / 23;
 8000da6:	8abb      	ldrh	r3, [r7, #20]
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <Start_tx_task+0xd8>)
 8000daa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	82bb      	strh	r3, [r7, #20]

		// set angle for all servo motors
		Set_Servo_Angle(1, DATA_t.R1);
 8000db4:	89bb      	ldrh	r3, [r7, #12]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4619      	mov	r1, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fbe2 	bl	8000584 <Set_Servo_Angle>
		Set_Servo_Angle(2, 180 - DATA_t.R2);
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff fbd8 	bl	8000584 <Set_Servo_Angle>
		Set_Servo_Angle(3, 180 - DATA_t.R3);
 8000dd4:	8a3b      	ldrh	r3, [r7, #16]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	2003      	movs	r0, #3
 8000de4:	f7ff fbce 	bl	8000584 <Set_Servo_Angle>
		Set_Servo_Angle(4, DATA_t.R4);
 8000de8:	8a7b      	ldrh	r3, [r7, #18]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	2004      	movs	r0, #4
 8000df0:	f7ff fbc8 	bl	8000584 <Set_Servo_Angle>
		Set_Servo_Angle(5, 180 - DATA_t.R5);
 8000df4:	8abb      	ldrh	r3, [r7, #20]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	2005      	movs	r0, #5
 8000e04:	f7ff fbbe 	bl	8000584 <Set_Servo_Angle>
	}
	osDelay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f004 facb 	bl	80053a4 <osDelay>

#endif
		osDelay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f004 fac8 	bl	80053a4 <osDelay>
	NRF24L01_Receive_Real_Data();
 8000e14:	e79e      	b.n	8000d54 <Start_tx_task+0x10>
 8000e16:	bf00      	nop
 8000e18:	20000240 	.word	0x20000240
 8000e1c:	b21642c9 	.word	0xb21642c9

08000e20 <Start_rx_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_rx_Task */
void Start_rx_Task(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]


		NRF24L01_Transmit_Real_Data(adc_data);
#endif

		osDelay(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f004 fabb 	bl	80053a4 <osDelay>
 8000e2e:	e7fb      	b.n	8000e28 <Start_rx_Task+0x8>

08000e30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e42:	f000 fe21 	bl	8001a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40014400 	.word	0x40014400

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_MspInit+0x54>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f06f 0001 	mvn.w	r0, #1
 8000ea6:	f001 fa85 	bl	80023b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <HAL_ADC_MspInit+0xc0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d149      	bne.n	8000f6e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_ADC_MspInit+0xc4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000f2e:	23e3      	movs	r3, #227	; 0xe3
 8000f30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <HAL_ADC_MspInit+0xc8>)
 8000f42:	f001 fa61 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f46:	2303      	movs	r3, #3
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f5a:	f001 fa55 	bl	8002408 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	2012      	movs	r0, #18
 8000f64:	f001 fa26 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f68:	2012      	movs	r0, #18
 8000f6a:	f001 fa3f 	bl	80023ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_SPI_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_SPI_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000fe2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_SPI_MspInit+0x8c>)
 8001000:	f001 fa02 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40003800 	.word	0x40003800
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001028:	d10e      	bne.n	8001048 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001046:	e012      	b.n	800106e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_TIM_PWM_MspInit+0x68>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_PWM_MspInit+0x64>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40000800 	.word	0x40000800

08001084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d13d      	bne.n	8001122 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a31      	ldr	r2, [pc, #196]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f0:	2301      	movs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	481f      	ldr	r0, [pc, #124]	; (8001178 <HAL_TIM_MspPostInit+0xf4>)
 80010fc:	f001 f984 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001100:	2308      	movs	r3, #8
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001110:	2301      	movs	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <HAL_TIM_MspPostInit+0xf8>)
 800111c:	f001 f974 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001120:	e023      	b.n	800116a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_TIM_MspPostInit+0xfc>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d11e      	bne.n	800116a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_TIM_MspPostInit+0xf0>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001148:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800115a:	2302      	movs	r3, #2
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_TIM_MspPostInit+0xf8>)
 8001166:	f001 f94f 	bl	8002408 <HAL_GPIO_Init>
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40000800 	.word	0x40000800

08001184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12c      	bne.n	8001200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_UART_MspInit+0x88>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x88>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_UART_MspInit+0x88>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_UART_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f0:	2307      	movs	r3, #7
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x8c>)
 80011fc:	f001 f904 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40011000 	.word	0x40011000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_InitTick+0xd0>)
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_InitTick+0xd0>)
 800122e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001232:	6453      	str	r3, [r2, #68]	; 0x44
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_InitTick+0xd0>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 ff28 	bl	80030a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001250:	f001 ff12 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8001254:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_InitTick+0xd4>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3b01      	subs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_InitTick+0xd8>)
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_InitTick+0xdc>)
 8001268:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_InitTick+0xd8>)
 800126c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001270:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_InitTick+0xd8>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_InitTick+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_InitTick+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_InitTick+0xd8>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <HAL_InitTick+0xd8>)
 800128c:	f002 fce2 	bl	8003c54 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129a:	2b00      	cmp	r3, #0
 800129c:	d11b      	bne.n	80012d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800129e:	4813      	ldr	r0, [pc, #76]	; (80012ec <HAL_InitTick+0xd8>)
 80012a0:	f002 fd32 	bl	8003d08 <HAL_TIM_Base_Start_IT>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80012aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d111      	bne.n	80012d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012b2:	2019      	movs	r0, #25
 80012b4:	f001 f89a 	bl	80023ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d808      	bhi.n	80012d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80012be:	2200      	movs	r2, #0
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	2019      	movs	r0, #25
 80012c4:	f001 f876 	bl	80023b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_InitTick+0xe0>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e002      	b.n	80012d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	20000248 	.word	0x20000248
 80012f0:	40014400 	.word	0x40014400
 80012f4:	20000008 	.word	0x20000008

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8001328:	2004      	movs	r0, #4
 800132a:	f001 fa3d 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <ADC_IRQHandler+0x10>)
 800133a:	f000 fc2c 	bl	8001b96 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000bc 	.word	0x200000bc

08001348 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800134e:	f002 fea1 	bl	8004094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000248 	.word	0x20000248

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f006 fe96 	bl	80080bc <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20010000 	.word	0x20010000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000290 	.word	0x20000290
 80013c4:	20004cc8 	.word	0x20004cc8

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <DelayMicro>:
void print_Data_Ower_uart(uint8_t *RX_BUF);
void parsing_Data(uint8_t *RX_BUF);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <DelayMicro+0x38>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <DelayMicro+0x3c>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0a9b      	lsrs	r3, r3, #10
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 800140a:	bf00      	nop
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1fa      	bne.n	800140c <DelayMicro+0x20>
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20000000 	.word	0x20000000
 8001428:	02659117 	.word	0x02659117

0800142c <NRF24_init_RX>:
	 NRF24L01_TX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_init_RX(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	 CE_RESET;
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4825      	ldr	r0, [pc, #148]	; (80014cc <NRF24_init_RX+0xa0>)
 8001436:	f001 f983 	bl	8002740 <HAL_GPIO_WritePin>
	 //DelayMicro(5000);
	 osDelay(5);
 800143a:	2005      	movs	r0, #5
 800143c:	f003 ffb2 	bl	80053a4 <osDelay>
//	 HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001440:	210a      	movs	r1, #10
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f87c 	bl	8001540 <NRF24_WriteReg>
	 //DelayMicro(5000);
//	 HAL_Delay(5);
	 osDelay(5);
 8001448:	2005      	movs	r0, #5
 800144a:	f003 ffab 	bl	80053a4 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x02); 			// Enable pipe1
 800144e:	2102      	movs	r1, #2
 8001450:	2001      	movs	r0, #1
 8001452:	f000 f875 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x02); 		// Enable Pipe1
 8001456:	2102      	movs	r1, #2
 8001458:	2002      	movs	r0, #2
 800145a:	f000 f871 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800145e:	2101      	movs	r1, #1
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f86d 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 8001466:	215f      	movs	r1, #95	; 0x5f
 8001468:	2004      	movs	r0, #4
 800146a:	f000 f869 	bl	8001540 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 800146e:	f000 f895 	bl	800159c <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	201d      	movs	r0, #29
 8001476:	f000 f863 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 800147a:	2100      	movs	r1, #0
 800147c:	201c      	movs	r0, #28
 800147e:	f000 f85f 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 8001482:	2170      	movs	r1, #112	; 0x70
 8001484:	2007      	movs	r0, #7
 8001486:	f000 f85b 	bl	8001540 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			//   2476 MHz
 800148a:	214c      	movs	r1, #76	; 0x4c
 800148c:	2005      	movs	r0, #5
 800148e:	f000 f857 	bl	8001540 <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, 0x06);		// TX_PWR:0dBm, Datarate:1Mbps  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< WAS
	 //NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	 NRF24_WriteReg(RF_SETUP, 0x0F);  		// TX_PWR:0dBm, Datarate: 1Mbps	- New version
 8001492:	210f      	movs	r1, #15
 8001494:	2006      	movs	r0, #6
 8001496:	f000 f853 	bl	8001540 <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800149a:	2203      	movs	r2, #3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <NRF24_init_RX+0xa4>)
 800149e:	2010      	movs	r0, #16
 80014a0:	f000 f8d0 	bl	8001644 <NRF24_Write_Buf>
	 NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 80014a4:	2203      	movs	r2, #3
 80014a6:	490a      	ldr	r1, [pc, #40]	; (80014d0 <NRF24_init_RX+0xa4>)
 80014a8:	200b      	movs	r0, #11
 80014aa:	f000 f8cb 	bl	8001644 <NRF24_Write_Buf>
	 NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);	 //Number of bytes in RX payload in data pipe 1
 80014ae:	210a      	movs	r1, #10
 80014b0:	2012      	movs	r0, #18
 80014b2:	f000 f845 	bl	8001540 <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 80014b6:	f000 f93b 	bl	8001730 <NRF24L01_RX_Mode>
	 LED_OFF;
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <NRF24_init_RX+0xa8>)
 80014c2:	f001 f93d 	bl	8002740 <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020000 	.word	0x40020000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	40020800 	.word	0x40020800

080014d8 <NRF24_ReadReg>:
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 80014e6:	2200      	movs	r2, #0
 80014e8:	2110      	movs	r1, #16
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <NRF24_ReadReg+0x60>)
 80014ec:	f001 f928 	bl	8002740 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 80014f0:	f107 020f 	add.w	r2, r7, #15
 80014f4:	1df9      	adds	r1, r7, #7
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <NRF24_ReadReg+0x64>)
 8001500:	f002 f8d6 	bl	80036b0 <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b07      	cmp	r3, #7
 8001508:	d00c      	beq.n	8001524 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 800150e:	f107 020f 	add.w	r2, r7, #15
 8001512:	f107 010e 	add.w	r1, r7, #14
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <NRF24_ReadReg+0x64>)
 8001520:	f002 f8c6 	bl	80036b0 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <NRF24_ReadReg+0x60>)
 800152a:	f001 f909 	bl	8002740 <HAL_GPIO_WritePin>

	return dt;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40020000 	.word	0x40020000
 800153c:	20000104 	.word	0x20000104

08001540 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f043 0320 	orr.w	r3, r3, #32
 8001556:	b2db      	uxtb	r3, r3
 8001558:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800155a:	2200      	movs	r2, #0
 800155c:	2110      	movs	r1, #16
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <NRF24_WriteReg+0x54>)
 8001560:	f001 f8ee 	bl	8002740 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8001564:	1df9      	adds	r1, r7, #7
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	2201      	movs	r2, #1
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <NRF24_WriteReg+0x58>)
 800156e:	f001 fe52 	bl	8003216 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 8001572:	1db9      	adds	r1, r7, #6
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	2201      	movs	r2, #1
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <NRF24_WriteReg+0x58>)
 800157c:	f001 fe4b 	bl	8003216 <HAL_SPI_Transmit>

	CS_OFF;
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <NRF24_WriteReg+0x54>)
 8001586:	f001 f8db 	bl	8002740 <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020000 	.word	0x40020000
 8001598:	20000104 	.word	0x20000104

0800159c <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 80015a2:	2350      	movs	r3, #80	; 0x50
 80015a4:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <NRF24_ToggleFeatures+0x4c>)
 80015ac:	f001 f8c8 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80015b0:	1d39      	adds	r1, r7, #4
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	2201      	movs	r2, #1
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <NRF24_ToggleFeatures+0x50>)
 80015ba:	f001 fe2c 	bl	8003216 <HAL_SPI_Transmit>

	DelayMicro(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff14 	bl	80013ec <DelayMicro>

	dt[0] = 0x73;
 80015c4:	2373      	movs	r3, #115	; 0x73
 80015c6:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80015c8:	1d39      	adds	r1, r7, #4
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	2201      	movs	r2, #1
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <NRF24_ToggleFeatures+0x50>)
 80015d2:	f001 fe20 	bl	8003216 <HAL_SPI_Transmit>
	CS_OFF;
 80015d6:	2201      	movs	r2, #1
 80015d8:	2110      	movs	r1, #16
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <NRF24_ToggleFeatures+0x4c>)
 80015dc:	f001 f8b0 	bl	8002740 <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020000 	.word	0x40020000
 80015ec:	20000104 	.word	0x20000104

080015f0 <NRF24_Read_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 8001600:	2200      	movs	r2, #0
 8001602:	2110      	movs	r1, #16
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <NRF24_Read_Buf+0x4c>)
 8001606:	f001 f89b 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 800160a:	1df9      	adds	r1, r7, #7
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	2201      	movs	r2, #1
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <NRF24_Read_Buf+0x50>)
 8001614:	f001 fdff 	bl	8003216 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	b29a      	uxth	r2, r3
 800161c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <NRF24_Read_Buf+0x50>)
 8001624:	f001 ff33 	bl	800348e <HAL_SPI_Receive>

	CS_OFF;
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <NRF24_Read_Buf+0x4c>)
 800162e:	f001 f887 	bl	8002740 <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020000 	.word	0x40020000
 8001640:	20000104 	.word	0x20000104

08001644 <NRF24_Write_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	b2db      	uxtb	r3, r3
 800165c:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800165e:	2200      	movs	r2, #0
 8001660:	2110      	movs	r1, #16
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <NRF24_Write_Buf+0x5c>)
 8001664:	f001 f86c 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8001668:	1df9      	adds	r1, r7, #7
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	2201      	movs	r2, #1
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <NRF24_Write_Buf+0x60>)
 8001672:	f001 fdd0 	bl	8003216 <HAL_SPI_Transmit>

	DelayMicro(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff feb8 	bl	80013ec <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	b29a      	uxth	r2, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	6839      	ldr	r1, [r7, #0]
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <NRF24_Write_Buf+0x60>)
 8001688:	f001 fdc5 	bl	8003216 <HAL_SPI_Transmit>

	CS_OFF;
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <NRF24_Write_Buf+0x5c>)
 8001692:	f001 f855 	bl	8002740 <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020000 	.word	0x40020000
 80016a4:	20000104 	.word	0x20000104

080016a8 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 80016ae:	23e2      	movs	r3, #226	; 0xe2
 80016b0:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80016b2:	2200      	movs	r2, #0
 80016b4:	2110      	movs	r1, #16
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <NRF24_FlushRX+0x3c>)
 80016b8:	f001 f842 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80016bc:	1d39      	adds	r1, r7, #4
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	2201      	movs	r2, #1
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <NRF24_FlushRX+0x40>)
 80016c6:	f001 fda6 	bl	8003216 <HAL_SPI_Transmit>
	DelayMicro(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fe8e 	bl	80013ec <DelayMicro>
	CS_OFF;
 80016d0:	2201      	movs	r2, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <NRF24_FlushRX+0x3c>)
 80016d6:	f001 f833 	bl	8002740 <HAL_GPIO_WritePin>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40020000 	.word	0x40020000
 80016e8:	20000104 	.word	0x20000104

080016ec <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 80016f2:	23e1      	movs	r3, #225	; 0xe1
 80016f4:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <NRF24_FlushTX+0x3c>)
 80016fc:	f001 f820 	bl	8002740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001700:	1d39      	adds	r1, r7, #4
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	2201      	movs	r2, #1
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <NRF24_FlushTX+0x40>)
 800170a:	f001 fd84 	bl	8003216 <HAL_SPI_Transmit>
	DelayMicro(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fe6c 	bl	80013ec <DelayMicro>
	CS_OFF;
 8001714:	2201      	movs	r2, #1
 8001716:	2110      	movs	r1, #16
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <NRF24_FlushTX+0x3c>)
 800171a:	f001 f811 	bl	8002740 <HAL_GPIO_WritePin>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40020000 	.word	0x40020000
 800172c:	20000104 	.word	0x20000104

08001730 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fecc 	bl	80014d8 <NRF24_ReadReg>
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f043 0303 	orr.w	r3, r3, #3
 800174a:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4619      	mov	r1, r3
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff fef5 	bl	8001540 <NRF24_WriteReg>
	CE_SET;
 8001756:	2201      	movs	r2, #1
 8001758:	2108      	movs	r1, #8
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <NRF24L01_RX_Mode+0x48>)
 800175c:	f000 fff0 	bl	8002740 <HAL_GPIO_WritePin>

	DelayMicro(150);
 8001760:	2096      	movs	r0, #150	; 0x96
 8001762:	f7ff fe43 	bl	80013ec <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8001766:	f7ff ff9f 	bl	80016a8 <NRF24_FlushRX>
	NRF24_FlushTX();
 800176a:	f7ff ffbf 	bl	80016ec <NRF24_FlushTX>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000

0800177c <NRF24L01_Receive_Real_Data>:
//	}

}
// -------------------------------------------------------------------------------------
void NRF24L01_Receive_Real_Data(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8001786:	2300      	movs	r3, #0
 8001788:	80bb      	strh	r3, [r7, #4]

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}			//	 Замінити це на нотифікацію від зміни ножки або семафор
 800178a:	bf00      	nop
 800178c:	2104      	movs	r1, #4
 800178e:	481f      	ldr	r0, [pc, #124]	; (800180c <NRF24L01_Receive_Real_Data+0x90>)
 8001790:	f000 ffbe 	bl	8002710 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d0f8      	beq.n	800178c <NRF24L01_Receive_Real_Data+0x10>

	status = NRF24_ReadReg(STATUS);
 800179a:	2007      	movs	r0, #7
 800179c:	f7ff fe9c 	bl	80014d8 <NRF24_ReadReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]

	sprintf(str1,"STATUS: 0x%02X\r\n",status);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4919      	ldr	r1, [pc, #100]	; (8001810 <NRF24L01_Receive_Real_Data+0x94>)
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <NRF24L01_Receive_Real_Data+0x98>)
 80017ac:	f006 fdd6 	bl	800835c <siprintf>
	//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	LED_TGL;
 80017b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b4:	4818      	ldr	r0, [pc, #96]	; (8001818 <NRF24L01_Receive_Real_Data+0x9c>)
 80017b6:	f000 ffdc 	bl	8002772 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff fe16 	bl	80013ec <DelayMicro>

	status = NRF24_ReadReg(STATUS);
 80017c0:	2007      	movs	r0, #7
 80017c2:	f7ff fe89 	bl	80014d8 <NRF24_ReadReg>
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]

	if(status & 0x40)			// If new data in RX buffer available
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <NRF24L01_Receive_Real_Data+0x86>
	{
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80017d4:	220a      	movs	r2, #10
 80017d6:	4911      	ldr	r1, [pc, #68]	; (800181c <NRF24L01_Receive_Real_Data+0xa0>)
 80017d8:	2061      	movs	r0, #97	; 0x61
 80017da:	f7ff ff09 	bl	80015f0 <NRF24_Read_Buf>
	    dt = *(int16_t*)RX_BUF;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <NRF24L01_Receive_Real_Data+0xa0>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	80bb      	strh	r3, [r7, #4]
	    //Clear_7219();
	    //Number_7219(dt);
	    dt = *(int16_t*)(RX_BUF+2);
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <NRF24L01_Receive_Real_Data+0xa4>)
 80017e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ec:	80bb      	strh	r3, [r7, #4]
	    //NumberL_7219(dt);
	    NRF24_WriteReg(STATUS, 0x40);
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	2007      	movs	r0, #7
 80017f2:	f7ff fea5 	bl	8001540 <NRF24_WriteReg>


	    print_Data_Ower_uart(RX_BUF);
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <NRF24L01_Receive_Real_Data+0xa0>)
 80017f8:	f000 f814 	bl	8001824 <print_Data_Ower_uart>
	    parsing_Data(RX_BUF);
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <NRF24L01_Receive_Real_Data+0xa0>)
 80017fe:	f000 f899 	bl	8001934 <parsing_Data>
	  }
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020000 	.word	0x40020000
 8001810:	08008bfc 	.word	0x08008bfc
 8001814:	20000094 	.word	0x20000094
 8001818:	40020800 	.word	0x40020800
 800181c:	20000294 	.word	0x20000294
 8001820:	20000296 	.word	0x20000296

08001824 <print_Data_Ower_uart>:
// -------------------------------------------------------------------------------------
void print_Data_Ower_uart(uint8_t *RX_BUF)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b0ae      	sub	sp, #184	; 0xb8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	char str[50] = {0};
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001832:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001836:	222e      	movs	r2, #46	; 0x2e
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fc78 	bl	8008130 <memset>
	char str_main_buf[100] = {0};
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2260      	movs	r2, #96	; 0x60
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f006 fc6f 	bl	8008130 <memset>
	uint16_t rx_data = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	char str_buf[15] = {0};
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	f8c3 2007 	str.w	r2, [r3, #7]

	sprintf(str, "---------\n\r", rx_data);
 800186a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800186e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <print_Data_Ower_uart+0x104>)
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fd71 	bl	800835c <siprintf>
	HAL_UART_Transmit(&huart1, str, sizeof(str), 1000);
 800187a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	2232      	movs	r2, #50	; 0x32
 8001884:	4829      	ldr	r0, [pc, #164]	; (800192c <print_Data_Ower_uart+0x108>)
 8001886:	f003 f8f8 	bl	8004a7a <HAL_UART_Transmit>

	memset(str_buf, 0, sizeof(str_buf));
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	220f      	movs	r2, #15
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f006 fc4c 	bl	8008130 <memset>

	uint8_t r = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	for(uint8_t i = 0; i <= 9; i = i+2)
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80018a4:	e030      	b.n	8001908 <print_Data_Ower_uart+0xe4>
	{
		rx_data = RX_BUF[0+i];
 80018a6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		rx_data = rx_data + (RX_BUF[1+i] * 256);
 80018b4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80018b8:	3301      	adds	r3, #1
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80018cc:	4413      	add	r3, r2
 80018ce:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		sprintf(str, "R%d: %d  ", r, rx_data);
 80018d2:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 80018d6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80018da:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <print_Data_Ower_uart+0x10c>)
 80018e0:	f006 fd3c 	bl	800835c <siprintf>

		strcat(str_main_buf, str);
 80018e4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f006 fd54 	bl	800839c <strcat>
		r++;
 80018f4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80018f8:	3301      	adds	r3, #1
 80018fa:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	for(uint8_t i = 0; i <= 9; i = i+2)
 80018fe:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001902:	3302      	adds	r3, #2
 8001904:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8001908:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800190c:	2b09      	cmp	r3, #9
 800190e:	d9ca      	bls.n	80018a6 <print_Data_Ower_uart+0x82>
	}

	HAL_UART_Transmit(&huart1, str_main_buf, sizeof(str_main_buf), 100);
 8001910:	f107 011c 	add.w	r1, r7, #28
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	2264      	movs	r2, #100	; 0x64
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <print_Data_Ower_uart+0x108>)
 800191a:	f003 f8ae 	bl	8004a7a <HAL_UART_Transmit>
}
 800191e:	bf00      	nop
 8001920:	37b8      	adds	r7, #184	; 0xb8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	08008c10 	.word	0x08008c10
 800192c:	200001ec 	.word	0x200001ec
 8001930:	08008c1c 	.word	0x08008c1c

08001934 <parsing_Data>:
// -------------------------------------------------------------------------------------
void parsing_Data(uint8_t *RX_BUF)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    DATA DATA_t;

    DATA_t.R1 = RX_BUF[0];
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	81bb      	strh	r3, [r7, #12]
    DATA_t.R1 = DATA_t.R1 + (RX_BUF[1] * 256);
 8001944:	89ba      	ldrh	r2, [r7, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3301      	adds	r3, #1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	81bb      	strh	r3, [r7, #12]

    DATA_t.R2 = RX_BUF[2];
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3302      	adds	r3, #2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	81fb      	strh	r3, [r7, #14]
    DATA_t.R2 = DATA_t.R2 + (RX_BUF[3] * 256);
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3303      	adds	r3, #3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	81fb      	strh	r3, [r7, #14]

    DATA_t.R3 = RX_BUF[4];
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3304      	adds	r3, #4
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	823b      	strh	r3, [r7, #16]
   	DATA_t.R3 = DATA_t.R3 + (RX_BUF[5] * 256);
 8001980:	8a3a      	ldrh	r2, [r7, #16]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3305      	adds	r3, #5
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	823b      	strh	r3, [r7, #16]

   	DATA_t.R4 = RX_BUF[6];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3306      	adds	r3, #6
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	827b      	strh	r3, [r7, #18]
   	DATA_t.R4 = DATA_t.R4 + (RX_BUF[7] * 256);
 800199e:	8a7a      	ldrh	r2, [r7, #18]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3307      	adds	r3, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	827b      	strh	r3, [r7, #18]

   	DATA_t.R5 = RX_BUF[8];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3308      	adds	r3, #8
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	82bb      	strh	r3, [r7, #20]
   	DATA_t.R5 = DATA_t.R5 + (RX_BUF[9] * 256);
 80019bc:	8aba      	ldrh	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3309      	adds	r3, #9
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	82bb      	strh	r3, [r7, #20]

    xQueueSendToBack(DATAQueueHandle, &DATA_t, 1000);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <parsing_Data+0xb8>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f107 010c 	add.w	r1, r7, #12
 80019d8:	2300      	movs	r3, #0
 80019da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019de:	f004 f889 	bl	8005af4 <xQueueGenericSend>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000240 	.word	0x20000240

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a0c:	4c0b      	ldr	r4, [pc, #44]	; (8001a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff fcd5 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f006 fb53 	bl	80080c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7fe fe3b 	bl	800069c <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a34:	08008da8 	.word	0x08008da8
  ldr r2, =_sbss
 8001a38:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a3c:	20004cc4 	.word	0x20004cc4

08001a40 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <DMA1_Stream0_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 fc96 	bl	800239e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f7ff fbce 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff f9f2 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	200002a0 	.word	0x200002a0

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200002a0 	.word	0x200002a0

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e033      	b.n	8001b8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff f9c2 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b56:	f023 0302 	bic.w	r3, r3, #2
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fa68 	bl	8002038 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7e:	e001      	b.n	8001b84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d049      	beq.n	8001c60 <HAL_ADC_IRQHandler+0xca>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d046      	beq.n	8001c60 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d12b      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d127      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d119      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0220 	bic.w	r2, r2, #32
 8001c2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8b0 	bl	8001db6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f06f 0212 	mvn.w	r2, #18
 8001c5e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d057      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x190>
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d054      	beq.n	8001d26 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d139      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12b      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d124      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11d      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fa8a 	bl	8002230 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 020c 	mvn.w	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10d      	bne.n	8001d6c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f834 	bl	8001dca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f06f 0201 	mvn.w	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d7a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_ADC_IRQHandler+0x218>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0220 	mvn.w	r2, #32
 8001d9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f81d 	bl	8001dde <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	601a      	str	r2, [r3, #0]
  }
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e105      	b.n	800201c <HAL_ADC_ConfigChannel+0x228>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d925      	bls.n	8001e6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	2207      	movs	r2, #7
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4403      	add	r3, r0
 8001e5e:	3b1e      	subs	r3, #30
 8001e60:	409a      	lsls	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	e022      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6919      	ldr	r1, [r3, #16]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	2207      	movs	r2, #7
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4403      	add	r3, r0
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d824      	bhi.n	8001f04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b05      	subs	r3, #5
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b05      	subs	r3, #5
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
 8001f02:	e04c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b23      	subs	r3, #35	; 0x23
 8001f1e:	221f      	movs	r2, #31
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b23      	subs	r3, #35	; 0x23
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
 8001f54:	e023      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b41      	subs	r3, #65	; 0x41
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b41      	subs	r3, #65	; 0x41
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_ADC_ConfigChannel+0x234>)
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a21      	ldr	r2, [pc, #132]	; (800202c <HAL_ADC_ConfigChannel+0x238>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1cc>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d105      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_ADC_ConfigChannel+0x238>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d123      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x21e>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d003      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x1e6>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b11      	cmp	r3, #17
 8001fd8:	d11b      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d111      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_ADC_ConfigChannel+0x23c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <HAL_ADC_ConfigChannel+0x240>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9a      	lsrs	r2, r3, #18
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002004:	e002      	b.n	800200c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3b01      	subs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40012300 	.word	0x40012300
 800202c:	40012000 	.word	0x40012000
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83

08002038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <ADC_Init+0x1f0>)
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800206c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	4a58      	ldr	r2, [pc, #352]	; (800222c <ADC_Init+0x1f4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6899      	ldr	r1, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e00f      	b.n	8002136 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0202 	bic.w	r2, r2, #2
 8002144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
 8002150:	005a      	lsls	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002172:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	3b01      	subs	r3, #1
 8002190:	035a      	lsls	r2, r3, #13
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e007      	b.n	80021ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	051a      	lsls	r2, r3, #20
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ee:	025a      	lsls	r2, r3, #9
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	029a      	lsls	r2, r3, #10
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40012300 	.word	0x40012300
 800222c:	0f000001 	.word	0x0f000001

08002230 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4c 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c6:	f7ff ff61 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7ff ffb1 	bl	8002338 <NVIC_EncodePriority>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff80 	bl	80022e4 <__NVIC_SetPriority>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff54 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e159      	b.n	80026d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8148 	bne.w	80026d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a2 	beq.w	80026d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b54      	ldr	r3, [pc, #336]	; (80026f0 <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	; (80026f8 <HAL_GPIO_Init+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x202>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_GPIO_Init+0x2f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x1fe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	; (8002700 <HAL_GPIO_Init+0x2f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1fa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	; (8002704 <HAL_GPIO_Init+0x2fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1f6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a45      	ldr	r2, [pc, #276]	; (8002708 <HAL_GPIO_Init+0x300>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1f2>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x204>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_GPIO_Init+0x2ec>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_GPIO_Init+0x304>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a2f      	ldr	r2, [pc, #188]	; (800270c <HAL_GPIO_Init+0x304>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_GPIO_Init+0x304>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_GPIO_Init+0x304>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <HAL_GPIO_Init+0x304>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1a      	ldr	r2, [pc, #104]	; (800270c <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_GPIO_Init+0x304>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f aea2 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	041a      	lsls	r2, r3, #16
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43d9      	mvns	r1, r3
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	400b      	ands	r3, r1
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f806 	bl	80027d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e267      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	4b88      	ldr	r3, [pc, #544]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e242      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6c      	ldr	r2, [pc, #432]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b69      	ldr	r3, [pc, #420]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff f902 	bl	8001ab0 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f8fe 	bl	8001ab0 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e207      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff f8ee 	bl	8001ab0 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff f8ea 	bl	8001ab0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1f3      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c7      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x244>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7ff f8a3 	bl	8001ab0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff f89f 	bl	8001ab0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1a8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4925      	ldr	r1, [pc, #148]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x244>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7ff f882 	bl	8001ab0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff f87e 	bl	8001ab0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e187      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <HAL_RCC_OscConfig+0x248>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff f862 	bl	8001ab0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff f85e 	bl	8001ab0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e167      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
 8002a0e:	e01b      	b.n	8002a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCC_OscConfig+0x248>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7ff f84b 	bl	8001ab0 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	e00e      	b.n	8002a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7ff f847 	bl	8001ab0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d907      	bls.n	8002a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e150      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
 8002a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ea      	bne.n	8002a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8097 	beq.w	8002b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b7a      	ldr	r3, [pc, #488]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f807 	bl	8001ab0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7ff f803 	bl	8001ab0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e10c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x2ea>
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x30c>
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002afc:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe ffc8 	bl	8001ab0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe ffc4 	bl	8001ab0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0cb      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe ffb2 	bl	8001ab0 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe ffae 	bl	8001ab0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0b5      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a38      	ldr	r2, [pc, #224]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a1 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d05c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d141      	bne.n	8002c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff82 	bl	8001ab0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe ff7e 	bl	8001ab0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e087      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	491b      	ldr	r1, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe ff57 	bl	8001ab0 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe ff53 	bl	8001ab0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e05c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x416>
 8002c24:	e054      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe ff40 	bl	8001ab0 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe ff3c 	bl	8001ab0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e045      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e038      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4ec>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d121      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cc      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d90c      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d044      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d119      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e067      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b37      	ldr	r3, [pc, #220]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4934      	ldr	r1, [pc, #208]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe fe6e 	bl	8001ab0 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe fe6a 	bl	8001ab0 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20c      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe f9c4 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08008cec 	.word	0x08008cec
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b090      	sub	sp, #64	; 0x40
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec4:	4b59      	ldr	r3, [pc, #356]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d00d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f200 80a1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ede:	e09b      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ee4:	e09b      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee6:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eea:	e098      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d028      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f14:	2100      	movs	r1, #0
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f18:	fb03 f201 	mul.w	r2, r3, r1
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	fb00 f303 	mul.w	r3, r0, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	4a43      	ldr	r2, [pc, #268]	; (8003034 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f26:	fba0 1202 	umull	r1, r2, r0, r2
 8002f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f32:	4413      	add	r3, r2
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	61fa      	str	r2, [r7, #28]
 8002f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f46:	f7fd f99b 	bl	8000280 <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f52:	e053      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	617a      	str	r2, [r7, #20]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f66:	f04f 0b00 	mov.w	fp, #0
 8002f6a:	4652      	mov	r2, sl
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	ebb2 080a 	subs.w	r8, r2, sl
 8002f86:	eb63 090b 	sbc.w	r9, r3, fp
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002fa2:	eb63 0509 	sbc.w	r5, r3, r9
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	00eb      	lsls	r3, r5, #3
 8002fb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb4:	00e2      	lsls	r2, r4, #3
 8002fb6:	4614      	mov	r4, r2
 8002fb8:	461d      	mov	r5, r3
 8002fba:	eb14 030a 	adds.w	r3, r4, sl
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	eb45 030b 	adc.w	r3, r5, fp
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	60fa      	str	r2, [r7, #12]
 8002fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ff0:	f7fd f946 	bl	8000280 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800300c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetSysClockFreq+0x184>)
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003020:	4618      	mov	r0, r3
 8003022:	3740      	adds	r7, #64	; 0x40
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	017d7840 	.word	0x017d7840

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	08008cfc 	.word	0x08008cfc

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	08008cfc 	.word	0x08008cfc

080030a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	220f      	movs	r2, #15
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCC_GetClockConfig+0x60>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0207 	and.w	r2, r3, #7
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40023c00 	.word	0x40023c00

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07b      	b.n	800320e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003126:	d009      	beq.n	800313c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e005      	b.n	800313c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd ff16 	bl	8000f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c0:	ea42 0103 	orr.w	r1, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 0104 	and.w	r1, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f003 0210 	and.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b088      	sub	sp, #32
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SPI_Transmit+0x22>
 8003234:	2302      	movs	r3, #2
 8003236:	e126      	b.n	8003486 <HAL_SPI_Transmit+0x270>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003240:	f7fe fc36 	bl	8001ab0 <HAL_GetTick>
 8003244:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	77fb      	strb	r3, [r7, #31]
    goto error;
 800325a:	e10b      	b.n	8003474 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_SPI_Transmit+0x52>
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800326c:	e102      	b.n	8003474 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2203      	movs	r2, #3
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b4:	d10f      	bne.n	80032d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d007      	beq.n	80032f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fc:	d14b      	bne.n	8003396 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_Transmit+0xf6>
 8003306:	8afb      	ldrh	r3, [r7, #22]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d13e      	bne.n	800338a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003330:	e02b      	b.n	800338a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d112      	bne.n	8003366 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	86da      	strh	r2, [r3, #54]	; 0x36
 8003364:	e011      	b.n	800338a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003366:	f7fe fba3 	bl	8001ab0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d803      	bhi.n	800337e <HAL_SPI_Transmit+0x168>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d102      	bne.n	8003384 <HAL_SPI_Transmit+0x16e>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003388:	e074      	b.n	8003474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ce      	bne.n	8003332 <HAL_SPI_Transmit+0x11c>
 8003394:	e04c      	b.n	8003430 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Transmit+0x18e>
 800339e:	8afb      	ldrh	r3, [r7, #22]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d140      	bne.n	8003426 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033ca:	e02c      	b.n	8003426 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d113      	bne.n	8003402 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003400:	e011      	b.n	8003426 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003402:	f7fe fb55 	bl	8001ab0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d803      	bhi.n	800341a <HAL_SPI_Transmit+0x204>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003418:	d102      	bne.n	8003420 <HAL_SPI_Transmit+0x20a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003424:	e026      	b.n	8003474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1cd      	bne.n	80033cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fbcb 	bl	8003bd0 <SPI_EndRxTxTransaction>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e000      	b.n	8003474 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003484:	7ffb      	ldrb	r3, [r7, #31]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b088      	sub	sp, #32
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d112      	bne.n	80034d2 <HAL_SPI_Receive+0x44>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2204      	movs	r2, #4
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f8f1 	bl	80036b0 <HAL_SPI_TransmitReceive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	e0ea      	b.n	80036a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_SPI_Receive+0x52>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0e3      	b.n	80036a8 <HAL_SPI_Receive+0x21a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e8:	f7fe fae2 	bl	8001ab0 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034fe:	e0ca      	b.n	8003696 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_SPI_Receive+0x7e>
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003510:	e0c1      	b.n	8003696 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2204      	movs	r2, #4
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	88fa      	ldrh	r2, [r7, #6]
 800352a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003558:	d10f      	bne.n	800357a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d007      	beq.n	8003598 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d162      	bne.n	8003666 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035a0:	e02e      	b.n	8003600 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d115      	bne.n	80035dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f103 020c 	add.w	r2, r3, #12
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035da:	e011      	b.n	8003600 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035dc:	f7fe fa68 	bl	8001ab0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d803      	bhi.n	80035f4 <HAL_SPI_Receive+0x166>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f2:	d102      	bne.n	80035fa <HAL_SPI_Receive+0x16c>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035fe:	e04a      	b.n	8003696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1cb      	bne.n	80035a2 <HAL_SPI_Receive+0x114>
 800360a:	e031      	b.n	8003670 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d113      	bne.n	8003642 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	b292      	uxth	r2, r2
 8003626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003640:	e011      	b.n	8003666 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fe fa35 	bl	8001ab0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Receive+0x1cc>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Receive+0x1d2>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003664:	e017      	b.n	8003696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1cd      	bne.n	800360c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fa45 	bl	8003b04 <SPI_EndRxTransaction>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
 8003692:	e000      	b.n	8003696 <HAL_SPI_Receive+0x208>
  }

error :
 8003694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x26>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e18a      	b.n	80039ec <HAL_SPI_TransmitReceive+0x33c>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036de:	f7fe f9e7 	bl	8001ab0 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d00f      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x70>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003706:	d107      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x68>
 8003710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003714:	2b04      	cmp	r3, #4
 8003716:	d003      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800371e:	e15b      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x82>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x82>
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003738:	e14e      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b04      	cmp	r3, #4
 8003744:	d003      	beq.n	800374e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2205      	movs	r2, #5
 800374a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d007      	beq.n	80037a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037aa:	d178      	bne.n	800389e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x10a>
 80037b4:	8b7b      	ldrh	r3, [r7, #26]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d166      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	e053      	b.n	8003888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d11b      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x176>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x176>
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d113      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d119      	bne.n	8003868 <HAL_SPI_TransmitReceive+0x1b8>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d014      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	b292      	uxth	r2, r2
 800384a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003864:	2301      	movs	r3, #1
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003868:	f7fe f922 	bl	8001ab0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003874:	429a      	cmp	r2, r3
 8003876:	d807      	bhi.n	8003888 <HAL_SPI_TransmitReceive+0x1d8>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d003      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003886:	e0a7      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1a6      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x130>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1a1      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x130>
 800389c:	e07c      	b.n	8003998 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x1fc>
 80038a6:	8b7b      	ldrh	r3, [r7, #26]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d16b      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d2:	e057      	b.n	8003984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11c      	bne.n	800391c <HAL_SPI_TransmitReceive+0x26c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d017      	beq.n	800391c <HAL_SPI_TransmitReceive+0x26c>
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d114      	bne.n	800391c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	7812      	ldrb	r2, [r2, #0]
 80038fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d119      	bne.n	800395e <HAL_SPI_TransmitReceive+0x2ae>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d014      	beq.n	800395e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800395a:	2301      	movs	r3, #1
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800395e:	f7fe f8a7 	bl	8001ab0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800396a:	429a      	cmp	r2, r3
 800396c:	d803      	bhi.n	8003976 <HAL_SPI_TransmitReceive+0x2c6>
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003974:	d102      	bne.n	800397c <HAL_SPI_TransmitReceive+0x2cc>
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003982:	e029      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1a2      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x224>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d19d      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f917 	bl	8003bd0 <SPI_EndRxTxTransaction>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80039b4:	e010      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	e000      	b.n	80039d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80039d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3730      	adds	r7, #48	; 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a04:	f7fe f854 	bl	8001ab0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a14:	f7fe f84c 	bl	8001ab0 <HAL_GetTick>
 8003a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	015b      	lsls	r3, r3, #5
 8003a20:	0d1b      	lsrs	r3, r3, #20
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a2a:	e054      	b.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a32:	d050      	beq.n	8003ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a34:	f7fe f83c 	bl	8001ab0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d902      	bls.n	8003a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d13d      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a62:	d111      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6c:	d004      	beq.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a76:	d107      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a90:	d10f      	bne.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e017      	b.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d19b      	bne.n	8003a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000000 	.word	0x20000000

08003b04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b18:	d111      	bne.n	8003b3e <SPI_EndRxTransaction+0x3a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d004      	beq.n	8003b2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d107      	bne.n	8003b3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d12a      	bne.n	8003b9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d012      	beq.n	8003b78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff ff49 	bl	80039f4 <SPI_WaitFlagStateUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d02d      	beq.n	8003bc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e026      	b.n	8003bc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2101      	movs	r1, #1
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff ff36 	bl	80039f4 <SPI_WaitFlagStateUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01a      	beq.n	8003bc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e013      	b.n	8003bc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff23 	bl	80039f4 <SPI_WaitFlagStateUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e000      	b.n	8003bc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <SPI_EndRxTxTransaction+0x7c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <SPI_EndRxTxTransaction+0x80>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0d5b      	lsrs	r3, r3, #21
 8003be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfa:	d112      	bne.n	8003c22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fef4 	bl	80039f4 <SPI_WaitFlagStateUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e00f      	b.n	8003c42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c38:	2b80      	cmp	r3, #128	; 0x80
 8003c3a:	d0f2      	beq.n	8003c22 <SPI_EndRxTxTransaction+0x52>
 8003c3c:	e000      	b.n	8003c40 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c3e:	bf00      	nop
  }

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	165e9f81 	.word	0x165e9f81

08003c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f839 	bl	8003cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fbf0 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d001      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e044      	b.n	8003daa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d013      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <HAL_TIM_Base_Start_IT+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d010      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	e007      	b.n	8003da8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000

08003dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd f910 	bl	8001018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fb34 	bl	8004478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e022      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e015      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e008      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e068      	b.n	8003fb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0x82>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eec:	e013      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0x92>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	e00b      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0c:	e003      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fcb6 	bl	8004890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_TIM_PWM_Start+0x14c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d013      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_TIM_PWM_Start+0x150>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <HAL_TIM_PWM_Start+0x154>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_PWM_Start+0x158>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIM_PWM_Start+0x10e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <HAL_TIM_PWM_Start+0x15c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d111      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d010      	beq.n	8003fae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9c:	e007      	b.n	8003fae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fc56 	bl	8004890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <HAL_TIM_PWM_Stop+0xc4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d117      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	f240 4344 	movw	r3, #1092	; 0x444
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_TIM_PWM_Stop+0x52>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	f241 1311 	movw	r3, #4369	; 0x1111
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_TIM_PWM_Stop+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	f240 4344 	movw	r3, #1092	; 0x444
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <HAL_TIM_PWM_Stop+0x82>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Stop+0x92>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800405c:	e013      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Stop+0xa2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800406c:	e00b      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Stop+0xb2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407c:	e003      	b.n	8004086 <HAL_TIM_PWM_Stop+0xba>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40010000 	.word	0x40010000

08004094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0202 	mvn.w	r2, #2
 80040c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9b0 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9a2 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f9b3 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0204 	mvn.w	r2, #4
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f986 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f978 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f989 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b08      	cmp	r3, #8
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b08      	cmp	r3, #8
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0208 	mvn.w	r2, #8
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2204      	movs	r2, #4
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f95c 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f94e 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f95f 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0210 	mvn.w	r2, #16
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2208      	movs	r2, #8
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f932 	bl	800443c <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f924 	bl	8004428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f935 	bl	8004450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0201 	mvn.w	r2, #1
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fc fe0c 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d10e      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d107      	bne.n	8004244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fbc4 	bl	80049cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d107      	bne.n	8004270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8fa 	bl	8004464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b20      	cmp	r3, #32
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0220 	mvn.w	r2, #32
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fb8e 	bl	80049b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0ae      	b.n	8004420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	f200 809f 	bhi.w	8004410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004411 	.word	0x08004411
 80042e0:	08004411 	.word	0x08004411
 80042e4:	08004411 	.word	0x08004411
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	08004411 	.word	0x08004411
 80042f0:	08004411 	.word	0x08004411
 80042f4:	08004411 	.word	0x08004411
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	08004411 	.word	0x08004411
 8004300:	08004411 	.word	0x08004411
 8004304:	08004411 	.word	0x08004411
 8004308:	080043cf 	.word	0x080043cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f930 	bl	8004578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
      break;
 800434a:	e064      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f976 	bl	8004644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
      break;
 800438c:	e043      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f9c1 	bl	800471c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	61da      	str	r2, [r3, #28]
      break;
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fa0b 	bl	80047f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
      break;
 800440e:	e002      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a34      	ldr	r2, [pc, #208]	; (800455c <TIM_Base_SetConfig+0xe4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00f      	beq.n	80044b0 <TIM_Base_SetConfig+0x38>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004496:	d00b      	beq.n	80044b0 <TIM_Base_SetConfig+0x38>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a31      	ldr	r2, [pc, #196]	; (8004560 <TIM_Base_SetConfig+0xe8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <TIM_Base_SetConfig+0x38>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a30      	ldr	r2, [pc, #192]	; (8004564 <TIM_Base_SetConfig+0xec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_Base_SetConfig+0x38>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <TIM_Base_SetConfig+0xf0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d108      	bne.n	80044c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0xe4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01b      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d0:	d017      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <TIM_Base_SetConfig+0xe8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a21      	ldr	r2, [pc, #132]	; (8004564 <TIM_Base_SetConfig+0xec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00f      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a20      	ldr	r2, [pc, #128]	; (8004568 <TIM_Base_SetConfig+0xf0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00b      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1f      	ldr	r2, [pc, #124]	; (800456c <TIM_Base_SetConfig+0xf4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <TIM_Base_SetConfig+0xf8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_Base_SetConfig+0x8a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <TIM_Base_SetConfig+0xfc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d108      	bne.n	8004514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <TIM_Base_SetConfig+0xe4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d103      	bne.n	8004548 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	615a      	str	r2, [r3, #20]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <TIM_OC1_SetConfig+0xc8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10c      	bne.n	80045ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0308 	bic.w	r3, r3, #8
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <TIM_OC1_SetConfig+0xc8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d111      	bne.n	800461a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40010000 	.word	0x40010000

08004644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0210 	bic.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <TIM_OC2_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <TIM_OC2_SetConfig+0xd4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d113      	bne.n	80046f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000

0800471c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <TIM_OC3_SetConfig+0xd0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10d      	bne.n	8004796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a14      	ldr	r2, [pc, #80]	; (80047ec <TIM_OC3_SetConfig+0xd0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d113      	bne.n	80047c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40010000 	.word	0x40010000

080047f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <TIM_OC4_SetConfig+0x9c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d109      	bne.n	8004864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000

08004890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2201      	movs	r2, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e050      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	d013      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40014000 	.word	0x40014000

080049b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e03f      	b.n	8004a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fc fbbc 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f929 	bl	8004c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b08a      	sub	sp, #40	; 0x28
 8004a7e:	af02      	add	r7, sp, #8
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d17c      	bne.n	8004b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_UART_Transmit+0x2c>
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e075      	b.n	8004b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Transmit+0x3e>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e06e      	b.n	8004b96 <HAL_UART_Transmit+0x11c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2221      	movs	r2, #33	; 0x21
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ace:	f7fc ffef 	bl	8001ab0 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d108      	bne.n	8004afc <HAL_UART_Transmit+0x82>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e003      	b.n	8004b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b0c:	e02a      	b.n	8004b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f840 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e036      	b.n	8004b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3302      	adds	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e007      	b.n	8004b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1cf      	bne.n	8004b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2140      	movs	r1, #64	; 0x40
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f810 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b090      	sub	sp, #64	; 0x40
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	e050      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb6:	d04c      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbe:	f7fc ff77 	bl	8001ab0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d241      	bcs.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bee:	637a      	str	r2, [r7, #52]	; 0x34
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e5      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	613b      	str	r3, [r7, #16]
   return(result);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3314      	adds	r3, #20
 8004c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c22:	623a      	str	r2, [r7, #32]
 8004c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	69f9      	ldr	r1, [r7, #28]
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d09f      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3740      	adds	r7, #64	; 0x40
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c80:	b0c0      	sub	sp, #256	; 0x100
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c98:	68d9      	ldr	r1, [r3, #12]
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	ea40 0301 	orr.w	r3, r0, r1
 8004ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cd4:	f021 010c 	bic.w	r1, r1, #12
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf6:	6999      	ldr	r1, [r3, #24]
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	ea40 0301 	orr.w	r3, r0, r1
 8004d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b8f      	ldr	r3, [pc, #572]	; (8004f48 <UART_SetConfig+0x2cc>)
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d005      	beq.n	8004d1c <UART_SetConfig+0xa0>
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b8d      	ldr	r3, [pc, #564]	; (8004f4c <UART_SetConfig+0x2d0>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d104      	bne.n	8004d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe f9ac 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8004d20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d24:	e003      	b.n	8004d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7fe f993 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d38:	f040 810c 	bne.w	8004f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d4e:	4622      	mov	r2, r4
 8004d50:	462b      	mov	r3, r5
 8004d52:	1891      	adds	r1, r2, r2
 8004d54:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d56:	415b      	adcs	r3, r3
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d5e:	4621      	mov	r1, r4
 8004d60:	eb12 0801 	adds.w	r8, r2, r1
 8004d64:	4629      	mov	r1, r5
 8004d66:	eb43 0901 	adc.w	r9, r3, r1
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d7e:	4690      	mov	r8, r2
 8004d80:	4699      	mov	r9, r3
 8004d82:	4623      	mov	r3, r4
 8004d84:	eb18 0303 	adds.w	r3, r8, r3
 8004d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	eb49 0303 	adc.w	r3, r9, r3
 8004d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004da2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004daa:	460b      	mov	r3, r1
 8004dac:	18db      	adds	r3, r3, r3
 8004dae:	653b      	str	r3, [r7, #80]	; 0x50
 8004db0:	4613      	mov	r3, r2
 8004db2:	eb42 0303 	adc.w	r3, r2, r3
 8004db6:	657b      	str	r3, [r7, #84]	; 0x54
 8004db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dc0:	f7fb fa5e 	bl	8000280 <__aeabi_uldivmod>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <UART_SetConfig+0x2d4>)
 8004dca:	fba3 2302 	umull	r2, r3, r3, r2
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	011c      	lsls	r4, r3, #4
 8004dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	1891      	adds	r1, r2, r2
 8004dea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dec:	415b      	adcs	r3, r3
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004df4:	4641      	mov	r1, r8
 8004df6:	eb12 0a01 	adds.w	sl, r2, r1
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e14:	4692      	mov	sl, r2
 8004e16:	469b      	mov	fp, r3
 8004e18:	4643      	mov	r3, r8
 8004e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e22:	464b      	mov	r3, r9
 8004e24:	eb4b 0303 	adc.w	r3, fp, r3
 8004e28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e40:	460b      	mov	r3, r1
 8004e42:	18db      	adds	r3, r3, r3
 8004e44:	643b      	str	r3, [r7, #64]	; 0x40
 8004e46:	4613      	mov	r3, r2
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e56:	f7fb fa13 	bl	8000280 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <UART_SetConfig+0x2d4>)
 8004e62:	fba3 2301 	umull	r2, r3, r3, r1
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2264      	movs	r2, #100	; 0x64
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	1acb      	subs	r3, r1, r3
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e76:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <UART_SetConfig+0x2d4>)
 8004e78:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e84:	441c      	add	r4, r3
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	1851      	adds	r1, r2, r1
 8004eac:	6339      	str	r1, [r7, #48]	; 0x30
 8004eae:	4649      	mov	r1, r9
 8004eb0:	414b      	adcs	r3, r1
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4651      	mov	r1, sl
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004edc:	464b      	mov	r3, r9
 8004ede:	460a      	mov	r2, r1
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004efc:	460b      	mov	r3, r1
 8004efe:	18db      	adds	r3, r3, r3
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f02:	4613      	mov	r3, r2
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f12:	f7fb f9b5 	bl	8000280 <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <UART_SetConfig+0x2d4>)
 8004f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	2164      	movs	r1, #100	; 0x64
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	3332      	adds	r3, #50	; 0x32
 8004f2e:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <UART_SetConfig+0x2d4>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	f003 0207 	and.w	r2, r3, #7
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4422      	add	r2, r4
 8004f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f44:	e105      	b.n	8005152 <UART_SetConfig+0x4d6>
 8004f46:	bf00      	nop
 8004f48:	40011000 	.word	0x40011000
 8004f4c:	40011400 	.word	0x40011400
 8004f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f66:	4642      	mov	r2, r8
 8004f68:	464b      	mov	r3, r9
 8004f6a:	1891      	adds	r1, r2, r2
 8004f6c:	6239      	str	r1, [r7, #32]
 8004f6e:	415b      	adcs	r3, r3
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f76:	4641      	mov	r1, r8
 8004f78:	1854      	adds	r4, r2, r1
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	eb43 0501 	adc.w	r5, r3, r1
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	00eb      	lsls	r3, r5, #3
 8004f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f8e:	00e2      	lsls	r2, r4, #3
 8004f90:	4614      	mov	r4, r2
 8004f92:	461d      	mov	r5, r3
 8004f94:	4643      	mov	r3, r8
 8004f96:	18e3      	adds	r3, r4, r3
 8004f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	eb45 0303 	adc.w	r3, r5, r3
 8004fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	008b      	lsls	r3, r1, #2
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fcc:	4621      	mov	r1, r4
 8004fce:	008a      	lsls	r2, r1, #2
 8004fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fd4:	f7fb f954 	bl	8000280 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b60      	ldr	r3, [pc, #384]	; (8005160 <UART_SetConfig+0x4e4>)
 8004fde:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	011c      	lsls	r4, r3, #4
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	1891      	adds	r1, r2, r2
 8004ffe:	61b9      	str	r1, [r7, #24]
 8005000:	415b      	adcs	r3, r3
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005008:	4641      	mov	r1, r8
 800500a:	1851      	adds	r1, r2, r1
 800500c:	6139      	str	r1, [r7, #16]
 800500e:	4649      	mov	r1, r9
 8005010:	414b      	adcs	r3, r1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005020:	4659      	mov	r1, fp
 8005022:	00cb      	lsls	r3, r1, #3
 8005024:	4651      	mov	r1, sl
 8005026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800502a:	4651      	mov	r1, sl
 800502c:	00ca      	lsls	r2, r1, #3
 800502e:	4610      	mov	r0, r2
 8005030:	4619      	mov	r1, r3
 8005032:	4603      	mov	r3, r0
 8005034:	4642      	mov	r2, r8
 8005036:	189b      	adds	r3, r3, r2
 8005038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800503c:	464b      	mov	r3, r9
 800503e:	460a      	mov	r2, r1
 8005040:	eb42 0303 	adc.w	r3, r2, r3
 8005044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	67bb      	str	r3, [r7, #120]	; 0x78
 8005052:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005060:	4649      	mov	r1, r9
 8005062:	008b      	lsls	r3, r1, #2
 8005064:	4641      	mov	r1, r8
 8005066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506a:	4641      	mov	r1, r8
 800506c:	008a      	lsls	r2, r1, #2
 800506e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005072:	f7fb f905 	bl	8000280 <__aeabi_uldivmod>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4b39      	ldr	r3, [pc, #228]	; (8005160 <UART_SetConfig+0x4e4>)
 800507c:	fba3 1302 	umull	r1, r3, r3, r2
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	2164      	movs	r1, #100	; 0x64
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	3332      	adds	r3, #50	; 0x32
 800508e:	4a34      	ldr	r2, [pc, #208]	; (8005160 <UART_SetConfig+0x4e4>)
 8005090:	fba2 2303 	umull	r2, r3, r2, r3
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800509a:	441c      	add	r4, r3
 800509c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a0:	2200      	movs	r2, #0
 80050a2:	673b      	str	r3, [r7, #112]	; 0x70
 80050a4:	677a      	str	r2, [r7, #116]	; 0x74
 80050a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1851      	adds	r1, r2, r1
 80050be:	6039      	str	r1, [r7, #0]
 80050c0:	4649      	mov	r1, r9
 80050c2:	414b      	adcs	r3, r1
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050d2:	4659      	mov	r1, fp
 80050d4:	00cb      	lsls	r3, r1, #3
 80050d6:	4651      	mov	r1, sl
 80050d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050dc:	4651      	mov	r1, sl
 80050de:	00ca      	lsls	r2, r1, #3
 80050e0:	4610      	mov	r0, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	4603      	mov	r3, r0
 80050e6:	4642      	mov	r2, r8
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005100:	667a      	str	r2, [r7, #100]	; 0x64
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800510e:	4649      	mov	r1, r9
 8005110:	008b      	lsls	r3, r1, #2
 8005112:	4641      	mov	r1, r8
 8005114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005118:	4641      	mov	r1, r8
 800511a:	008a      	lsls	r2, r1, #2
 800511c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005120:	f7fb f8ae 	bl	8000280 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4b0d      	ldr	r3, [pc, #52]	; (8005160 <UART_SetConfig+0x4e4>)
 800512a:	fba3 1302 	umull	r1, r3, r3, r2
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2164      	movs	r1, #100	; 0x64
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	; 0x32
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <UART_SetConfig+0x4e4>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4422      	add	r2, r4
 8005150:	609a      	str	r2, [r3, #8]
}
 8005152:	bf00      	nop
 8005154:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515e:	bf00      	nop
 8005160:	51eb851f 	.word	0x51eb851f

08005164 <__NVIC_SetPriority>:
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db0a      	blt.n	800518e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	490c      	ldr	r1, [pc, #48]	; (80051b0 <__NVIC_SetPriority+0x4c>)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	440b      	add	r3, r1
 8005188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800518c:	e00a      	b.n	80051a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	b2da      	uxtb	r2, r3
 8005192:	4908      	ldr	r1, [pc, #32]	; (80051b4 <__NVIC_SetPriority+0x50>)
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3b04      	subs	r3, #4
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	440b      	add	r3, r1
 80051a2:	761a      	strb	r2, [r3, #24]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000e100 	.word	0xe000e100
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <SysTick_Handler+0x1c>)
 80051be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051c0:	f001 ff16 	bl	8006ff0 <xTaskGetSchedulerState>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051ca:	f002 fcfd 	bl	8007bc8 <xPortSysTickHandler>
  }
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	e000e010 	.word	0xe000e010

080051d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051dc:	2100      	movs	r1, #0
 80051de:	f06f 0004 	mvn.w	r0, #4
 80051e2:	f7ff ffbf 	bl	8005164 <__NVIC_SetPriority>
#endif
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f2:	f3ef 8305 	mrs	r3, IPSR
 80051f6:	603b      	str	r3, [r7, #0]
  return(result);
 80051f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e00c      	b.n	8005220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <osKernelInitialize+0x44>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d105      	bne.n	800521a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <osKernelInitialize+0x44>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005214:	2300      	movs	r3, #0
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	e002      	b.n	8005220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800521e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005220:	687b      	ldr	r3, [r7, #4]
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	200002a4 	.word	0x200002a4

08005234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800523a:	f3ef 8305 	mrs	r3, IPSR
 800523e:	603b      	str	r3, [r7, #0]
  return(result);
 8005240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005246:	f06f 0305 	mvn.w	r3, #5
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e010      	b.n	8005270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <osKernelStart+0x48>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d109      	bne.n	800526a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005256:	f7ff ffbf 	bl	80051d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <osKernelStart+0x48>)
 800525c:	2202      	movs	r2, #2
 800525e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005260:	f001 fa6a 	bl	8006738 <vTaskStartScheduler>
      stat = osOK;
 8005264:	2300      	movs	r3, #0
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	e002      	b.n	8005270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005270:	687b      	ldr	r3, [r7, #4]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	200002a4 	.word	0x200002a4

08005280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b08e      	sub	sp, #56	; 0x38
 8005284:	af04      	add	r7, sp, #16
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005290:	f3ef 8305 	mrs	r3, IPSR
 8005294:	617b      	str	r3, [r7, #20]
  return(result);
 8005296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005298:	2b00      	cmp	r3, #0
 800529a:	d17e      	bne.n	800539a <osThreadNew+0x11a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d07b      	beq.n	800539a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052a6:	2318      	movs	r3, #24
 80052a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d045      	beq.n	8005346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <osThreadNew+0x48>
        name = attr->name;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d008      	beq.n	80052ee <osThreadNew+0x6e>
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b38      	cmp	r3, #56	; 0x38
 80052e0:	d805      	bhi.n	80052ee <osThreadNew+0x6e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <osThreadNew+0x72>
        return (NULL);
 80052ee:	2300      	movs	r3, #0
 80052f0:	e054      	b.n	800539c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <osThreadNew+0xa8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2bbb      	cmp	r3, #187	; 0xbb
 8005310:	d90a      	bls.n	8005328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005316:	2b00      	cmp	r3, #0
 8005318:	d006      	beq.n	8005328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <osThreadNew+0xa8>
        mem = 1;
 8005322:	2301      	movs	r3, #1
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e010      	b.n	800534a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10c      	bne.n	800534a <osThreadNew+0xca>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <osThreadNew+0xca>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <osThreadNew+0xca>
          mem = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e001      	b.n	800534a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d110      	bne.n	8005372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005358:	9202      	str	r2, [sp, #8]
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fffa 	bl	8006360 <xTaskCreateStatic>
 800536c:	4603      	mov	r3, r0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e013      	b.n	800539a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d110      	bne.n	800539a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	b29a      	uxth	r2, r3
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 f845 	bl	800641a <xTaskCreate>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <osThreadNew+0x11a>
            hTask = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800539a:	693b      	ldr	r3, [r7, #16]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ac:	f3ef 8305 	mrs	r3, IPSR
 80053b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <osDelay+0x1c>
    stat = osErrorISR;
 80053b8:	f06f 0305 	mvn.w	r3, #5
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e007      	b.n	80053d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 f980 	bl	80066d0 <vTaskDelay>
    }
  }

  return (stat);
 80053d0:	68fb      	ldr	r3, [r7, #12]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	; 0x28
 80053de:	af02      	add	r7, sp, #8
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ea:	f3ef 8305 	mrs	r3, IPSR
 80053ee:	613b      	str	r3, [r7, #16]
  return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d175      	bne.n	80054e2 <osSemaphoreNew+0x108>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d072      	beq.n	80054e2 <osSemaphoreNew+0x108>
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d86e      	bhi.n	80054e2 <osSemaphoreNew+0x108>
    mem = -1;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005408:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d015      	beq.n	800543c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d006      	beq.n	8005426 <osSemaphoreNew+0x4c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b4f      	cmp	r3, #79	; 0x4f
 800541e:	d902      	bls.n	8005426 <osSemaphoreNew+0x4c>
        mem = 1;
 8005420:	2301      	movs	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	e00c      	b.n	8005440 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <osSemaphoreNew+0x66>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <osSemaphoreNew+0x66>
          mem = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e001      	b.n	8005440 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005446:	d04c      	beq.n	80054e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d128      	bne.n	80054a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d10a      	bne.n	800546a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2203      	movs	r2, #3
 800545a:	9200      	str	r2, [sp, #0]
 800545c:	2200      	movs	r2, #0
 800545e:	2100      	movs	r1, #0
 8005460:	2001      	movs	r0, #1
 8005462:	f000 fa07 	bl	8005874 <xQueueGenericCreateStatic>
 8005466:	61f8      	str	r0, [r7, #28]
 8005468:	e005      	b.n	8005476 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800546a:	2203      	movs	r2, #3
 800546c:	2100      	movs	r1, #0
 800546e:	2001      	movs	r0, #1
 8005470:	f000 fa78 	bl	8005964 <xQueueGenericCreate>
 8005474:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d022      	beq.n	80054c2 <osSemaphoreNew+0xe8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01f      	beq.n	80054c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005482:	2300      	movs	r3, #0
 8005484:	2200      	movs	r2, #0
 8005486:	2100      	movs	r1, #0
 8005488:	69f8      	ldr	r0, [r7, #28]
 800548a:	f000 fb33 	bl	8005af4 <xQueueGenericSend>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d016      	beq.n	80054c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005494:	69f8      	ldr	r0, [r7, #28]
 8005496:	f000 fda7 	bl	8005fe8 <vQueueDelete>
            hSemaphore = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e010      	b.n	80054c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d108      	bne.n	80054b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fab5 	bl	8005a1e <xQueueCreateCountingSemaphoreStatic>
 80054b4:	61f8      	str	r0, [r7, #28]
 80054b6:	e004      	b.n	80054c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fae6 	bl	8005a8c <xQueueCreateCountingSemaphore>
 80054c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e001      	b.n	80054da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	69f8      	ldr	r0, [r7, #28]
 80054de:	f000 feb7 	bl	8006250 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fc:	f3ef 8305 	mrs	r3, IPSR
 8005500:	613b      	str	r3, [r7, #16]
  return(result);
 8005502:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005504:	2b00      	cmp	r3, #0
 8005506:	d15f      	bne.n	80055c8 <osMessageQueueNew+0xdc>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d05c      	beq.n	80055c8 <osMessageQueueNew+0xdc>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d059      	beq.n	80055c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005518:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d029      	beq.n	8005574 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d012      	beq.n	800554e <osMessageQueueNew+0x62>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b4f      	cmp	r3, #79	; 0x4f
 800552e:	d90e      	bls.n	800554e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <osMessageQueueNew+0x62>
        mem = 1;
 8005548:	2301      	movs	r3, #1
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e014      	b.n	8005578 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d110      	bne.n	8005578 <osMessageQueueNew+0x8c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10c      	bne.n	8005578 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <osMessageQueueNew+0x8c>
          mem = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e001      	b.n	8005578 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10b      	bne.n	8005596 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2100      	movs	r1, #0
 8005588:	9100      	str	r1, [sp, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f971 	bl	8005874 <xQueueGenericCreateStatic>
 8005592:	61f8      	str	r0, [r7, #28]
 8005594:	e008      	b.n	80055a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800559c:	2200      	movs	r2, #0
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f9df 	bl	8005964 <xQueueGenericCreate>
 80055a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e001      	b.n	80055c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	69f8      	ldr	r0, [r7, #28]
 80055c4:	f000 fe44 	bl	8006250 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80055c8:	69fb      	ldr	r3, [r7, #28]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <vApplicationGetIdleTaskMemory+0x2c>)
 80055e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a06      	ldr	r2, [pc, #24]	; (8005604 <vApplicationGetIdleTaskMemory+0x30>)
 80055ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	200002a8 	.word	0x200002a8
 8005604:	20000364 	.word	0x20000364

08005608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a07      	ldr	r2, [pc, #28]	; (8005634 <vApplicationGetTimerTaskMemory+0x2c>)
 8005618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a06      	ldr	r2, [pc, #24]	; (8005638 <vApplicationGetTimerTaskMemory+0x30>)
 800561e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000564 	.word	0x20000564
 8005638:	20000620 	.word	0x20000620

0800563c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f103 0208 	add.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 0208 	add.w	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f103 0208 	add.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f4:	d103      	bne.n	80056fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	e00c      	b.n	8005718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3308      	adds	r3, #8
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e002      	b.n	800570c <vListInsert+0x2e>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d2f6      	bcs.n	8005706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6852      	ldr	r2, [r2, #4]
 8005770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d103      	bne.n	8005784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1e5a      	subs	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057ce:	f002 f969 	bl	8007aa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	441a      	add	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	3b01      	subs	r3, #1
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d114      	bne.n	800584e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01a      	beq.n	8005862 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3310      	adds	r3, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fa1b 	bl	8006c6c <xTaskRemoveFromEventList>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d012      	beq.n	8005862 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <xQueueGenericReset+0xcc>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	e009      	b.n	8005862 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3310      	adds	r3, #16
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fef2 	bl	800563c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff feed 	bl	800563c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005862:	f002 f94f 	bl	8007b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005866:	2301      	movs	r3, #1
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08e      	sub	sp, #56	; 0x38
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <xQueueGenericCreateStatic+0x52>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <xQueueGenericCreateStatic+0x56>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <xQueueGenericCreateStatic+0x58>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <xQueueGenericCreateStatic+0x7e>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericCreateStatic+0x82>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGenericCreateStatic+0x84>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61fb      	str	r3, [r7, #28]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005912:	2350      	movs	r3, #80	; 0x50
 8005914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b50      	cmp	r3, #80	; 0x50
 800591a:	d00a      	beq.n	8005932 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	61bb      	str	r3, [r7, #24]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005932:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005946:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f83f 	bl	80059d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800595c:	4618      	mov	r0, r3
 800595e:	3730      	adds	r7, #48	; 0x30
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	613b      	str	r3, [r7, #16]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3350      	adds	r3, #80	; 0x50
 800599c:	4618      	mov	r0, r3
 800599e:	f002 f9a3 	bl	8007ce8 <pvPortMalloc>
 80059a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3350      	adds	r3, #80	; 0x50
 80059b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059bc:	79fa      	ldrb	r2, [r7, #7]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f805 	bl	80059d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ce:	69bb      	ldr	r3, [r7, #24]
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e002      	b.n	80059fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a06:	2101      	movs	r1, #1
 8005a08:	69b8      	ldr	r0, [r7, #24]
 8005a0a:	f7ff fecb 	bl	80057a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b08a      	sub	sp, #40	; 0x28
 8005a22:	af02      	add	r7, sp, #8
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61bb      	str	r3, [r7, #24]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d90a      	bls.n	8005a64 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	617b      	str	r3, [r7, #20]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a64:	2302      	movs	r3, #2
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ff00 	bl	8005874 <xQueueGenericCreateStatic>
 8005a74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a82:	69fb      	ldr	r3, [r7, #28]
	}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	613b      	str	r3, [r7, #16]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d90a      	bls.n	8005ad0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60fb      	str	r3, [r7, #12]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff45 	bl	8005964 <xQueueGenericCreate>
 8005ada:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ae8:	697b      	ldr	r3, [r7, #20]
	}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSend+0x32>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <xQueueGenericSend+0x40>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <xQueueGenericSend+0x44>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <xQueueGenericSend+0x46>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <xQueueGenericSend+0x60>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSend+0x6e>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSend+0x72>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSend+0x74>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b82:	f001 fa35 	bl	8006ff0 <xTaskGetSchedulerState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <xQueueGenericSend+0x9e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSend+0xa2>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSend+0xa4>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61fb      	str	r3, [r7, #28]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb2:	f001 ff77 	bl	8007aa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <xQueueGenericSend+0xd4>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d129      	bne.n	8005c1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bce:	f000 fa2e 	bl	800602e <prvCopyDataToQueue>
 8005bd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 f843 	bl	8006c6c <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	e00a      	b.n	8005c14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b39      	ldr	r3, [pc, #228]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c14:	f001 ff76 	bl	8007b04 <vPortExitCritical>
				return pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e063      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c22:	f001 ff6f 	bl	8007b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e05c      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f87d 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3e:	f001 ff61 	bl	8007b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c42:	f000 fde9 	bl	8006818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c46:	f001 ff2d 	bl	8007aa4 <vPortEnterCritical>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c56:	d103      	bne.n	8005c60 <xQueueGenericSend+0x16c>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6c:	d103      	bne.n	8005c76 <xQueueGenericSend+0x182>
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c76:	f001 ff45 	bl	8007b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7a:	1d3a      	adds	r2, r7, #4
 8005c7c:	f107 0314 	add.w	r3, r7, #20
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f86c 	bl	8006d60 <xTaskCheckForTimeOut>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d124      	bne.n	8005cd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c90:	f000 fac5 	bl	800621e <prvIsQueueFull>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	3310      	adds	r3, #16
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 ff92 	bl	8006bcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005caa:	f000 fa50 	bl	800614e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f000 fdc1 	bl	8006834 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af7c 	bne.w	8005bb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	e772      	b.n	8005bb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cce:	f000 fa3e 	bl	800614e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd2:	f000 fdaf 	bl	8006834 <xTaskResumeAll>
 8005cd6:	e76c      	b.n	8005bb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cda:	f000 fa38 	bl	800614e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cde:	f000 fda9 	bl	8006834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	; 0x40
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <xQueueGenericSendFromISR+0x3c>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <xQueueGenericSendFromISR+0x40>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <xQueueGenericSendFromISR+0x42>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d103      	bne.n	8005d5a <xQueueGenericSendFromISR+0x6a>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <xQueueGenericSendFromISR+0x6e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGenericSendFromISR+0x70>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	623b      	str	r3, [r7, #32]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7a:	f001 ff75 	bl	8007c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61fa      	str	r2, [r7, #28]
 8005d94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <xQueueGenericSendFromISR+0xbc>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d12f      	bne.n	8005e0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc2:	f000 f934 	bl	800602e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dce:	d112      	bne.n	8005df6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d016      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	3324      	adds	r3, #36	; 0x24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 ff45 	bl	8006c6c <xTaskRemoveFromEventList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e007      	b.n	8005e06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	b25a      	sxtb	r2, r3
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e06:	2301      	movs	r3, #1
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e0a:	e001      	b.n	8005e10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3740      	adds	r7, #64	; 0x40
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08c      	sub	sp, #48	; 0x30
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <xQueueReceive+0x30>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	623b      	str	r3, [r7, #32]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <xQueueReceive+0x3e>
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <xQueueReceive+0x42>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueReceive+0x44>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueReceive+0x5e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61fb      	str	r3, [r7, #28]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e86:	f001 f8b3 	bl	8006ff0 <xTaskGetSchedulerState>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <xQueueReceive+0x6e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <xQueueReceive+0x72>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueReceive+0x74>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueReceive+0x8e>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eb6:	f001 fdf5 	bl	8007aa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01f      	beq.n	8005f06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eca:	f000 f91a 	bl	8006102 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	1e5a      	subs	r2, r3, #1
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00f      	beq.n	8005efe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	3310      	adds	r3, #16
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fec2 	bl	8006c6c <xTaskRemoveFromEventList>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005eee:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <xQueueReceive+0x1bc>)
 8005ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005efe:	f001 fe01 	bl	8007b04 <vPortExitCritical>
				return pdPASS;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e069      	b.n	8005fda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d103      	bne.n	8005f14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f0c:	f001 fdfa 	bl	8007b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e062      	b.n	8005fda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f1a:	f107 0310 	add.w	r3, r7, #16
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 ff08 	bl	8006d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f28:	f001 fdec 	bl	8007b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f2c:	f000 fc74 	bl	8006818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f30:	f001 fdb8 	bl	8007aa4 <vPortEnterCritical>
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f40:	d103      	bne.n	8005f4a <xQueueReceive+0x122>
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f56:	d103      	bne.n	8005f60 <xQueueReceive+0x138>
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f60:	f001 fdd0 	bl	8007b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f64:	1d3a      	adds	r2, r7, #4
 8005f66:	f107 0310 	add.w	r3, r7, #16
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fef7 	bl	8006d60 <xTaskCheckForTimeOut>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d123      	bne.n	8005fc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7a:	f000 f93a 	bl	80061f2 <prvIsQueueEmpty>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fe1d 	bl	8006bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f94:	f000 f8db 	bl	800614e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f98:	f000 fc4c 	bl	8006834 <xTaskResumeAll>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d189      	bne.n	8005eb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <xQueueReceive+0x1bc>)
 8005fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	e780      	b.n	8005eb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb6:	f000 f8ca 	bl	800614e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fba:	f000 fc3b 	bl	8006834 <xTaskResumeAll>
 8005fbe:	e77a      	b.n	8005eb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc2:	f000 f8c4 	bl	800614e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fc6:	f000 fc35 	bl	8006834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fcc:	f000 f911 	bl	80061f2 <prvIsQueueEmpty>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f43f af6f 	beq.w	8005eb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3730      	adds	r7, #48	; 0x30
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed04 	.word	0xe000ed04

08005fe8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <vQueueDelete+0x28>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f947 	bl	80062a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f001 ff2d 	bl	8007e80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10d      	bne.n	8006068 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d14d      	bne.n	80060f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ffe7 	bl	800702c <xTaskPriorityDisinherit>
 800605e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	609a      	str	r2, [r3, #8]
 8006066:	e043      	b.n	80060f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d119      	bne.n	80060a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6858      	ldr	r0, [r3, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	461a      	mov	r2, r3
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	f002 f84b 	bl	8008114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d32b      	bcc.n	80060f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	e026      	b.n	80060f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68d8      	ldr	r0, [r3, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	461a      	mov	r2, r3
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	f002 f831 	bl	8008114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	425b      	negs	r3, r3
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d207      	bcs.n	80060de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	425b      	negs	r3, r3
 80060d8:	441a      	add	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d105      	bne.n	80060f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d018      	beq.n	8006146 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d303      	bcc.n	8006136 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	461a      	mov	r2, r3
 8006140:	6838      	ldr	r0, [r7, #0]
 8006142:	f001 ffe7 	bl	8008114 <memcpy>
	}
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006156:	f001 fca5 	bl	8007aa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006160:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006162:	e011      	b.n	8006188 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d012      	beq.n	8006192 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fd7b 	bl	8006c6c <xTaskRemoveFromEventList>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800617c:	f000 fe52 	bl	8006e24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	3b01      	subs	r3, #1
 8006184:	b2db      	uxtb	r3, r3
 8006186:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	dce9      	bgt.n	8006164 <prvUnlockQueue+0x16>
 8006190:	e000      	b.n	8006194 <prvUnlockQueue+0x46>
					break;
 8006192:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800619c:	f001 fcb2 	bl	8007b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061a0:	f001 fc80 	bl	8007aa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ac:	e011      	b.n	80061d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3310      	adds	r3, #16
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fd56 	bl	8006c6c <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c6:	f000 fe2d 	bl	8006e24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dce9      	bgt.n	80061ae <prvUnlockQueue+0x60>
 80061da:	e000      	b.n	80061de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061e6:	f001 fc8d 	bl	8007b04 <vPortExitCritical>
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061fa:	f001 fc53 	bl	8007aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006206:	2301      	movs	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e001      	b.n	8006210 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f001 fc78 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006226:	f001 fc3d 	bl	8007aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	429a      	cmp	r2, r3
 8006234:	d102      	bne.n	800623c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e001      	b.n	8006240 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f001 fc60 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	e014      	b.n	800628a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006260:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <vQueueAddToRegistry+0x50>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800626c:	490c      	ldr	r1, [pc, #48]	; (80062a0 <vQueueAddToRegistry+0x50>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <vQueueAddToRegistry+0x50>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4413      	add	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006282:	e006      	b.n	8006292 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b07      	cmp	r3, #7
 800628e:	d9e7      	bls.n	8006260 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000a20 	.word	0x20000a20

080062a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e016      	b.n	80062e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <vQueueUnregisterQueue+0x50>)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d10b      	bne.n	80062da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <vQueueUnregisterQueue+0x50>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2100      	movs	r1, #0
 80062c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062cc:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <vQueueUnregisterQueue+0x50>)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	605a      	str	r2, [r3, #4]
				break;
 80062d8:	e006      	b.n	80062e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	d9e5      	bls.n	80062b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	20000a20 	.word	0x20000a20

080062f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006308:	f001 fbcc 	bl	8007aa4 <vPortEnterCritical>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006318:	d103      	bne.n	8006322 <vQueueWaitForMessageRestricted+0x2a>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632e:	d103      	bne.n	8006338 <vQueueWaitForMessageRestricted+0x40>
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f001 fbe4 	bl	8007b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 fc61 	bl	8006c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f7ff fefb 	bl	800614e <prvUnlockQueue>
	}
 8006358:	bf00      	nop
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	; 0x38
 8006364:	af04      	add	r7, sp, #16
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	623b      	str	r3, [r7, #32]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61fb      	str	r3, [r7, #28]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063a6:	23bc      	movs	r3, #188	; 0xbc
 80063a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2bbc      	cmp	r3, #188	; 0xbc
 80063ae:	d00a      	beq.n	80063c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	61bb      	str	r3, [r7, #24]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01e      	beq.n	800640c <xTaskCreateStatic+0xac>
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01b      	beq.n	800640c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063e6:	2300      	movs	r3, #0
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f850 	bl	80064a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006406:	f000 f8f3 	bl	80065f0 <prvAddNewTaskToReadyList>
 800640a:	e001      	b.n	8006410 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006410:	697b      	ldr	r3, [r7, #20]
	}
 8006412:	4618      	mov	r0, r3
 8006414:	3728      	adds	r7, #40	; 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08c      	sub	sp, #48	; 0x30
 800641e:	af04      	add	r7, sp, #16
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	4613      	mov	r3, r2
 8006428:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f001 fc5a 	bl	8007ce8 <pvPortMalloc>
 8006434:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800643c:	20bc      	movs	r0, #188	; 0xbc
 800643e:	f001 fc53 	bl	8007ce8 <pvPortMalloc>
 8006442:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
 8006450:	e005      	b.n	800645e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006452:	6978      	ldr	r0, [r7, #20]
 8006454:	f001 fd14 	bl	8007e80 <vPortFree>
 8006458:	e001      	b.n	800645e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d017      	beq.n	8006494 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800646c:	88fa      	ldrh	r2, [r7, #6]
 800646e:	2300      	movs	r3, #0
 8006470:	9303      	str	r3, [sp, #12]
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	9302      	str	r3, [sp, #8]
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f80e 	bl	80064a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006488:	69f8      	ldr	r0, [r7, #28]
 800648a:	f000 f8b1 	bl	80065f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800648e:	2301      	movs	r3, #1
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e002      	b.n	800649a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006498:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800649a:	69bb      	ldr	r3, [r7, #24]
	}
 800649c:	4618      	mov	r0, r3
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	461a      	mov	r2, r3
 80064bc:	21a5      	movs	r1, #165	; 0xa5
 80064be:	f001 fe37 	bl	8008130 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064cc:	3b01      	subs	r3, #1
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	617b      	str	r3, [r7, #20]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01f      	beq.n	8006542 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	e012      	b.n	800652e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	7819      	ldrb	r1, [r3, #0]
 8006510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	3334      	adds	r3, #52	; 0x34
 8006518:	460a      	mov	r2, r1
 800651a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	3301      	adds	r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d9e9      	bls.n	8006508 <prvInitialiseNewTask+0x64>
 8006534:	e000      	b.n	8006538 <prvInitialiseNewTask+0x94>
			{
				break;
 8006536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006540:	e003      	b.n	800654a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2b37      	cmp	r3, #55	; 0x37
 800654e:	d901      	bls.n	8006554 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006550:	2337      	movs	r3, #55	; 0x37
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2200      	movs	r2, #0
 8006564:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	3304      	adds	r3, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff f886 	bl	800567c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	3318      	adds	r3, #24
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff f881 	bl	800567c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	2200      	movs	r2, #0
 800659c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	3354      	adds	r3, #84	; 0x54
 80065a4:	2260      	movs	r2, #96	; 0x60
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 fdc1 	bl	8008130 <memset>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <prvInitialiseNewTask+0x140>)
 80065b2:	659a      	str	r2, [r3, #88]	; 0x58
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	4a0c      	ldr	r2, [pc, #48]	; (80065e8 <prvInitialiseNewTask+0x144>)
 80065b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <prvInitialiseNewTask+0x148>)
 80065be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	69b8      	ldr	r0, [r7, #24]
 80065c6:	f001 f941 	bl	800784c <pxPortInitialiseStack>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065dc:	bf00      	nop
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	08008d24 	.word	0x08008d24
 80065e8:	08008d44 	.word	0x08008d44
 80065ec:	08008d04 	.word	0x08008d04

080065f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065f8:	f001 fa54 	bl	8007aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065fc:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <prvAddNewTaskToReadyList+0xc4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a2c      	ldr	r2, [pc, #176]	; (80066b4 <prvAddNewTaskToReadyList+0xc4>)
 8006604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006606:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800660e:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006614:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <prvAddNewTaskToReadyList+0xc4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d110      	bne.n	800663e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800661c:	f000 fc26 	bl	8006e6c <prvInitialiseTaskLists>
 8006620:	e00d      	b.n	800663e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006622:	4b26      	ldr	r3, [pc, #152]	; (80066bc <prvAddNewTaskToReadyList+0xcc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800662a:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	429a      	cmp	r2, r3
 8006636:	d802      	bhi.n	800663e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006638:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800663e:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <prvAddNewTaskToReadyList+0xd0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	4a1e      	ldr	r2, [pc, #120]	; (80066c0 <prvAddNewTaskToReadyList+0xd0>)
 8006646:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006648:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <prvAddNewTaskToReadyList+0xd0>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <prvAddNewTaskToReadyList+0xd4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d903      	bls.n	8006664 <prvAddNewTaskToReadyList+0x74>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <prvAddNewTaskToReadyList+0xd4>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <prvAddNewTaskToReadyList+0xd8>)
 8006672:	441a      	add	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7ff f80b 	bl	8005696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006680:	f001 fa40 	bl	8007b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <prvAddNewTaskToReadyList+0xcc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00e      	beq.n	80066aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <prvAddNewTaskToReadyList+0xc8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	429a      	cmp	r2, r3
 8006698:	d207      	bcs.n	80066aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <prvAddNewTaskToReadyList+0xdc>)
 800669c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000f34 	.word	0x20000f34
 80066b8:	20000a60 	.word	0x20000a60
 80066bc:	20000f40 	.word	0x20000f40
 80066c0:	20000f50 	.word	0x20000f50
 80066c4:	20000f3c 	.word	0x20000f3c
 80066c8:	20000a64 	.word	0x20000a64
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066e2:	4b13      	ldr	r3, [pc, #76]	; (8006730 <vTaskDelay+0x60>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <vTaskDelay+0x30>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60bb      	str	r3, [r7, #8]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006700:	f000 f88a 	bl	8006818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006704:	2100      	movs	r1, #0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fcfe 	bl	8007108 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800670c:	f000 f892 	bl	8006834 <xTaskResumeAll>
 8006710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d107      	bne.n	8006728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <vTaskDelay+0x64>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000f5c 	.word	0x20000f5c
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	; 0x28
 800673c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006746:	463a      	mov	r2, r7
 8006748:	1d39      	adds	r1, r7, #4
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe ff40 	bl	80055d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	9202      	str	r2, [sp, #8]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	2300      	movs	r3, #0
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	2300      	movs	r3, #0
 8006764:	460a      	mov	r2, r1
 8006766:	4924      	ldr	r1, [pc, #144]	; (80067f8 <vTaskStartScheduler+0xc0>)
 8006768:	4824      	ldr	r0, [pc, #144]	; (80067fc <vTaskStartScheduler+0xc4>)
 800676a:	f7ff fdf9 	bl	8006360 <xTaskCreateStatic>
 800676e:	4603      	mov	r3, r0
 8006770:	4a23      	ldr	r2, [pc, #140]	; (8006800 <vTaskStartScheduler+0xc8>)
 8006772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006774:	4b22      	ldr	r3, [pc, #136]	; (8006800 <vTaskStartScheduler+0xc8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e001      	b.n	8006786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d102      	bne.n	8006792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800678c:	f000 fd10 	bl	80071b0 <xTimerCreateTimerTask>
 8006790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d11b      	bne.n	80067d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	613b      	str	r3, [r7, #16]
}
 80067aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067ac:	4b15      	ldr	r3, [pc, #84]	; (8006804 <vTaskStartScheduler+0xcc>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3354      	adds	r3, #84	; 0x54
 80067b2:	4a15      	ldr	r2, [pc, #84]	; (8006808 <vTaskStartScheduler+0xd0>)
 80067b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067b6:	4b15      	ldr	r3, [pc, #84]	; (800680c <vTaskStartScheduler+0xd4>)
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <vTaskStartScheduler+0xd8>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067c4:	4b13      	ldr	r3, [pc, #76]	; (8006814 <vTaskStartScheduler+0xdc>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ca:	f001 f8c9 	bl	8007960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067ce:	e00e      	b.n	80067ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d6:	d10a      	bne.n	80067ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <vTaskStartScheduler+0xb4>
}
 80067ee:	bf00      	nop
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	08008c28 	.word	0x08008c28
 80067fc:	08006e3d 	.word	0x08006e3d
 8006800:	20000f58 	.word	0x20000f58
 8006804:	20000a60 	.word	0x20000a60
 8006808:	20000014 	.word	0x20000014
 800680c:	20000f54 	.word	0x20000f54
 8006810:	20000f40 	.word	0x20000f40
 8006814:	20000f38 	.word	0x20000f38

08006818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <vTaskSuspendAll+0x18>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	4a03      	ldr	r2, [pc, #12]	; (8006830 <vTaskSuspendAll+0x18>)
 8006824:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006826:	bf00      	nop
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20000f5c 	.word	0x20000f5c

08006834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006842:	4b42      	ldr	r3, [pc, #264]	; (800694c <xTaskResumeAll+0x118>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <xTaskResumeAll+0x2c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006860:	f001 f920 	bl	8007aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006864:	4b39      	ldr	r3, [pc, #228]	; (800694c <xTaskResumeAll+0x118>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3b01      	subs	r3, #1
 800686a:	4a38      	ldr	r2, [pc, #224]	; (800694c <xTaskResumeAll+0x118>)
 800686c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800686e:	4b37      	ldr	r3, [pc, #220]	; (800694c <xTaskResumeAll+0x118>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d162      	bne.n	800693c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006876:	4b36      	ldr	r3, [pc, #216]	; (8006950 <xTaskResumeAll+0x11c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d05e      	beq.n	800693c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800687e:	e02f      	b.n	80068e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <xTaskResumeAll+0x120>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3318      	adds	r3, #24
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe ff5f 	bl	8005750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3304      	adds	r3, #4
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe ff5a 	bl	8005750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <xTaskResumeAll+0x124>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d903      	bls.n	80068b0 <xTaskResumeAll+0x7c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4a2a      	ldr	r2, [pc, #168]	; (8006958 <xTaskResumeAll+0x124>)
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4a27      	ldr	r2, [pc, #156]	; (800695c <xTaskResumeAll+0x128>)
 80068be:	441a      	add	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe fee5 	bl	8005696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <xTaskResumeAll+0x12c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068da:	4b22      	ldr	r3, [pc, #136]	; (8006964 <xTaskResumeAll+0x130>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068e0:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <xTaskResumeAll+0x120>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1cb      	bne.n	8006880 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ee:	f000 fb5f 	bl	8006fb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068f2:	4b1d      	ldr	r3, [pc, #116]	; (8006968 <xTaskResumeAll+0x134>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068fe:	f000 f847 	bl	8006990 <xTaskIncrementTick>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <xTaskResumeAll+0x130>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b01      	subs	r3, #1
 8006912:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f1      	bne.n	80068fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <xTaskResumeAll+0x134>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <xTaskResumeAll+0x130>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <xTaskResumeAll+0x138>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800693c:	f001 f8e2 	bl	8007b04 <vPortExitCritical>

	return xAlreadyYielded;
 8006940:	68bb      	ldr	r3, [r7, #8]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000f5c 	.word	0x20000f5c
 8006950:	20000f34 	.word	0x20000f34
 8006954:	20000ef4 	.word	0x20000ef4
 8006958:	20000f3c 	.word	0x20000f3c
 800695c:	20000a64 	.word	0x20000a64
 8006960:	20000a60 	.word	0x20000a60
 8006964:	20000f48 	.word	0x20000f48
 8006968:	20000f44 	.word	0x20000f44
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <xTaskGetTickCount+0x1c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800697c:	687b      	ldr	r3, [r7, #4]
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000f38 	.word	0x20000f38

08006990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800699a:	4b4f      	ldr	r3, [pc, #316]	; (8006ad8 <xTaskIncrementTick+0x148>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 808f 	bne.w	8006ac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069a4:	4b4d      	ldr	r3, [pc, #308]	; (8006adc <xTaskIncrementTick+0x14c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069ac:	4a4b      	ldr	r2, [pc, #300]	; (8006adc <xTaskIncrementTick+0x14c>)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d120      	bne.n	80069fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069b8:	4b49      	ldr	r3, [pc, #292]	; (8006ae0 <xTaskIncrementTick+0x150>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	603b      	str	r3, [r7, #0]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <xTaskIncrementTick+0x46>
 80069d8:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <xTaskIncrementTick+0x150>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <xTaskIncrementTick+0x154>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a3f      	ldr	r2, [pc, #252]	; (8006ae0 <xTaskIncrementTick+0x150>)
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	4a3f      	ldr	r2, [pc, #252]	; (8006ae4 <xTaskIncrementTick+0x154>)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <xTaskIncrementTick+0x158>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	4a3d      	ldr	r2, [pc, #244]	; (8006ae8 <xTaskIncrementTick+0x158>)
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	f000 fadb 	bl	8006fb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069fa:	4b3c      	ldr	r3, [pc, #240]	; (8006aec <xTaskIncrementTick+0x15c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d349      	bcc.n	8006a98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a04:	4b36      	ldr	r3, [pc, #216]	; (8006ae0 <xTaskIncrementTick+0x150>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0e:	4b37      	ldr	r3, [pc, #220]	; (8006aec <xTaskIncrementTick+0x15c>)
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a14:	601a      	str	r2, [r3, #0]
					break;
 8006a16:	e03f      	b.n	8006a98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a18:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <xTaskIncrementTick+0x150>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d203      	bcs.n	8006a38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a30:	4a2e      	ldr	r2, [pc, #184]	; (8006aec <xTaskIncrementTick+0x15c>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a36:	e02f      	b.n	8006a98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe87 	bl	8005750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fe7e 	bl	8005750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <xTaskIncrementTick+0x160>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d903      	bls.n	8006a68 <xTaskIncrementTick+0xd8>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	4a22      	ldr	r2, [pc, #136]	; (8006af0 <xTaskIncrementTick+0x160>)
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <xTaskIncrementTick+0x164>)
 8006a76:	441a      	add	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4610      	mov	r0, r2
 8006a80:	f7fe fe09 	bl	8005696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <xTaskIncrementTick+0x168>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d3b8      	bcc.n	8006a04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a92:	2301      	movs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a96:	e7b5      	b.n	8006a04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <xTaskIncrementTick+0x168>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	4915      	ldr	r1, [pc, #84]	; (8006af4 <xTaskIncrementTick+0x164>)
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d901      	bls.n	8006ab4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <xTaskIncrementTick+0x16c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	e004      	b.n	8006acc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <xTaskIncrementTick+0x170>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <xTaskIncrementTick+0x170>)
 8006aca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006acc:	697b      	ldr	r3, [r7, #20]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000f5c 	.word	0x20000f5c
 8006adc:	20000f38 	.word	0x20000f38
 8006ae0:	20000eec 	.word	0x20000eec
 8006ae4:	20000ef0 	.word	0x20000ef0
 8006ae8:	20000f4c 	.word	0x20000f4c
 8006aec:	20000f54 	.word	0x20000f54
 8006af0:	20000f3c 	.word	0x20000f3c
 8006af4:	20000a64 	.word	0x20000a64
 8006af8:	20000a60 	.word	0x20000a60
 8006afc:	20000f48 	.word	0x20000f48
 8006b00:	20000f44 	.word	0x20000f44

08006b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b0a:	4b2a      	ldr	r3, [pc, #168]	; (8006bb4 <vTaskSwitchContext+0xb0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b12:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <vTaskSwitchContext+0xb4>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b18:	e046      	b.n	8006ba8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <vTaskSwitchContext+0xb4>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b20:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <vTaskSwitchContext+0xb8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e010      	b.n	8006b4a <vTaskSwitchContext+0x46>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vTaskSwitchContext+0x3e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	491d      	ldr	r1, [pc, #116]	; (8006bc0 <vTaskSwitchContext+0xbc>)
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0e4      	beq.n	8006b28 <vTaskSwitchContext+0x24>
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <vTaskSwitchContext+0xbc>)
 8006b6a:	4413      	add	r3, r2
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d104      	bne.n	8006b8e <vTaskSwitchContext+0x8a>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	605a      	str	r2, [r3, #4]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a0b      	ldr	r2, [pc, #44]	; (8006bc4 <vTaskSwitchContext+0xc0>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	4a08      	ldr	r2, [pc, #32]	; (8006bbc <vTaskSwitchContext+0xb8>)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <vTaskSwitchContext+0xc0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3354      	adds	r3, #84	; 0x54
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <vTaskSwitchContext+0xc4>)
 8006ba6:	6013      	str	r3, [r2, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000f5c 	.word	0x20000f5c
 8006bb8:	20000f48 	.word	0x20000f48
 8006bbc:	20000f3c 	.word	0x20000f3c
 8006bc0:	20000a64 	.word	0x20000a64
 8006bc4:	20000a60 	.word	0x20000a60
 8006bc8:	20000014 	.word	0x20000014

08006bcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <vTaskPlaceOnEventList+0x44>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3318      	adds	r3, #24
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fe fd6f 	bl	80056de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c00:	2101      	movs	r1, #1
 8006c02:	6838      	ldr	r0, [r7, #0]
 8006c04:	f000 fa80 	bl	8007108 <prvAddCurrentTaskToDelayedList>
}
 8006c08:	bf00      	nop
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000a60 	.word	0x20000a60

08006c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	617b      	str	r3, [r7, #20]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3318      	adds	r3, #24
 8006c42:	4619      	mov	r1, r3
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f7fe fd26 	bl	8005696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	68b8      	ldr	r0, [r7, #8]
 8006c5a:	f000 fa55 	bl	8007108 <prvAddCurrentTaskToDelayedList>
	}
 8006c5e:	bf00      	nop
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000a60 	.word	0x20000a60

08006c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60fb      	str	r3, [r7, #12]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fd57 	bl	8005750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	; (8006d1c <xTaskRemoveFromEventList+0xb0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11d      	bne.n	8006ce6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fd4e 	bl	8005750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <xTaskRemoveFromEventList+0xb4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d903      	bls.n	8006cc8 <xTaskRemoveFromEventList+0x5c>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <xTaskRemoveFromEventList+0xb4>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <xTaskRemoveFromEventList+0xb8>)
 8006cd6:	441a      	add	r2, r3
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4610      	mov	r0, r2
 8006ce0:	f7fe fcd9 	bl	8005696 <vListInsertEnd>
 8006ce4:	e005      	b.n	8006cf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3318      	adds	r3, #24
 8006cea:	4619      	mov	r1, r3
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <xTaskRemoveFromEventList+0xbc>)
 8006cee:	f7fe fcd2 	bl	8005696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <xTaskRemoveFromEventList+0xc0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d905      	bls.n	8006d0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <xTaskRemoveFromEventList+0xc4>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e001      	b.n	8006d10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d10:	697b      	ldr	r3, [r7, #20]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000f5c 	.word	0x20000f5c
 8006d20:	20000f3c 	.word	0x20000f3c
 8006d24:	20000a64 	.word	0x20000a64
 8006d28:	20000ef4 	.word	0x20000ef4
 8006d2c:	20000a60 	.word	0x20000a60
 8006d30:	20000f48 	.word	0x20000f48

08006d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <vTaskInternalSetTimeOutState+0x24>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <vTaskInternalSetTimeOutState+0x28>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000f4c 	.word	0x20000f4c
 8006d5c:	20000f38 	.word	0x20000f38

08006d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	613b      	str	r3, [r7, #16]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006da2:	f000 fe7f 	bl	8007aa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <xTaskCheckForTimeOut+0xbc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbe:	d102      	bne.n	8006dc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e023      	b.n	8006e0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <xTaskCheckForTimeOut+0xc0>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d007      	beq.n	8006de2 <xTaskCheckForTimeOut+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	e015      	b.n	8006e0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d20b      	bcs.n	8006e04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff ff9b 	bl	8006d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	e004      	b.n	8006e0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e0e:	f000 fe79 	bl	8007b04 <vPortExitCritical>

	return xReturn;
 8006e12:	69fb      	ldr	r3, [r7, #28]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000f38 	.word	0x20000f38
 8006e20:	20000f4c 	.word	0x20000f4c

08006e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e28:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <vTaskMissedYield+0x14>)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000f48 	.word	0x20000f48

08006e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e44:	f000 f852 	bl	8006eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <prvIdleTask+0x28>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d9f9      	bls.n	8006e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <prvIdleTask+0x2c>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e60:	e7f0      	b.n	8006e44 <prvIdleTask+0x8>
 8006e62:	bf00      	nop
 8006e64:	20000a64 	.word	0x20000a64
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e72:	2300      	movs	r3, #0
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	e00c      	b.n	8006e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <prvInitialiseTaskLists+0x60>)
 8006e84:	4413      	add	r3, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe fbd8 	bl	800563c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b37      	cmp	r3, #55	; 0x37
 8006e96:	d9ef      	bls.n	8006e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e98:	480d      	ldr	r0, [pc, #52]	; (8006ed0 <prvInitialiseTaskLists+0x64>)
 8006e9a:	f7fe fbcf 	bl	800563c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e9e:	480d      	ldr	r0, [pc, #52]	; (8006ed4 <prvInitialiseTaskLists+0x68>)
 8006ea0:	f7fe fbcc 	bl	800563c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <prvInitialiseTaskLists+0x6c>)
 8006ea6:	f7fe fbc9 	bl	800563c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eaa:	480c      	ldr	r0, [pc, #48]	; (8006edc <prvInitialiseTaskLists+0x70>)
 8006eac:	f7fe fbc6 	bl	800563c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006eb0:	480b      	ldr	r0, [pc, #44]	; (8006ee0 <prvInitialiseTaskLists+0x74>)
 8006eb2:	f7fe fbc3 	bl	800563c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <prvInitialiseTaskLists+0x78>)
 8006eb8:	4a05      	ldr	r2, [pc, #20]	; (8006ed0 <prvInitialiseTaskLists+0x64>)
 8006eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <prvInitialiseTaskLists+0x7c>)
 8006ebe:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <prvInitialiseTaskLists+0x68>)
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000a64 	.word	0x20000a64
 8006ed0:	20000ec4 	.word	0x20000ec4
 8006ed4:	20000ed8 	.word	0x20000ed8
 8006ed8:	20000ef4 	.word	0x20000ef4
 8006edc:	20000f08 	.word	0x20000f08
 8006ee0:	20000f20 	.word	0x20000f20
 8006ee4:	20000eec 	.word	0x20000eec
 8006ee8:	20000ef0 	.word	0x20000ef0

08006eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ef2:	e019      	b.n	8006f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ef4:	f000 fdd6 	bl	8007aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef8:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <prvCheckTasksWaitingTermination+0x50>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fc23 	bl	8005750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <prvCheckTasksWaitingTermination+0x54>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	4a0b      	ldr	r2, [pc, #44]	; (8006f40 <prvCheckTasksWaitingTermination+0x54>)
 8006f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f14:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <prvCheckTasksWaitingTermination+0x58>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <prvCheckTasksWaitingTermination+0x58>)
 8006f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f1e:	f000 fdf1 	bl	8007b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f810 	bl	8006f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <prvCheckTasksWaitingTermination+0x58>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e1      	bne.n	8006ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000f08 	.word	0x20000f08
 8006f40:	20000f34 	.word	0x20000f34
 8006f44:	20000f1c 	.word	0x20000f1c

08006f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3354      	adds	r3, #84	; 0x54
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f995 	bl	8008284 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d108      	bne.n	8006f76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 ff89 	bl	8007e80 <vPortFree>
				vPortFree( pxTCB );
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 ff86 	bl	8007e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f74:	e018      	b.n	8006fa8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d103      	bne.n	8006f88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 ff7d 	bl	8007e80 <vPortFree>
	}
 8006f86:	e00f      	b.n	8006fa8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d00a      	beq.n	8006fa8 <prvDeleteTCB+0x60>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60fb      	str	r3, [r7, #12]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <prvDeleteTCB+0x5e>
	}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvResetNextTaskUnblockTime+0x38>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <prvResetNextTaskUnblockTime+0x3c>)
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fc8:	e008      	b.n	8006fdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <prvResetNextTaskUnblockTime+0x38>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4a04      	ldr	r2, [pc, #16]	; (8006fec <prvResetNextTaskUnblockTime+0x3c>)
 8006fda:	6013      	str	r3, [r2, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000eec 	.word	0x20000eec
 8006fec:	20000f54 	.word	0x20000f54

08006ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <xTaskGetSchedulerState+0x34>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ffe:	2301      	movs	r3, #1
 8007000:	607b      	str	r3, [r7, #4]
 8007002:	e008      	b.n	8007016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <xTaskGetSchedulerState+0x38>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800700c:	2302      	movs	r3, #2
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	e001      	b.n	8007016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007012:	2300      	movs	r3, #0
 8007014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007016:	687b      	ldr	r3, [r7, #4]
	}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000f40 	.word	0x20000f40
 8007028:	20000f5c 	.word	0x20000f5c

0800702c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007038:	2300      	movs	r3, #0
 800703a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d056      	beq.n	80070f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007042:	4b2e      	ldr	r3, [pc, #184]	; (80070fc <xTaskPriorityDisinherit+0xd0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	429a      	cmp	r2, r3
 800704a:	d00a      	beq.n	8007062 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60bb      	str	r3, [r7, #8]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007084:	1e5a      	subs	r2, r3, #1
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	429a      	cmp	r2, r3
 8007094:	d02c      	beq.n	80070f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709a:	2b00      	cmp	r3, #0
 800709c:	d128      	bne.n	80070f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fb54 	bl	8005750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <xTaskPriorityDisinherit+0xd4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d903      	bls.n	80070d0 <xTaskPriorityDisinherit+0xa4>
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <xTaskPriorityDisinherit+0xd4>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4a09      	ldr	r2, [pc, #36]	; (8007104 <xTaskPriorityDisinherit+0xd8>)
 80070de:	441a      	add	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fad5 	bl	8005696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070f0:	697b      	ldr	r3, [r7, #20]
	}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000a60 	.word	0x20000a60
 8007100:	20000f3c 	.word	0x20000f3c
 8007104:	20000a64 	.word	0x20000a64

08007108 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007112:	4b21      	ldr	r3, [pc, #132]	; (8007198 <prvAddCurrentTaskToDelayedList+0x90>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007118:	4b20      	ldr	r3, [pc, #128]	; (800719c <prvAddCurrentTaskToDelayedList+0x94>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3304      	adds	r3, #4
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fb16 	bl	8005750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712a:	d10a      	bne.n	8007142 <prvAddCurrentTaskToDelayedList+0x3a>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007132:	4b1a      	ldr	r3, [pc, #104]	; (800719c <prvAddCurrentTaskToDelayedList+0x94>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4819      	ldr	r0, [pc, #100]	; (80071a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800713c:	f7fe faab 	bl	8005696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007140:	e026      	b.n	8007190 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <prvAddCurrentTaskToDelayedList+0x94>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	429a      	cmp	r2, r3
 8007158:	d209      	bcs.n	800716e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <prvAddCurrentTaskToDelayedList+0x94>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fe fab9 	bl	80056de <vListInsert>
}
 800716c:	e010      	b.n	8007190 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800716e:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <prvAddCurrentTaskToDelayedList+0x94>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f7fe faaf 	bl	80056de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	d202      	bcs.n	8007190 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800718a:	4a08      	ldr	r2, [pc, #32]	; (80071ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000f38 	.word	0x20000f38
 800719c:	20000a60 	.word	0x20000a60
 80071a0:	20000f20 	.word	0x20000f20
 80071a4:	20000ef0 	.word	0x20000ef0
 80071a8:	20000eec 	.word	0x20000eec
 80071ac:	20000f54 	.word	0x20000f54

080071b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071ba:	f000 fb07 	bl	80077cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071be:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <xTimerCreateTimerTask+0x80>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d021      	beq.n	800720a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071ce:	1d3a      	adds	r2, r7, #4
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fa15 	bl	8005608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	9202      	str	r2, [sp, #8]
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2302      	movs	r3, #2
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	460a      	mov	r2, r1
 80071f0:	4910      	ldr	r1, [pc, #64]	; (8007234 <xTimerCreateTimerTask+0x84>)
 80071f2:	4811      	ldr	r0, [pc, #68]	; (8007238 <xTimerCreateTimerTask+0x88>)
 80071f4:	f7ff f8b4 	bl	8006360 <xTaskCreateStatic>
 80071f8:	4603      	mov	r3, r0
 80071fa:	4a10      	ldr	r2, [pc, #64]	; (800723c <xTimerCreateTimerTask+0x8c>)
 80071fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <xTimerCreateTimerTask+0x8c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007206:	2301      	movs	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007226:	697b      	ldr	r3, [r7, #20]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000f90 	.word	0x20000f90
 8007234:	08008c30 	.word	0x08008c30
 8007238:	08007375 	.word	0x08007375
 800723c:	20000f94 	.word	0x20000f94

08007240 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800724e:	2300      	movs	r3, #0
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	623b      	str	r3, [r7, #32]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800726e:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <xTimerGenericCommand+0x98>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d02a      	beq.n	80072cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b05      	cmp	r3, #5
 8007286:	dc18      	bgt.n	80072ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007288:	f7ff feb2 	bl	8006ff0 <xTaskGetSchedulerState>
 800728c:	4603      	mov	r3, r0
 800728e:	2b02      	cmp	r3, #2
 8007290:	d109      	bne.n	80072a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <xTimerGenericCommand+0x98>)
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f107 0110 	add.w	r1, r7, #16
 800729a:	2300      	movs	r3, #0
 800729c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729e:	f7fe fc29 	bl	8005af4 <xQueueGenericSend>
 80072a2:	6278      	str	r0, [r7, #36]	; 0x24
 80072a4:	e012      	b.n	80072cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072a6:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <xTimerGenericCommand+0x98>)
 80072a8:	6818      	ldr	r0, [r3, #0]
 80072aa:	f107 0110 	add.w	r1, r7, #16
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	f7fe fc1f 	bl	8005af4 <xQueueGenericSend>
 80072b6:	6278      	str	r0, [r7, #36]	; 0x24
 80072b8:	e008      	b.n	80072cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <xTimerGenericCommand+0x98>)
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f107 0110 	add.w	r1, r7, #16
 80072c2:	2300      	movs	r3, #0
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	f7fe fd13 	bl	8005cf0 <xQueueGenericSendFromISR>
 80072ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3728      	adds	r7, #40	; 0x28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000f90 	.word	0x20000f90

080072dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e6:	4b22      	ldr	r3, [pc, #136]	; (8007370 <prvProcessExpiredTimer+0x94>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fa2b 	bl	8005750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d022      	beq.n	800734e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	18d1      	adds	r1, r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	6978      	ldr	r0, [r7, #20]
 8007316:	f000 f8d1 	bl	80074bc <prvInsertTimerInActiveList>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01f      	beq.n	8007360 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	2100      	movs	r1, #0
 800732a:	6978      	ldr	r0, [r7, #20]
 800732c:	f7ff ff88 	bl	8007240 <xTimerGenericCommand>
 8007330:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d113      	bne.n	8007360 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	6978      	ldr	r0, [r7, #20]
 8007366:	4798      	blx	r3
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000f88 	.word	0x20000f88

08007374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800737c:	f107 0308 	add.w	r3, r7, #8
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f857 	bl	8007434 <prvGetNextExpireTime>
 8007386:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f803 	bl	8007398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007392:	f000 f8d5 	bl	8007540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007396:	e7f1      	b.n	800737c <prvTimerTask+0x8>

08007398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073a2:	f7ff fa39 	bl	8006818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073a6:	f107 0308 	add.w	r3, r7, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f866 	bl	800747c <prvSampleTimeNow>
 80073b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d130      	bne.n	800741a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d806      	bhi.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073c6:	f7ff fa35 	bl	8006834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff85 	bl	80072dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073d2:	e024      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <prvProcessTimerOrBlockTask+0x90>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <prvProcessTimerOrBlockTask+0x50>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <prvProcessTimerOrBlockTask+0x52>
 80073e8:	2300      	movs	r3, #0
 80073ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <prvProcessTimerOrBlockTask+0x94>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe ff7d 	bl	80062f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f7ff fa19 	bl	8006834 <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <prvProcessTimerOrBlockTask+0x98>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
}
 8007418:	e001      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800741a:	f7ff fa0b 	bl	8006834 <xTaskResumeAll>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000f8c 	.word	0x20000f8c
 800742c:	20000f90 	.word	0x20000f90
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <prvGetNextExpireTime+0x44>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <prvGetNextExpireTime+0x16>
 8007446:	2201      	movs	r2, #1
 8007448:	e000      	b.n	800744c <prvGetNextExpireTime+0x18>
 800744a:	2200      	movs	r2, #0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <prvGetNextExpireTime+0x44>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e001      	b.n	8007468 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007468:	68fb      	ldr	r3, [r7, #12]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000f88 	.word	0x20000f88

0800747c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007484:	f7ff fa74 	bl	8006970 <xTaskGetTickCount>
 8007488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <prvSampleTimeNow+0x3c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	429a      	cmp	r2, r3
 8007492:	d205      	bcs.n	80074a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007494:	f000 f936 	bl	8007704 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e002      	b.n	80074a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074a6:	4a04      	ldr	r2, [pc, #16]	; (80074b8 <prvSampleTimeNow+0x3c>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000f98 	.word	0x20000f98

080074bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d812      	bhi.n	8007508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e01b      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvInsertTimerInActiveList+0x7c>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe f8ec 	bl	80056de <vListInsert>
 8007506:	e012      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d206      	bcs.n	800751e <prvInsertTimerInActiveList+0x62>
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e007      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <prvInsertTimerInActiveList+0x80>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f7fe f8d8 	bl	80056de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800752e:	697b      	ldr	r3, [r7, #20]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000f8c 	.word	0x20000f8c
 800753c:	20000f88 	.word	0x20000f88

08007540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08e      	sub	sp, #56	; 0x38
 8007544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007546:	e0ca      	b.n	80076de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da18      	bge.n	8007580 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	3304      	adds	r3, #4
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	61fb      	str	r3, [r7, #28]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	6850      	ldr	r0, [r2, #4]
 8007578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757a:	6892      	ldr	r2, [r2, #8]
 800757c:	4611      	mov	r1, r2
 800757e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f2c0 80aa 	blt.w	80076dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f8d9 	bl	8005750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800759e:	463b      	mov	r3, r7
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff ff6b 	bl	800747c <prvSampleTimeNow>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	f200 8097 	bhi.w	80076de <prvProcessReceivedCommands+0x19e>
 80075b0:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <prvProcessReceivedCommands+0x78>)
 80075b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b6:	bf00      	nop
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e1 	.word	0x080075e1
 80075c0:	080075e1 	.word	0x080075e1
 80075c4:	08007655 	.word	0x08007655
 80075c8:	08007669 	.word	0x08007669
 80075cc:	080076b3 	.word	0x080076b3
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	080075e1 	.word	0x080075e1
 80075d8:	08007655 	.word	0x08007655
 80075dc:	08007669 	.word	0x08007669
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	18d1      	adds	r1, r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007600:	f7ff ff5c 	bl	80074bc <prvInsertTimerInActiveList>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d069      	beq.n	80076de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007610:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d05e      	beq.n	80076de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	441a      	add	r2, r3
 8007628:	2300      	movs	r3, #0
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	2100      	movs	r1, #0
 8007630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007632:	f7ff fe05 	bl	8007240 <xTimerGenericCommand>
 8007636:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d14f      	bne.n	80076de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	61bb      	str	r3, [r7, #24]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	b2da      	uxtb	r2, r3
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007666:	e03a      	b.n	80076de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	b2da      	uxtb	r2, r3
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	617b      	str	r3, [r7, #20]
}
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	18d1      	adds	r1, r2, r3
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ac:	f7ff ff06 	bl	80074bc <prvInsertTimerInActiveList>
					break;
 80076b0:	e015      	b.n	80076de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f000 fbdd 	bl	8007e80 <vPortFree>
 80076c6:	e00a      	b.n	80076de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076da:	e000      	b.n	80076de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80076dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <prvProcessReceivedCommands+0x1c0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	1d39      	adds	r1, r7, #4
 80076e4:	2200      	movs	r2, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fb9e 	bl	8005e28 <xQueueReceive>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f47f af2a 	bne.w	8007548 <prvProcessReceivedCommands+0x8>
	}
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	3730      	adds	r7, #48	; 0x30
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000f90 	.word	0x20000f90

08007704 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800770a:	e048      	b.n	800779e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007716:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3304      	adds	r3, #4
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f813 	bl	8005750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02e      	beq.n	800779e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	429a      	cmp	r2, r3
 8007750:	d90e      	bls.n	8007770 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3304      	adds	r3, #4
 8007766:	4619      	mov	r1, r3
 8007768:	4610      	mov	r0, r2
 800776a:	f7fd ffb8 	bl	80056de <vListInsert>
 800776e:	e016      	b.n	800779e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007770:	2300      	movs	r3, #0
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	2300      	movs	r3, #0
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	2100      	movs	r1, #0
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fd60 	bl	8007240 <xTimerGenericCommand>
 8007780:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	603b      	str	r3, [r7, #0]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1b1      	bne.n	800770c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <prvSwitchTimerLists+0xc4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a04      	ldr	r2, [pc, #16]	; (80077c4 <prvSwitchTimerLists+0xc0>)
 80077b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077b6:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <prvSwitchTimerLists+0xc4>)
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6013      	str	r3, [r2, #0]
}
 80077bc:	bf00      	nop
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000f88 	.word	0x20000f88
 80077c8:	20000f8c 	.word	0x20000f8c

080077cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077d2:	f000 f967 	bl	8007aa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d120      	bne.n	8007820 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077de:	4814      	ldr	r0, [pc, #80]	; (8007830 <prvCheckForValidListAndQueue+0x64>)
 80077e0:	f7fd ff2c 	bl	800563c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077e4:	4813      	ldr	r0, [pc, #76]	; (8007834 <prvCheckForValidListAndQueue+0x68>)
 80077e6:	f7fd ff29 	bl	800563c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <prvCheckForValidListAndQueue+0x6c>)
 80077ec:	4a10      	ldr	r2, [pc, #64]	; (8007830 <prvCheckForValidListAndQueue+0x64>)
 80077ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <prvCheckForValidListAndQueue+0x70>)
 80077f2:	4a10      	ldr	r2, [pc, #64]	; (8007834 <prvCheckForValidListAndQueue+0x68>)
 80077f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077f6:	2300      	movs	r3, #0
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <prvCheckForValidListAndQueue+0x74>)
 80077fc:	4a11      	ldr	r2, [pc, #68]	; (8007844 <prvCheckForValidListAndQueue+0x78>)
 80077fe:	2110      	movs	r1, #16
 8007800:	200a      	movs	r0, #10
 8007802:	f7fe f837 	bl	8005874 <xQueueGenericCreateStatic>
 8007806:	4603      	mov	r3, r0
 8007808:	4a08      	ldr	r2, [pc, #32]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 800780a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <prvCheckForValidListAndQueue+0x60>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	490b      	ldr	r1, [pc, #44]	; (8007848 <prvCheckForValidListAndQueue+0x7c>)
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fd18 	bl	8006250 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007820:	f000 f970 	bl	8007b04 <vPortExitCritical>
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000f90 	.word	0x20000f90
 8007830:	20000f60 	.word	0x20000f60
 8007834:	20000f74 	.word	0x20000f74
 8007838:	20000f88 	.word	0x20000f88
 800783c:	20000f8c 	.word	0x20000f8c
 8007840:	2000103c 	.word	0x2000103c
 8007844:	20000f9c 	.word	0x20000f9c
 8007848:	08008c38 	.word	0x08008c38

0800784c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b04      	subs	r3, #4
 800785c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b04      	subs	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800787c:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <pxPortInitialiseStack+0x64>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3b14      	subs	r3, #20
 8007886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b04      	subs	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f06f 0202 	mvn.w	r2, #2
 800789a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b20      	subs	r3, #32
 80078a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	080078b5 	.word	0x080078b5

080078b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <prvTaskExitError+0x54>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c6:	d00a      	beq.n	80078de <prvTaskExitError+0x2a>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <prvTaskExitError+0x28>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	60bb      	str	r3, [r7, #8]
}
 80078f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078f2:	bf00      	nop
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0fc      	beq.n	80078f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	20000010 	.word	0x20000010
 800790c:	00000000 	.word	0x00000000

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800795a:	bf00      	nop
 800795c:	e000ed08 	.word	0xe000ed08

08007960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007966:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <xPortStartScheduler+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x26>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <xPortStartScheduler+0x120>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3f      	ldr	r2, [pc, #252]	; (8007a88 <xPortStartScheduler+0x128>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10a      	bne.n	80079a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079a6:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <xPortStartScheduler+0x130>)
 80079cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d4:	e009      	b.n	80079ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079d6:	4b2f      	ldr	r3, [pc, #188]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4a2d      	ldr	r2, [pc, #180]	; (8007a94 <xPortStartScheduler+0x134>)
 80079de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d0ef      	beq.n	80079d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079f6:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <xPortStartScheduler+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1c3 0307 	rsb	r3, r3, #7
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d00a      	beq.n	8007a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60bb      	str	r3, [r7, #8]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a18:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a4e:	f000 f8dd 	bl	8007c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <xPortStartScheduler+0x13c>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a58:	f000 f8fc 	bl	8007c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0f      	ldr	r2, [pc, #60]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a68:	f7ff ff66 	bl	8007938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a6c:	f7ff f84a 	bl	8006b04 <vTaskSwitchContext>
	prvTaskExitError();
 8007a70:	f7ff ff20 	bl	80078b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	e000ed00 	.word	0xe000ed00
 8007a84:	410fc271 	.word	0x410fc271
 8007a88:	410fc270 	.word	0x410fc270
 8007a8c:	e000e400 	.word	0xe000e400
 8007a90:	2000108c 	.word	0x2000108c
 8007a94:	20001090 	.word	0x20001090
 8007a98:	e000ed20 	.word	0xe000ed20
 8007a9c:	20000010 	.word	0x20000010
 8007aa0:	e000ef34 	.word	0xe000ef34

08007aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	607b      	str	r3, [r7, #4]
}
 8007abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <vPortEnterCritical+0x58>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10f      	bne.n	8007af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortEnterCritical+0x5c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	603b      	str	r3, [r7, #0]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vPortEnterCritical+0x4a>
	}
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20000010 	.word	0x20000010
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <vPortExitCritical+0x50>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <vPortExitCritical+0x24>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	607b      	str	r3, [r7, #4]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <vPortExitCritical+0x50>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <vPortExitCritical+0x50>)
 8007b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <vPortExitCritical+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <vPortExitCritical+0x42>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f383 8811 	msr	BASEPRI, r3
}
 8007b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000010 	.word	0x20000010
	...

08007b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b60:	f3ef 8009 	mrs	r0, PSP
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <pxCurrentTCBConst>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f01e 0f10 	tst.w	lr, #16
 8007b70:	bf08      	it	eq
 8007b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b84:	f380 8811 	msr	BASEPRI, r0
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f7fe ffb8 	bl	8006b04 <vTaskSwitchContext>
 8007b94:	f04f 0000 	mov.w	r0, #0
 8007b98:	f380 8811 	msr	BASEPRI, r0
 8007b9c:	bc09      	pop	{r0, r3}
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	f01e 0f10 	tst.w	lr, #16
 8007baa:	bf08      	it	eq
 8007bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bb0:	f380 8809 	msr	PSP, r0
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst>:
 8007bc0:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007be2:	f7fe fed5 	bl	8006990 <xTaskIncrementTick>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <xPortSysTickHandler+0x40>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <vPortSetupTimerInterrupt+0x38>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <vPortSetupTimerInterrupt+0x3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <vPortSetupTimerInterrupt+0x40>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	099b      	lsrs	r3, r3, #6
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <vPortSetupTimerInterrupt+0x44>)
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c2e:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	e000e010 	.word	0xe000e010
 8007c44:	e000e018 	.word	0xe000e018
 8007c48:	20000000 	.word	0x20000000
 8007c4c:	10624dd3 	.word	0x10624dd3
 8007c50:	e000e014 	.word	0xe000e014

08007c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c64 <vPortEnableVFP+0x10>
 8007c58:	6801      	ldr	r1, [r0, #0]
 8007c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c5e:	6001      	str	r1, [r0, #0]
 8007c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c62:	bf00      	nop
 8007c64:	e000ed88 	.word	0xe000ed88

08007c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c6e:	f3ef 8305 	mrs	r3, IPSR
 8007c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d914      	bls.n	8007ca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <vPortValidateInterruptPriority+0x70>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c84:	4b15      	ldr	r3, [pc, #84]	; (8007cdc <vPortValidateInterruptPriority+0x74>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	7afa      	ldrb	r2, [r7, #11]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d20a      	bcs.n	8007ca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <vPortValidateInterruptPriority+0x78>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cac:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <vPortValidateInterruptPriority+0x7c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d90a      	bls.n	8007cca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	603b      	str	r3, [r7, #0]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <vPortValidateInterruptPriority+0x60>
	}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	e000e3f0 	.word	0xe000e3f0
 8007cdc:	2000108c 	.word	0x2000108c
 8007ce0:	e000ed0c 	.word	0xe000ed0c
 8007ce4:	20001090 	.word	0x20001090

08007ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cf4:	f7fe fd90 	bl	8006818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cf8:	4b5b      	ldr	r3, [pc, #364]	; (8007e68 <pvPortMalloc+0x180>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d00:	f000 f920 	bl	8007f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d04:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <pvPortMalloc+0x184>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8093 	bne.w	8007e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d18:	2208      	movs	r2, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d014      	beq.n	8007d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <pvPortMalloc+0x6c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d06e      	beq.n	8007e38 <pvPortMalloc+0x150>
 8007d5a:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <pvPortMalloc+0x188>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d869      	bhi.n	8007e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d64:	4b43      	ldr	r3, [pc, #268]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d68:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d6e:	e004      	b.n	8007d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <pvPortMalloc+0xa4>
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f1      	bne.n	8007d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d8c:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <pvPortMalloc+0x180>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d050      	beq.n	8007e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	2308      	movs	r3, #8
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d91f      	bls.n	8007df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <pvPortMalloc+0xf8>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	613b      	str	r3, [r7, #16]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df2:	69b8      	ldr	r0, [r7, #24]
 8007df4:	f000 f908 	bl	8008008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df8:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <pvPortMalloc+0x188>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <pvPortMalloc+0x188>)
 8007e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <pvPortMalloc+0x188>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <pvPortMalloc+0x190>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d203      	bcs.n	8007e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <pvPortMalloc+0x188>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <pvPortMalloc+0x190>)
 8007e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <pvPortMalloc+0x184>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <pvPortMalloc+0x194>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <pvPortMalloc+0x194>)
 8007e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e38:	f7fe fcfc 	bl	8006834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <pvPortMalloc+0x174>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <pvPortMalloc+0x172>
	return pvReturn;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3728      	adds	r7, #40	; 0x28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20004c9c 	.word	0x20004c9c
 8007e6c:	20004cb0 	.word	0x20004cb0
 8007e70:	20004ca0 	.word	0x20004ca0
 8007e74:	20004c94 	.word	0x20004c94
 8007e78:	20004ca4 	.word	0x20004ca4
 8007e7c:	20004ca8 	.word	0x20004ca8

08007e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d04d      	beq.n	8007f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e92:	2308      	movs	r3, #8
 8007e94:	425b      	negs	r3, r3
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4413      	add	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <vPortFree+0xb8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <vPortFree+0x44>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60fb      	str	r3, [r7, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <vPortFree+0x62>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60bb      	str	r3, [r7, #8]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <vPortFree+0xb8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01e      	beq.n	8007f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11a      	bne.n	8007f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <vPortFree+0xb8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f08:	f7fe fc86 	bl	8006818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <vPortFree+0xbc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <vPortFree+0xbc>)
 8007f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f000 f874 	bl	8008008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <vPortFree+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a06      	ldr	r2, [pc, #24]	; (8007f40 <vPortFree+0xc0>)
 8007f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f2a:	f7fe fc83 	bl	8006834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20004cb0 	.word	0x20004cb0
 8007f3c:	20004ca0 	.word	0x20004ca0
 8007f40:	20004cac 	.word	0x20004cac

08007f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f50:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <prvHeapInit+0xac>)
 8007f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <prvHeapInit+0xac>)
 8007f74:	4413      	add	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f90:	2208      	movs	r2, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fae:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <prvHeapInit+0xb8>)
 8007fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4a09      	ldr	r2, [pc, #36]	; (8008000 <prvHeapInit+0xbc>)
 8007fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <prvHeapInit+0xc0>)
 8007fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20001094 	.word	0x20001094
 8007ff4:	20004c94 	.word	0x20004c94
 8007ff8:	20004c9c 	.word	0x20004c9c
 8007ffc:	20004ca4 	.word	0x20004ca4
 8008000:	20004ca0 	.word	0x20004ca0
 8008004:	20004cb0 	.word	0x20004cb0

08008008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <prvInsertBlockIntoFreeList+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <prvInsertBlockIntoFreeList+0x14>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d8f7      	bhi.n	8008016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d108      	bne.n	800804a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d118      	bne.n	8008090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d00d      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e008      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e003      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d002      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20004c94 	.word	0x20004c94
 80080b8:	20004c9c 	.word	0x20004c9c

080080bc <__errno>:
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <__errno+0x8>)
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000014 	.word	0x20000014

080080c8 <__libc_init_array>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4d0d      	ldr	r5, [pc, #52]	; (8008100 <__libc_init_array+0x38>)
 80080cc:	4c0d      	ldr	r4, [pc, #52]	; (8008104 <__libc_init_array+0x3c>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	2600      	movs	r6, #0
 80080d4:	42a6      	cmp	r6, r4
 80080d6:	d109      	bne.n	80080ec <__libc_init_array+0x24>
 80080d8:	4d0b      	ldr	r5, [pc, #44]	; (8008108 <__libc_init_array+0x40>)
 80080da:	4c0c      	ldr	r4, [pc, #48]	; (800810c <__libc_init_array+0x44>)
 80080dc:	f000 fd08 	bl	8008af0 <_init>
 80080e0:	1b64      	subs	r4, r4, r5
 80080e2:	10a4      	asrs	r4, r4, #2
 80080e4:	2600      	movs	r6, #0
 80080e6:	42a6      	cmp	r6, r4
 80080e8:	d105      	bne.n	80080f6 <__libc_init_array+0x2e>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f0:	4798      	blx	r3
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7ee      	b.n	80080d4 <__libc_init_array+0xc>
 80080f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fa:	4798      	blx	r3
 80080fc:	3601      	adds	r6, #1
 80080fe:	e7f2      	b.n	80080e6 <__libc_init_array+0x1e>
 8008100:	08008da0 	.word	0x08008da0
 8008104:	08008da0 	.word	0x08008da0
 8008108:	08008da0 	.word	0x08008da0
 800810c:	08008da4 	.word	0x08008da4

08008110 <__retarget_lock_acquire_recursive>:
 8008110:	4770      	bx	lr

08008112 <__retarget_lock_release_recursive>:
 8008112:	4770      	bx	lr

08008114 <memcpy>:
 8008114:	440a      	add	r2, r1
 8008116:	4291      	cmp	r1, r2
 8008118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800811c:	d100      	bne.n	8008120 <memcpy+0xc>
 800811e:	4770      	bx	lr
 8008120:	b510      	push	{r4, lr}
 8008122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812a:	4291      	cmp	r1, r2
 800812c:	d1f9      	bne.n	8008122 <memcpy+0xe>
 800812e:	bd10      	pop	{r4, pc}

08008130 <memset>:
 8008130:	4402      	add	r2, r0
 8008132:	4603      	mov	r3, r0
 8008134:	4293      	cmp	r3, r2
 8008136:	d100      	bne.n	800813a <memset+0xa>
 8008138:	4770      	bx	lr
 800813a:	f803 1b01 	strb.w	r1, [r3], #1
 800813e:	e7f9      	b.n	8008134 <memset+0x4>

08008140 <sbrk_aligned>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4e0e      	ldr	r6, [pc, #56]	; (800817c <sbrk_aligned+0x3c>)
 8008144:	460c      	mov	r4, r1
 8008146:	6831      	ldr	r1, [r6, #0]
 8008148:	4605      	mov	r5, r0
 800814a:	b911      	cbnz	r1, 8008152 <sbrk_aligned+0x12>
 800814c:	f000 f8f6 	bl	800833c <_sbrk_r>
 8008150:	6030      	str	r0, [r6, #0]
 8008152:	4621      	mov	r1, r4
 8008154:	4628      	mov	r0, r5
 8008156:	f000 f8f1 	bl	800833c <_sbrk_r>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d00a      	beq.n	8008174 <sbrk_aligned+0x34>
 800815e:	1cc4      	adds	r4, r0, #3
 8008160:	f024 0403 	bic.w	r4, r4, #3
 8008164:	42a0      	cmp	r0, r4
 8008166:	d007      	beq.n	8008178 <sbrk_aligned+0x38>
 8008168:	1a21      	subs	r1, r4, r0
 800816a:	4628      	mov	r0, r5
 800816c:	f000 f8e6 	bl	800833c <_sbrk_r>
 8008170:	3001      	adds	r0, #1
 8008172:	d101      	bne.n	8008178 <sbrk_aligned+0x38>
 8008174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008178:	4620      	mov	r0, r4
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	20004cbc 	.word	0x20004cbc

08008180 <_malloc_r>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	1ccd      	adds	r5, r1, #3
 8008186:	f025 0503 	bic.w	r5, r5, #3
 800818a:	3508      	adds	r5, #8
 800818c:	2d0c      	cmp	r5, #12
 800818e:	bf38      	it	cc
 8008190:	250c      	movcc	r5, #12
 8008192:	2d00      	cmp	r5, #0
 8008194:	4607      	mov	r7, r0
 8008196:	db01      	blt.n	800819c <_malloc_r+0x1c>
 8008198:	42a9      	cmp	r1, r5
 800819a:	d905      	bls.n	80081a8 <_malloc_r+0x28>
 800819c:	230c      	movs	r3, #12
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	2600      	movs	r6, #0
 80081a2:	4630      	mov	r0, r6
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	4e2e      	ldr	r6, [pc, #184]	; (8008264 <_malloc_r+0xe4>)
 80081aa:	f000 f907 	bl	80083bc <__malloc_lock>
 80081ae:	6833      	ldr	r3, [r6, #0]
 80081b0:	461c      	mov	r4, r3
 80081b2:	bb34      	cbnz	r4, 8008202 <_malloc_r+0x82>
 80081b4:	4629      	mov	r1, r5
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ffc2 	bl	8008140 <sbrk_aligned>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	4604      	mov	r4, r0
 80081c0:	d14d      	bne.n	800825e <_malloc_r+0xde>
 80081c2:	6834      	ldr	r4, [r6, #0]
 80081c4:	4626      	mov	r6, r4
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d140      	bne.n	800824c <_malloc_r+0xcc>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	4631      	mov	r1, r6
 80081ce:	4638      	mov	r0, r7
 80081d0:	eb04 0803 	add.w	r8, r4, r3
 80081d4:	f000 f8b2 	bl	800833c <_sbrk_r>
 80081d8:	4580      	cmp	r8, r0
 80081da:	d13a      	bne.n	8008252 <_malloc_r+0xd2>
 80081dc:	6821      	ldr	r1, [r4, #0]
 80081de:	3503      	adds	r5, #3
 80081e0:	1a6d      	subs	r5, r5, r1
 80081e2:	f025 0503 	bic.w	r5, r5, #3
 80081e6:	3508      	adds	r5, #8
 80081e8:	2d0c      	cmp	r5, #12
 80081ea:	bf38      	it	cc
 80081ec:	250c      	movcc	r5, #12
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ffa5 	bl	8008140 <sbrk_aligned>
 80081f6:	3001      	adds	r0, #1
 80081f8:	d02b      	beq.n	8008252 <_malloc_r+0xd2>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	442b      	add	r3, r5
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	e00e      	b.n	8008220 <_malloc_r+0xa0>
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	1b52      	subs	r2, r2, r5
 8008206:	d41e      	bmi.n	8008246 <_malloc_r+0xc6>
 8008208:	2a0b      	cmp	r2, #11
 800820a:	d916      	bls.n	800823a <_malloc_r+0xba>
 800820c:	1961      	adds	r1, r4, r5
 800820e:	42a3      	cmp	r3, r4
 8008210:	6025      	str	r5, [r4, #0]
 8008212:	bf18      	it	ne
 8008214:	6059      	strne	r1, [r3, #4]
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	bf08      	it	eq
 800821a:	6031      	streq	r1, [r6, #0]
 800821c:	5162      	str	r2, [r4, r5]
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	4638      	mov	r0, r7
 8008222:	f104 060b 	add.w	r6, r4, #11
 8008226:	f000 f8cf 	bl	80083c8 <__malloc_unlock>
 800822a:	f026 0607 	bic.w	r6, r6, #7
 800822e:	1d23      	adds	r3, r4, #4
 8008230:	1af2      	subs	r2, r6, r3
 8008232:	d0b6      	beq.n	80081a2 <_malloc_r+0x22>
 8008234:	1b9b      	subs	r3, r3, r6
 8008236:	50a3      	str	r3, [r4, r2]
 8008238:	e7b3      	b.n	80081a2 <_malloc_r+0x22>
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	42a3      	cmp	r3, r4
 800823e:	bf0c      	ite	eq
 8008240:	6032      	streq	r2, [r6, #0]
 8008242:	605a      	strne	r2, [r3, #4]
 8008244:	e7ec      	b.n	8008220 <_malloc_r+0xa0>
 8008246:	4623      	mov	r3, r4
 8008248:	6864      	ldr	r4, [r4, #4]
 800824a:	e7b2      	b.n	80081b2 <_malloc_r+0x32>
 800824c:	4634      	mov	r4, r6
 800824e:	6876      	ldr	r6, [r6, #4]
 8008250:	e7b9      	b.n	80081c6 <_malloc_r+0x46>
 8008252:	230c      	movs	r3, #12
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4638      	mov	r0, r7
 8008258:	f000 f8b6 	bl	80083c8 <__malloc_unlock>
 800825c:	e7a1      	b.n	80081a2 <_malloc_r+0x22>
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	e7de      	b.n	8008220 <_malloc_r+0xa0>
 8008262:	bf00      	nop
 8008264:	20004cb8 	.word	0x20004cb8

08008268 <cleanup_glue>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	6809      	ldr	r1, [r1, #0]
 800826e:	4605      	mov	r5, r0
 8008270:	b109      	cbz	r1, 8008276 <cleanup_glue+0xe>
 8008272:	f7ff fff9 	bl	8008268 <cleanup_glue>
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800827e:	f000 b8a9 	b.w	80083d4 <_free_r>
	...

08008284 <_reclaim_reent>:
 8008284:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <_reclaim_reent+0xb4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4283      	cmp	r3, r0
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	d051      	beq.n	8008334 <_reclaim_reent+0xb0>
 8008290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008292:	b143      	cbz	r3, 80082a6 <_reclaim_reent+0x22>
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d14a      	bne.n	8008330 <_reclaim_reent+0xac>
 800829a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829c:	6819      	ldr	r1, [r3, #0]
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x22>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 f897 	bl	80083d4 <_free_r>
 80082a6:	6961      	ldr	r1, [r4, #20]
 80082a8:	b111      	cbz	r1, 80082b0 <_reclaim_reent+0x2c>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f892 	bl	80083d4 <_free_r>
 80082b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80082b2:	b111      	cbz	r1, 80082ba <_reclaim_reent+0x36>
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 f88d 	bl	80083d4 <_free_r>
 80082ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082bc:	b111      	cbz	r1, 80082c4 <_reclaim_reent+0x40>
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 f888 	bl	80083d4 <_free_r>
 80082c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80082c6:	b111      	cbz	r1, 80082ce <_reclaim_reent+0x4a>
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 f883 	bl	80083d4 <_free_r>
 80082ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80082d0:	b111      	cbz	r1, 80082d8 <_reclaim_reent+0x54>
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 f87e 	bl	80083d4 <_free_r>
 80082d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80082da:	b111      	cbz	r1, 80082e2 <_reclaim_reent+0x5e>
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 f879 	bl	80083d4 <_free_r>
 80082e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80082e4:	b111      	cbz	r1, 80082ec <_reclaim_reent+0x68>
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f874 	bl	80083d4 <_free_r>
 80082ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ee:	b111      	cbz	r1, 80082f6 <_reclaim_reent+0x72>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 f86f 	bl	80083d4 <_free_r>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	b1e3      	cbz	r3, 8008334 <_reclaim_reent+0xb0>
 80082fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082fc:	4620      	mov	r0, r4
 80082fe:	4798      	blx	r3
 8008300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008302:	b1b9      	cbz	r1, 8008334 <_reclaim_reent+0xb0>
 8008304:	4620      	mov	r0, r4
 8008306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800830a:	f7ff bfad 	b.w	8008268 <cleanup_glue>
 800830e:	5949      	ldr	r1, [r1, r5]
 8008310:	b941      	cbnz	r1, 8008324 <_reclaim_reent+0xa0>
 8008312:	3504      	adds	r5, #4
 8008314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008316:	2d80      	cmp	r5, #128	; 0x80
 8008318:	68d9      	ldr	r1, [r3, #12]
 800831a:	d1f8      	bne.n	800830e <_reclaim_reent+0x8a>
 800831c:	4620      	mov	r0, r4
 800831e:	f000 f859 	bl	80083d4 <_free_r>
 8008322:	e7ba      	b.n	800829a <_reclaim_reent+0x16>
 8008324:	680e      	ldr	r6, [r1, #0]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f854 	bl	80083d4 <_free_r>
 800832c:	4631      	mov	r1, r6
 800832e:	e7ef      	b.n	8008310 <_reclaim_reent+0x8c>
 8008330:	2500      	movs	r5, #0
 8008332:	e7ef      	b.n	8008314 <_reclaim_reent+0x90>
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	bf00      	nop
 8008338:	20000014 	.word	0x20000014

0800833c <_sbrk_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d06      	ldr	r5, [pc, #24]	; (8008358 <_sbrk_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f7f9 f808 	bl	800135c <_sbrk>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_sbrk_r+0x1a>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_sbrk_r+0x1a>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20004cc0 	.word	0x20004cc0

0800835c <siprintf>:
 800835c:	b40e      	push	{r1, r2, r3}
 800835e:	b500      	push	{lr}
 8008360:	b09c      	sub	sp, #112	; 0x70
 8008362:	ab1d      	add	r3, sp, #116	; 0x74
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	9006      	str	r0, [sp, #24]
 8008368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800836c:	4809      	ldr	r0, [pc, #36]	; (8008394 <siprintf+0x38>)
 800836e:	9107      	str	r1, [sp, #28]
 8008370:	9104      	str	r1, [sp, #16]
 8008372:	4909      	ldr	r1, [pc, #36]	; (8008398 <siprintf+0x3c>)
 8008374:	f853 2b04 	ldr.w	r2, [r3], #4
 8008378:	9105      	str	r1, [sp, #20]
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	a902      	add	r1, sp, #8
 8008380:	f000 f8d0 	bl	8008524 <_svfiprintf_r>
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	b01c      	add	sp, #112	; 0x70
 800838c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008390:	b003      	add	sp, #12
 8008392:	4770      	bx	lr
 8008394:	20000014 	.word	0x20000014
 8008398:	ffff0208 	.word	0xffff0208

0800839c <strcat>:
 800839c:	b510      	push	{r4, lr}
 800839e:	4602      	mov	r2, r0
 80083a0:	7814      	ldrb	r4, [r2, #0]
 80083a2:	4613      	mov	r3, r2
 80083a4:	3201      	adds	r2, #1
 80083a6:	2c00      	cmp	r4, #0
 80083a8:	d1fa      	bne.n	80083a0 <strcat+0x4>
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	d1f9      	bne.n	80083ac <strcat+0x10>
 80083b8:	bd10      	pop	{r4, pc}
	...

080083bc <__malloc_lock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__malloc_lock+0x8>)
 80083be:	f7ff bea7 	b.w	8008110 <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	20004cb4 	.word	0x20004cb4

080083c8 <__malloc_unlock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__malloc_unlock+0x8>)
 80083ca:	f7ff bea2 	b.w	8008112 <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	20004cb4 	.word	0x20004cb4

080083d4 <_free_r>:
 80083d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d044      	beq.n	8008464 <_free_r+0x90>
 80083da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083de:	9001      	str	r0, [sp, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f1a1 0404 	sub.w	r4, r1, #4
 80083e6:	bfb8      	it	lt
 80083e8:	18e4      	addlt	r4, r4, r3
 80083ea:	f7ff ffe7 	bl	80083bc <__malloc_lock>
 80083ee:	4a1e      	ldr	r2, [pc, #120]	; (8008468 <_free_r+0x94>)
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	b933      	cbnz	r3, 8008404 <_free_r+0x30>
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	6014      	str	r4, [r2, #0]
 80083fa:	b003      	add	sp, #12
 80083fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008400:	f7ff bfe2 	b.w	80083c8 <__malloc_unlock>
 8008404:	42a3      	cmp	r3, r4
 8008406:	d908      	bls.n	800841a <_free_r+0x46>
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	1961      	adds	r1, r4, r5
 800840c:	428b      	cmp	r3, r1
 800840e:	bf01      	itttt	eq
 8008410:	6819      	ldreq	r1, [r3, #0]
 8008412:	685b      	ldreq	r3, [r3, #4]
 8008414:	1949      	addeq	r1, r1, r5
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	e7ed      	b.n	80083f6 <_free_r+0x22>
 800841a:	461a      	mov	r2, r3
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	b10b      	cbz	r3, 8008424 <_free_r+0x50>
 8008420:	42a3      	cmp	r3, r4
 8008422:	d9fa      	bls.n	800841a <_free_r+0x46>
 8008424:	6811      	ldr	r1, [r2, #0]
 8008426:	1855      	adds	r5, r2, r1
 8008428:	42a5      	cmp	r5, r4
 800842a:	d10b      	bne.n	8008444 <_free_r+0x70>
 800842c:	6824      	ldr	r4, [r4, #0]
 800842e:	4421      	add	r1, r4
 8008430:	1854      	adds	r4, r2, r1
 8008432:	42a3      	cmp	r3, r4
 8008434:	6011      	str	r1, [r2, #0]
 8008436:	d1e0      	bne.n	80083fa <_free_r+0x26>
 8008438:	681c      	ldr	r4, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	6053      	str	r3, [r2, #4]
 800843e:	4421      	add	r1, r4
 8008440:	6011      	str	r1, [r2, #0]
 8008442:	e7da      	b.n	80083fa <_free_r+0x26>
 8008444:	d902      	bls.n	800844c <_free_r+0x78>
 8008446:	230c      	movs	r3, #12
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	e7d6      	b.n	80083fa <_free_r+0x26>
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	1961      	adds	r1, r4, r5
 8008450:	428b      	cmp	r3, r1
 8008452:	bf04      	itt	eq
 8008454:	6819      	ldreq	r1, [r3, #0]
 8008456:	685b      	ldreq	r3, [r3, #4]
 8008458:	6063      	str	r3, [r4, #4]
 800845a:	bf04      	itt	eq
 800845c:	1949      	addeq	r1, r1, r5
 800845e:	6021      	streq	r1, [r4, #0]
 8008460:	6054      	str	r4, [r2, #4]
 8008462:	e7ca      	b.n	80083fa <_free_r+0x26>
 8008464:	b003      	add	sp, #12
 8008466:	bd30      	pop	{r4, r5, pc}
 8008468:	20004cb8 	.word	0x20004cb8

0800846c <__ssputs_r>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	688e      	ldr	r6, [r1, #8]
 8008472:	429e      	cmp	r6, r3
 8008474:	4682      	mov	sl, r0
 8008476:	460c      	mov	r4, r1
 8008478:	4690      	mov	r8, r2
 800847a:	461f      	mov	r7, r3
 800847c:	d838      	bhi.n	80084f0 <__ssputs_r+0x84>
 800847e:	898a      	ldrh	r2, [r1, #12]
 8008480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008484:	d032      	beq.n	80084ec <__ssputs_r+0x80>
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	6909      	ldr	r1, [r1, #16]
 800848a:	eba5 0901 	sub.w	r9, r5, r1
 800848e:	6965      	ldr	r5, [r4, #20]
 8008490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008498:	3301      	adds	r3, #1
 800849a:	444b      	add	r3, r9
 800849c:	106d      	asrs	r5, r5, #1
 800849e:	429d      	cmp	r5, r3
 80084a0:	bf38      	it	cc
 80084a2:	461d      	movcc	r5, r3
 80084a4:	0553      	lsls	r3, r2, #21
 80084a6:	d531      	bpl.n	800850c <__ssputs_r+0xa0>
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7ff fe69 	bl	8008180 <_malloc_r>
 80084ae:	4606      	mov	r6, r0
 80084b0:	b950      	cbnz	r0, 80084c8 <__ssputs_r+0x5c>
 80084b2:	230c      	movs	r3, #12
 80084b4:	f8ca 3000 	str.w	r3, [sl]
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	6921      	ldr	r1, [r4, #16]
 80084ca:	464a      	mov	r2, r9
 80084cc:	f7ff fe22 	bl	8008114 <memcpy>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	6126      	str	r6, [r4, #16]
 80084de:	6165      	str	r5, [r4, #20]
 80084e0:	444e      	add	r6, r9
 80084e2:	eba5 0509 	sub.w	r5, r5, r9
 80084e6:	6026      	str	r6, [r4, #0]
 80084e8:	60a5      	str	r5, [r4, #8]
 80084ea:	463e      	mov	r6, r7
 80084ec:	42be      	cmp	r6, r7
 80084ee:	d900      	bls.n	80084f2 <__ssputs_r+0x86>
 80084f0:	463e      	mov	r6, r7
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	4632      	mov	r2, r6
 80084f6:	4641      	mov	r1, r8
 80084f8:	f000 faa8 	bl	8008a4c <memmove>
 80084fc:	68a3      	ldr	r3, [r4, #8]
 80084fe:	1b9b      	subs	r3, r3, r6
 8008500:	60a3      	str	r3, [r4, #8]
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	4433      	add	r3, r6
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	e7db      	b.n	80084c4 <__ssputs_r+0x58>
 800850c:	462a      	mov	r2, r5
 800850e:	f000 fab7 	bl	8008a80 <_realloc_r>
 8008512:	4606      	mov	r6, r0
 8008514:	2800      	cmp	r0, #0
 8008516:	d1e1      	bne.n	80084dc <__ssputs_r+0x70>
 8008518:	6921      	ldr	r1, [r4, #16]
 800851a:	4650      	mov	r0, sl
 800851c:	f7ff ff5a 	bl	80083d4 <_free_r>
 8008520:	e7c7      	b.n	80084b2 <__ssputs_r+0x46>
	...

08008524 <_svfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	4698      	mov	r8, r3
 800852a:	898b      	ldrh	r3, [r1, #12]
 800852c:	061b      	lsls	r3, r3, #24
 800852e:	b09d      	sub	sp, #116	; 0x74
 8008530:	4607      	mov	r7, r0
 8008532:	460d      	mov	r5, r1
 8008534:	4614      	mov	r4, r2
 8008536:	d50e      	bpl.n	8008556 <_svfiprintf_r+0x32>
 8008538:	690b      	ldr	r3, [r1, #16]
 800853a:	b963      	cbnz	r3, 8008556 <_svfiprintf_r+0x32>
 800853c:	2140      	movs	r1, #64	; 0x40
 800853e:	f7ff fe1f 	bl	8008180 <_malloc_r>
 8008542:	6028      	str	r0, [r5, #0]
 8008544:	6128      	str	r0, [r5, #16]
 8008546:	b920      	cbnz	r0, 8008552 <_svfiprintf_r+0x2e>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008550:	e0d1      	b.n	80086f6 <_svfiprintf_r+0x1d2>
 8008552:	2340      	movs	r3, #64	; 0x40
 8008554:	616b      	str	r3, [r5, #20]
 8008556:	2300      	movs	r3, #0
 8008558:	9309      	str	r3, [sp, #36]	; 0x24
 800855a:	2320      	movs	r3, #32
 800855c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008560:	f8cd 800c 	str.w	r8, [sp, #12]
 8008564:	2330      	movs	r3, #48	; 0x30
 8008566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008710 <_svfiprintf_r+0x1ec>
 800856a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800856e:	f04f 0901 	mov.w	r9, #1
 8008572:	4623      	mov	r3, r4
 8008574:	469a      	mov	sl, r3
 8008576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857a:	b10a      	cbz	r2, 8008580 <_svfiprintf_r+0x5c>
 800857c:	2a25      	cmp	r2, #37	; 0x25
 800857e:	d1f9      	bne.n	8008574 <_svfiprintf_r+0x50>
 8008580:	ebba 0b04 	subs.w	fp, sl, r4
 8008584:	d00b      	beq.n	800859e <_svfiprintf_r+0x7a>
 8008586:	465b      	mov	r3, fp
 8008588:	4622      	mov	r2, r4
 800858a:	4629      	mov	r1, r5
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff ff6d 	bl	800846c <__ssputs_r>
 8008592:	3001      	adds	r0, #1
 8008594:	f000 80aa 	beq.w	80086ec <_svfiprintf_r+0x1c8>
 8008598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859a:	445a      	add	r2, fp
 800859c:	9209      	str	r2, [sp, #36]	; 0x24
 800859e:	f89a 3000 	ldrb.w	r3, [sl]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80a2 	beq.w	80086ec <_svfiprintf_r+0x1c8>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b2:	f10a 0a01 	add.w	sl, sl, #1
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085be:	931a      	str	r3, [sp, #104]	; 0x68
 80085c0:	4654      	mov	r4, sl
 80085c2:	2205      	movs	r2, #5
 80085c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c8:	4851      	ldr	r0, [pc, #324]	; (8008710 <_svfiprintf_r+0x1ec>)
 80085ca:	f7f7 fe09 	bl	80001e0 <memchr>
 80085ce:	9a04      	ldr	r2, [sp, #16]
 80085d0:	b9d8      	cbnz	r0, 800860a <_svfiprintf_r+0xe6>
 80085d2:	06d0      	lsls	r0, r2, #27
 80085d4:	bf44      	itt	mi
 80085d6:	2320      	movmi	r3, #32
 80085d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085dc:	0711      	lsls	r1, r2, #28
 80085de:	bf44      	itt	mi
 80085e0:	232b      	movmi	r3, #43	; 0x2b
 80085e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e6:	f89a 3000 	ldrb.w	r3, [sl]
 80085ea:	2b2a      	cmp	r3, #42	; 0x2a
 80085ec:	d015      	beq.n	800861a <_svfiprintf_r+0xf6>
 80085ee:	9a07      	ldr	r2, [sp, #28]
 80085f0:	4654      	mov	r4, sl
 80085f2:	2000      	movs	r0, #0
 80085f4:	f04f 0c0a 	mov.w	ip, #10
 80085f8:	4621      	mov	r1, r4
 80085fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085fe:	3b30      	subs	r3, #48	; 0x30
 8008600:	2b09      	cmp	r3, #9
 8008602:	d94e      	bls.n	80086a2 <_svfiprintf_r+0x17e>
 8008604:	b1b0      	cbz	r0, 8008634 <_svfiprintf_r+0x110>
 8008606:	9207      	str	r2, [sp, #28]
 8008608:	e014      	b.n	8008634 <_svfiprintf_r+0x110>
 800860a:	eba0 0308 	sub.w	r3, r0, r8
 800860e:	fa09 f303 	lsl.w	r3, r9, r3
 8008612:	4313      	orrs	r3, r2
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	46a2      	mov	sl, r4
 8008618:	e7d2      	b.n	80085c0 <_svfiprintf_r+0x9c>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	1d19      	adds	r1, r3, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	9103      	str	r1, [sp, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	bfbb      	ittet	lt
 8008626:	425b      	neglt	r3, r3
 8008628:	f042 0202 	orrlt.w	r2, r2, #2
 800862c:	9307      	strge	r3, [sp, #28]
 800862e:	9307      	strlt	r3, [sp, #28]
 8008630:	bfb8      	it	lt
 8008632:	9204      	strlt	r2, [sp, #16]
 8008634:	7823      	ldrb	r3, [r4, #0]
 8008636:	2b2e      	cmp	r3, #46	; 0x2e
 8008638:	d10c      	bne.n	8008654 <_svfiprintf_r+0x130>
 800863a:	7863      	ldrb	r3, [r4, #1]
 800863c:	2b2a      	cmp	r3, #42	; 0x2a
 800863e:	d135      	bne.n	80086ac <_svfiprintf_r+0x188>
 8008640:	9b03      	ldr	r3, [sp, #12]
 8008642:	1d1a      	adds	r2, r3, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	9203      	str	r2, [sp, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	bfb8      	it	lt
 800864c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008650:	3402      	adds	r4, #2
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008720 <_svfiprintf_r+0x1fc>
 8008658:	7821      	ldrb	r1, [r4, #0]
 800865a:	2203      	movs	r2, #3
 800865c:	4650      	mov	r0, sl
 800865e:	f7f7 fdbf 	bl	80001e0 <memchr>
 8008662:	b140      	cbz	r0, 8008676 <_svfiprintf_r+0x152>
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	eba0 000a 	sub.w	r0, r0, sl
 800866a:	fa03 f000 	lsl.w	r0, r3, r0
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	4303      	orrs	r3, r0
 8008672:	3401      	adds	r4, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867a:	4826      	ldr	r0, [pc, #152]	; (8008714 <_svfiprintf_r+0x1f0>)
 800867c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008680:	2206      	movs	r2, #6
 8008682:	f7f7 fdad 	bl	80001e0 <memchr>
 8008686:	2800      	cmp	r0, #0
 8008688:	d038      	beq.n	80086fc <_svfiprintf_r+0x1d8>
 800868a:	4b23      	ldr	r3, [pc, #140]	; (8008718 <_svfiprintf_r+0x1f4>)
 800868c:	bb1b      	cbnz	r3, 80086d6 <_svfiprintf_r+0x1b2>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	3307      	adds	r3, #7
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	3308      	adds	r3, #8
 8008698:	9303      	str	r3, [sp, #12]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	4433      	add	r3, r6
 800869e:	9309      	str	r3, [sp, #36]	; 0x24
 80086a0:	e767      	b.n	8008572 <_svfiprintf_r+0x4e>
 80086a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a6:	460c      	mov	r4, r1
 80086a8:	2001      	movs	r0, #1
 80086aa:	e7a5      	b.n	80085f8 <_svfiprintf_r+0xd4>
 80086ac:	2300      	movs	r3, #0
 80086ae:	3401      	adds	r4, #1
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	4619      	mov	r1, r3
 80086b4:	f04f 0c0a 	mov.w	ip, #10
 80086b8:	4620      	mov	r0, r4
 80086ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086be:	3a30      	subs	r2, #48	; 0x30
 80086c0:	2a09      	cmp	r2, #9
 80086c2:	d903      	bls.n	80086cc <_svfiprintf_r+0x1a8>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0c5      	beq.n	8008654 <_svfiprintf_r+0x130>
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	e7c3      	b.n	8008654 <_svfiprintf_r+0x130>
 80086cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80086d0:	4604      	mov	r4, r0
 80086d2:	2301      	movs	r3, #1
 80086d4:	e7f0      	b.n	80086b8 <_svfiprintf_r+0x194>
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <_svfiprintf_r+0x1f8>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4638      	mov	r0, r7
 80086e2:	f3af 8000 	nop.w
 80086e6:	1c42      	adds	r2, r0, #1
 80086e8:	4606      	mov	r6, r0
 80086ea:	d1d6      	bne.n	800869a <_svfiprintf_r+0x176>
 80086ec:	89ab      	ldrh	r3, [r5, #12]
 80086ee:	065b      	lsls	r3, r3, #25
 80086f0:	f53f af2c 	bmi.w	800854c <_svfiprintf_r+0x28>
 80086f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086f6:	b01d      	add	sp, #116	; 0x74
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	ab03      	add	r3, sp, #12
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	462a      	mov	r2, r5
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <_svfiprintf_r+0x1f8>)
 8008704:	a904      	add	r1, sp, #16
 8008706:	4638      	mov	r0, r7
 8008708:	f000 f87a 	bl	8008800 <_printf_i>
 800870c:	e7eb      	b.n	80086e6 <_svfiprintf_r+0x1c2>
 800870e:	bf00      	nop
 8008710:	08008d64 	.word	0x08008d64
 8008714:	08008d6e 	.word	0x08008d6e
 8008718:	00000000 	.word	0x00000000
 800871c:	0800846d 	.word	0x0800846d
 8008720:	08008d6a 	.word	0x08008d6a

08008724 <_printf_common>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	4616      	mov	r6, r2
 800872a:	4699      	mov	r9, r3
 800872c:	688a      	ldr	r2, [r1, #8]
 800872e:	690b      	ldr	r3, [r1, #16]
 8008730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008734:	4293      	cmp	r3, r2
 8008736:	bfb8      	it	lt
 8008738:	4613      	movlt	r3, r2
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008740:	4607      	mov	r7, r0
 8008742:	460c      	mov	r4, r1
 8008744:	b10a      	cbz	r2, 800874a <_printf_common+0x26>
 8008746:	3301      	adds	r3, #1
 8008748:	6033      	str	r3, [r6, #0]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	0699      	lsls	r1, r3, #26
 800874e:	bf42      	ittt	mi
 8008750:	6833      	ldrmi	r3, [r6, #0]
 8008752:	3302      	addmi	r3, #2
 8008754:	6033      	strmi	r3, [r6, #0]
 8008756:	6825      	ldr	r5, [r4, #0]
 8008758:	f015 0506 	ands.w	r5, r5, #6
 800875c:	d106      	bne.n	800876c <_printf_common+0x48>
 800875e:	f104 0a19 	add.w	sl, r4, #25
 8008762:	68e3      	ldr	r3, [r4, #12]
 8008764:	6832      	ldr	r2, [r6, #0]
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	42ab      	cmp	r3, r5
 800876a:	dc26      	bgt.n	80087ba <_printf_common+0x96>
 800876c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008770:	1e13      	subs	r3, r2, #0
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	bf18      	it	ne
 8008776:	2301      	movne	r3, #1
 8008778:	0692      	lsls	r2, r2, #26
 800877a:	d42b      	bmi.n	80087d4 <_printf_common+0xb0>
 800877c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008780:	4649      	mov	r1, r9
 8008782:	4638      	mov	r0, r7
 8008784:	47c0      	blx	r8
 8008786:	3001      	adds	r0, #1
 8008788:	d01e      	beq.n	80087c8 <_printf_common+0xa4>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	68e5      	ldr	r5, [r4, #12]
 800878e:	6832      	ldr	r2, [r6, #0]
 8008790:	f003 0306 	and.w	r3, r3, #6
 8008794:	2b04      	cmp	r3, #4
 8008796:	bf08      	it	eq
 8008798:	1aad      	subeq	r5, r5, r2
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	bf0c      	ite	eq
 80087a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087a4:	2500      	movne	r5, #0
 80087a6:	4293      	cmp	r3, r2
 80087a8:	bfc4      	itt	gt
 80087aa:	1a9b      	subgt	r3, r3, r2
 80087ac:	18ed      	addgt	r5, r5, r3
 80087ae:	2600      	movs	r6, #0
 80087b0:	341a      	adds	r4, #26
 80087b2:	42b5      	cmp	r5, r6
 80087b4:	d11a      	bne.n	80087ec <_printf_common+0xc8>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e008      	b.n	80087cc <_printf_common+0xa8>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4652      	mov	r2, sl
 80087be:	4649      	mov	r1, r9
 80087c0:	4638      	mov	r0, r7
 80087c2:	47c0      	blx	r8
 80087c4:	3001      	adds	r0, #1
 80087c6:	d103      	bne.n	80087d0 <_printf_common+0xac>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	3501      	adds	r5, #1
 80087d2:	e7c6      	b.n	8008762 <_printf_common+0x3e>
 80087d4:	18e1      	adds	r1, r4, r3
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	2030      	movs	r0, #48	; 0x30
 80087da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087de:	4422      	add	r2, r4
 80087e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087e8:	3302      	adds	r3, #2
 80087ea:	e7c7      	b.n	800877c <_printf_common+0x58>
 80087ec:	2301      	movs	r3, #1
 80087ee:	4622      	mov	r2, r4
 80087f0:	4649      	mov	r1, r9
 80087f2:	4638      	mov	r0, r7
 80087f4:	47c0      	blx	r8
 80087f6:	3001      	adds	r0, #1
 80087f8:	d0e6      	beq.n	80087c8 <_printf_common+0xa4>
 80087fa:	3601      	adds	r6, #1
 80087fc:	e7d9      	b.n	80087b2 <_printf_common+0x8e>
	...

08008800 <_printf_i>:
 8008800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	7e0f      	ldrb	r7, [r1, #24]
 8008806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008808:	2f78      	cmp	r7, #120	; 0x78
 800880a:	4691      	mov	r9, r2
 800880c:	4680      	mov	r8, r0
 800880e:	460c      	mov	r4, r1
 8008810:	469a      	mov	sl, r3
 8008812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008816:	d807      	bhi.n	8008828 <_printf_i+0x28>
 8008818:	2f62      	cmp	r7, #98	; 0x62
 800881a:	d80a      	bhi.n	8008832 <_printf_i+0x32>
 800881c:	2f00      	cmp	r7, #0
 800881e:	f000 80d8 	beq.w	80089d2 <_printf_i+0x1d2>
 8008822:	2f58      	cmp	r7, #88	; 0x58
 8008824:	f000 80a3 	beq.w	800896e <_printf_i+0x16e>
 8008828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008830:	e03a      	b.n	80088a8 <_printf_i+0xa8>
 8008832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008836:	2b15      	cmp	r3, #21
 8008838:	d8f6      	bhi.n	8008828 <_printf_i+0x28>
 800883a:	a101      	add	r1, pc, #4	; (adr r1, 8008840 <_printf_i+0x40>)
 800883c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008840:	08008899 	.word	0x08008899
 8008844:	080088ad 	.word	0x080088ad
 8008848:	08008829 	.word	0x08008829
 800884c:	08008829 	.word	0x08008829
 8008850:	08008829 	.word	0x08008829
 8008854:	08008829 	.word	0x08008829
 8008858:	080088ad 	.word	0x080088ad
 800885c:	08008829 	.word	0x08008829
 8008860:	08008829 	.word	0x08008829
 8008864:	08008829 	.word	0x08008829
 8008868:	08008829 	.word	0x08008829
 800886c:	080089b9 	.word	0x080089b9
 8008870:	080088dd 	.word	0x080088dd
 8008874:	0800899b 	.word	0x0800899b
 8008878:	08008829 	.word	0x08008829
 800887c:	08008829 	.word	0x08008829
 8008880:	080089db 	.word	0x080089db
 8008884:	08008829 	.word	0x08008829
 8008888:	080088dd 	.word	0x080088dd
 800888c:	08008829 	.word	0x08008829
 8008890:	08008829 	.word	0x08008829
 8008894:	080089a3 	.word	0x080089a3
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	602a      	str	r2, [r5, #0]
 80088a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0a3      	b.n	80089f4 <_printf_i+0x1f4>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	6829      	ldr	r1, [r5, #0]
 80088b0:	0606      	lsls	r6, r0, #24
 80088b2:	f101 0304 	add.w	r3, r1, #4
 80088b6:	d50a      	bpl.n	80088ce <_printf_i+0xce>
 80088b8:	680e      	ldr	r6, [r1, #0]
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	2e00      	cmp	r6, #0
 80088be:	da03      	bge.n	80088c8 <_printf_i+0xc8>
 80088c0:	232d      	movs	r3, #45	; 0x2d
 80088c2:	4276      	negs	r6, r6
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088c8:	485e      	ldr	r0, [pc, #376]	; (8008a44 <_printf_i+0x244>)
 80088ca:	230a      	movs	r3, #10
 80088cc:	e019      	b.n	8008902 <_printf_i+0x102>
 80088ce:	680e      	ldr	r6, [r1, #0]
 80088d0:	602b      	str	r3, [r5, #0]
 80088d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d6:	bf18      	it	ne
 80088d8:	b236      	sxthne	r6, r6
 80088da:	e7ef      	b.n	80088bc <_printf_i+0xbc>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	6029      	str	r1, [r5, #0]
 80088e4:	0601      	lsls	r1, r0, #24
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0xec>
 80088e8:	681e      	ldr	r6, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <_printf_i+0xf2>
 80088ec:	0646      	lsls	r6, r0, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0xe8>
 80088f0:	881e      	ldrh	r6, [r3, #0]
 80088f2:	4854      	ldr	r0, [pc, #336]	; (8008a44 <_printf_i+0x244>)
 80088f4:	2f6f      	cmp	r7, #111	; 0x6f
 80088f6:	bf0c      	ite	eq
 80088f8:	2308      	moveq	r3, #8
 80088fa:	230a      	movne	r3, #10
 80088fc:	2100      	movs	r1, #0
 80088fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008902:	6865      	ldr	r5, [r4, #4]
 8008904:	60a5      	str	r5, [r4, #8]
 8008906:	2d00      	cmp	r5, #0
 8008908:	bfa2      	ittt	ge
 800890a:	6821      	ldrge	r1, [r4, #0]
 800890c:	f021 0104 	bicge.w	r1, r1, #4
 8008910:	6021      	strge	r1, [r4, #0]
 8008912:	b90e      	cbnz	r6, 8008918 <_printf_i+0x118>
 8008914:	2d00      	cmp	r5, #0
 8008916:	d04d      	beq.n	80089b4 <_printf_i+0x1b4>
 8008918:	4615      	mov	r5, r2
 800891a:	fbb6 f1f3 	udiv	r1, r6, r3
 800891e:	fb03 6711 	mls	r7, r3, r1, r6
 8008922:	5dc7      	ldrb	r7, [r0, r7]
 8008924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008928:	4637      	mov	r7, r6
 800892a:	42bb      	cmp	r3, r7
 800892c:	460e      	mov	r6, r1
 800892e:	d9f4      	bls.n	800891a <_printf_i+0x11a>
 8008930:	2b08      	cmp	r3, #8
 8008932:	d10b      	bne.n	800894c <_printf_i+0x14c>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	07de      	lsls	r6, r3, #31
 8008938:	d508      	bpl.n	800894c <_printf_i+0x14c>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4299      	cmp	r1, r3
 8008940:	bfde      	ittt	le
 8008942:	2330      	movle	r3, #48	; 0x30
 8008944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008948:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800894c:	1b52      	subs	r2, r2, r5
 800894e:	6122      	str	r2, [r4, #16]
 8008950:	f8cd a000 	str.w	sl, [sp]
 8008954:	464b      	mov	r3, r9
 8008956:	aa03      	add	r2, sp, #12
 8008958:	4621      	mov	r1, r4
 800895a:	4640      	mov	r0, r8
 800895c:	f7ff fee2 	bl	8008724 <_printf_common>
 8008960:	3001      	adds	r0, #1
 8008962:	d14c      	bne.n	80089fe <_printf_i+0x1fe>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008968:	b004      	add	sp, #16
 800896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896e:	4835      	ldr	r0, [pc, #212]	; (8008a44 <_printf_i+0x244>)
 8008970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f851 6b04 	ldr.w	r6, [r1], #4
 800897c:	6029      	str	r1, [r5, #0]
 800897e:	061d      	lsls	r5, r3, #24
 8008980:	d514      	bpl.n	80089ac <_printf_i+0x1ac>
 8008982:	07df      	lsls	r7, r3, #31
 8008984:	bf44      	itt	mi
 8008986:	f043 0320 	orrmi.w	r3, r3, #32
 800898a:	6023      	strmi	r3, [r4, #0]
 800898c:	b91e      	cbnz	r6, 8008996 <_printf_i+0x196>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	f023 0320 	bic.w	r3, r3, #32
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	2310      	movs	r3, #16
 8008998:	e7b0      	b.n	80088fc <_printf_i+0xfc>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f043 0320 	orr.w	r3, r3, #32
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	2378      	movs	r3, #120	; 0x78
 80089a4:	4828      	ldr	r0, [pc, #160]	; (8008a48 <_printf_i+0x248>)
 80089a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089aa:	e7e3      	b.n	8008974 <_printf_i+0x174>
 80089ac:	0659      	lsls	r1, r3, #25
 80089ae:	bf48      	it	mi
 80089b0:	b2b6      	uxthmi	r6, r6
 80089b2:	e7e6      	b.n	8008982 <_printf_i+0x182>
 80089b4:	4615      	mov	r5, r2
 80089b6:	e7bb      	b.n	8008930 <_printf_i+0x130>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	6826      	ldr	r6, [r4, #0]
 80089bc:	6961      	ldr	r1, [r4, #20]
 80089be:	1d18      	adds	r0, r3, #4
 80089c0:	6028      	str	r0, [r5, #0]
 80089c2:	0635      	lsls	r5, r6, #24
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	d501      	bpl.n	80089cc <_printf_i+0x1cc>
 80089c8:	6019      	str	r1, [r3, #0]
 80089ca:	e002      	b.n	80089d2 <_printf_i+0x1d2>
 80089cc:	0670      	lsls	r0, r6, #25
 80089ce:	d5fb      	bpl.n	80089c8 <_printf_i+0x1c8>
 80089d0:	8019      	strh	r1, [r3, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	6123      	str	r3, [r4, #16]
 80089d6:	4615      	mov	r5, r2
 80089d8:	e7ba      	b.n	8008950 <_printf_i+0x150>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	1d1a      	adds	r2, r3, #4
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	2100      	movs	r1, #0
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7f7 fbfa 	bl	80001e0 <memchr>
 80089ec:	b108      	cbz	r0, 80089f2 <_printf_i+0x1f2>
 80089ee:	1b40      	subs	r0, r0, r5
 80089f0:	6060      	str	r0, [r4, #4]
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	2300      	movs	r3, #0
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	e7a8      	b.n	8008950 <_printf_i+0x150>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4649      	mov	r1, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	47d0      	blx	sl
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d0ab      	beq.n	8008964 <_printf_i+0x164>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	079b      	lsls	r3, r3, #30
 8008a10:	d413      	bmi.n	8008a3a <_printf_i+0x23a>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	4298      	cmp	r0, r3
 8008a18:	bfb8      	it	lt
 8008a1a:	4618      	movlt	r0, r3
 8008a1c:	e7a4      	b.n	8008968 <_printf_i+0x168>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d09b      	beq.n	8008964 <_printf_i+0x164>
 8008a2c:	3501      	adds	r5, #1
 8008a2e:	68e3      	ldr	r3, [r4, #12]
 8008a30:	9903      	ldr	r1, [sp, #12]
 8008a32:	1a5b      	subs	r3, r3, r1
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	dcf2      	bgt.n	8008a1e <_printf_i+0x21e>
 8008a38:	e7eb      	b.n	8008a12 <_printf_i+0x212>
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	f104 0619 	add.w	r6, r4, #25
 8008a40:	e7f5      	b.n	8008a2e <_printf_i+0x22e>
 8008a42:	bf00      	nop
 8008a44:	08008d75 	.word	0x08008d75
 8008a48:	08008d86 	.word	0x08008d86

08008a4c <memmove>:
 8008a4c:	4288      	cmp	r0, r1
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	eb01 0402 	add.w	r4, r1, r2
 8008a54:	d902      	bls.n	8008a5c <memmove+0x10>
 8008a56:	4284      	cmp	r4, r0
 8008a58:	4623      	mov	r3, r4
 8008a5a:	d807      	bhi.n	8008a6c <memmove+0x20>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	42a1      	cmp	r1, r4
 8008a60:	d008      	beq.n	8008a74 <memmove+0x28>
 8008a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6a:	e7f8      	b.n	8008a5e <memmove+0x12>
 8008a6c:	4402      	add	r2, r0
 8008a6e:	4601      	mov	r1, r0
 8008a70:	428a      	cmp	r2, r1
 8008a72:	d100      	bne.n	8008a76 <memmove+0x2a>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a7e:	e7f7      	b.n	8008a70 <memmove+0x24>

08008a80 <_realloc_r>:
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a84:	4680      	mov	r8, r0
 8008a86:	4614      	mov	r4, r2
 8008a88:	460e      	mov	r6, r1
 8008a8a:	b921      	cbnz	r1, 8008a96 <_realloc_r+0x16>
 8008a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a90:	4611      	mov	r1, r2
 8008a92:	f7ff bb75 	b.w	8008180 <_malloc_r>
 8008a96:	b92a      	cbnz	r2, 8008aa4 <_realloc_r+0x24>
 8008a98:	f7ff fc9c 	bl	80083d4 <_free_r>
 8008a9c:	4625      	mov	r5, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	f000 f81b 	bl	8008ade <_malloc_usable_size_r>
 8008aa8:	4284      	cmp	r4, r0
 8008aaa:	4607      	mov	r7, r0
 8008aac:	d802      	bhi.n	8008ab4 <_realloc_r+0x34>
 8008aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ab2:	d812      	bhi.n	8008ada <_realloc_r+0x5a>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	f7ff fb62 	bl	8008180 <_malloc_r>
 8008abc:	4605      	mov	r5, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0ed      	beq.n	8008a9e <_realloc_r+0x1e>
 8008ac2:	42bc      	cmp	r4, r7
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	bf28      	it	cs
 8008aca:	463a      	movcs	r2, r7
 8008acc:	f7ff fb22 	bl	8008114 <memcpy>
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f7ff fc7e 	bl	80083d4 <_free_r>
 8008ad8:	e7e1      	b.n	8008a9e <_realloc_r+0x1e>
 8008ada:	4635      	mov	r5, r6
 8008adc:	e7df      	b.n	8008a9e <_realloc_r+0x1e>

08008ade <_malloc_usable_size_r>:
 8008ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae2:	1f18      	subs	r0, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bfbc      	itt	lt
 8008ae8:	580b      	ldrlt	r3, [r1, r0]
 8008aea:	18c0      	addlt	r0, r0, r3
 8008aec:	4770      	bx	lr
	...

08008af0 <_init>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr

08008afc <_fini>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr
