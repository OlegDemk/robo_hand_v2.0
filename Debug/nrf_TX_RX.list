
nrf_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d20  08007d20  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d28  08007d28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  20000078  08007da8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c84  08007da8  00024c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3a9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b06  00000000  00000000  0003e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00041f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00043798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040e0  00000000  00000000  00044e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a044  00000000  00000000  00048f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a50b4  00000000  00000000  00062fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  001080b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b88 	.word	0x08007b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007b88 	.word	0x08007b88

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_Get_Value>:

	return adc_value;
}
// -------------------------------------------------------------------------------------
int ADC_Get_Value(uint8_t chanel)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
	uint32_t adc_value = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
	bool error_ststus = false;
 8000500:	2300      	movs	r3, #0
 8000502:	77fb      	strb	r3, [r7, #31]

	switch (chanel)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b09      	cmp	r3, #9
 8000508:	d82b      	bhi.n	8000562 <ADC_Get_Value+0x7e>
 800050a:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <ADC_Get_Value+0x2c>)
 800050c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000510:	08000539 	.word	0x08000539
 8000514:	0800053f 	.word	0x0800053f
 8000518:	08000563 	.word	0x08000563
 800051c:	08000563 	.word	0x08000563
 8000520:	08000563 	.word	0x08000563
 8000524:	08000545 	.word	0x08000545
 8000528:	0800054b 	.word	0x0800054b
 800052c:	08000551 	.word	0x08000551
 8000530:	08000557 	.word	0x08000557
 8000534:	0800055d 	.word	0x0800055d
	{
		case 0:
			sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
			break;
 800053c:	e014      	b.n	8000568 <ADC_Get_Value+0x84>
		case 1:
			sConfig.Channel = ADC_CHANNEL_1;
 800053e:	2301      	movs	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
			break;
 8000542:	e011      	b.n	8000568 <ADC_Get_Value+0x84>

		case 5:
			sConfig.Channel = ADC_CHANNEL_5;
 8000544:	2305      	movs	r3, #5
 8000546:	60bb      	str	r3, [r7, #8]
			break;
 8000548:	e00e      	b.n	8000568 <ADC_Get_Value+0x84>

		case 6:
			sConfig.Channel = ADC_CHANNEL_6;
 800054a:	2306      	movs	r3, #6
 800054c:	60bb      	str	r3, [r7, #8]
			break;
 800054e:	e00b      	b.n	8000568 <ADC_Get_Value+0x84>

		case 7:
			sConfig.Channel = ADC_CHANNEL_7;
 8000550:	2307      	movs	r3, #7
 8000552:	60bb      	str	r3, [r7, #8]
			break;
 8000554:	e008      	b.n	8000568 <ADC_Get_Value+0x84>

		case 8:
			sConfig.Channel = ADC_CHANNEL_8;
 8000556:	2308      	movs	r3, #8
 8000558:	60bb      	str	r3, [r7, #8]
			break;
 800055a:	e005      	b.n	8000568 <ADC_Get_Value+0x84>

		case 9:
			sConfig.Channel = ADC_CHANNEL_9;
 800055c:	2309      	movs	r3, #9
 800055e:	60bb      	str	r3, [r7, #8]
			break;
 8000560:	e002      	b.n	8000568 <ADC_Get_Value+0x84>

		default:
			error_ststus = true;
 8000562:	2301      	movs	r3, #1
 8000564:	77fb      	strb	r3, [r7, #31]
			break;
 8000566:	bf00      	nop
	}

	if(error_ststus != true)
 8000568:	7ffb      	ldrb	r3, [r7, #31]
 800056a:	f083 0301 	eor.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d01e      	beq.n	80005b2 <ADC_Get_Value+0xce>
	{
		sConfig.Rank = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4619      	mov	r1, r3
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <ADC_Get_Value+0xdc>)
 8000584:	f001 fc50 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <ADC_Get_Value+0xae>
		{
			Error_Handler();
 800058e:	f000 fbcf 	bl	8000d30 <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ADC_Get_Value+0xdc>)
 8000594:	f001 f99a 	bl	80018cc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000598:	2164      	movs	r1, #100	; 0x64
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <ADC_Get_Value+0xdc>)
 800059c:	f001 fa7d 	bl	8001a9a <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <ADC_Get_Value+0xdc>)
 80005a2:	f001 fc15 	bl	8001dd0 <HAL_ADC_GetValue>
 80005a6:	61b8      	str	r0, [r7, #24]
		HAL_ADC_Stop(&hadc1);
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <ADC_Get_Value+0xdc>)
 80005aa:	f001 fa43 	bl	8001a34 <HAL_ADC_Stop>

		return adc_value;
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	e001      	b.n	80005b6 <ADC_Get_Value+0xd2>
	}
	else		// Init ERROR
	{
		return -1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000094 	.word	0x20000094

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 f8d6 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f864 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 faaa 	bl	8000b28 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005d4:	f000 f970 	bl	80008b8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 fa7c 	bl	8000ad4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005dc:	f000 f8c6 	bl	800076c <MX_ADC1_Init>
  MX_TIM2_Init();
 80005e0:	f000 f9a0 	bl	8000924 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005e4:	f000 fa06 	bl	80009f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f001 f906 	bl	80017fc <HAL_Delay>
 // testReadWriteSetingd();			// For debug

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f004 fa66 	bl	8004ac0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <main+0x98>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	f004 fb58 	bl	8004cae <osSemaphoreNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <main+0x9c>)
 8000602:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RQueue */
  RQueueHandle = osMessageQueueNew (5, sizeof(uint16_t), &RQueue_attributes);
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <main+0xa0>)
 8000606:	2102      	movs	r1, #2
 8000608:	2005      	movs	r0, #5
 800060a:	f004 fbd9 	bl	8004dc0 <osMessageQueueNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a15      	ldr	r2, [pc, #84]	; (8000668 <main+0xa4>)
 8000612:	6013      	str	r3, [r2, #0]

  /* creation of DATAQueue */
  DATAQueueHandle = osMessageQueueNew (1, sizeof(DATA), &DATAQueue_attributes);
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <main+0xa8>)
 8000616:	210a      	movs	r1, #10
 8000618:	2001      	movs	r0, #1
 800061a:	f004 fbd1 	bl	8004dc0 <osMessageQueueNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <main+0xac>)
 8000622:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <main+0xb0>)
 8000626:	2100      	movs	r1, #0
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <main+0xb4>)
 800062a:	f004 fa93 	bl	8004b54 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <main+0xb8>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of tx_task */
  tx_taskHandle = osThreadNew(Start_tx_task, NULL, &tx_task_attributes);
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <main+0xbc>)
 8000636:	2100      	movs	r1, #0
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <main+0xc0>)
 800063a:	f004 fa8b 	bl	8004b54 <osThreadNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <main+0xc4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of rx_Task */
  rx_TaskHandle = osThreadNew(Start_rx_Task, NULL, &rx_Task_attributes);
 8000644:	4a11      	ldr	r2, [pc, #68]	; (800068c <main+0xc8>)
 8000646:	2100      	movs	r1, #0
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <main+0xcc>)
 800064a:	f004 fa83 	bl	8004b54 <osThreadNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <main+0xd0>)
 8000652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000654:	f004 fa58 	bl	8004b08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0x94>
 800065a:	bf00      	nop
 800065c:	08007c98 	.word	0x08007c98
 8000660:	2000021c 	.word	0x2000021c
 8000664:	08007c68 	.word	0x08007c68
 8000668:	20000214 	.word	0x20000214
 800066c:	08007c80 	.word	0x08007c80
 8000670:	20000218 	.word	0x20000218
 8000674:	08007bfc 	.word	0x08007bfc
 8000678:	08000c5d 	.word	0x08000c5d
 800067c:	20000208 	.word	0x20000208
 8000680:	08007c20 	.word	0x08007c20
 8000684:	08000c6d 	.word	0x08000c6d
 8000688:	2000020c 	.word	0x2000020c
 800068c:	08007c44 	.word	0x08007c44
 8000690:	08000c7d 	.word	0x08000c7d
 8000694:	20000210 	.word	0x20000210

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 f9a4 	bl	80079f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <SystemClock_Config+0xd0>)
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800070c:	2319      	movs	r3, #25
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f002 f87f 	bl	8002824 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800072c:	f000 fb00 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2102      	movs	r1, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fae1 	bl	8002d14 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000758:	f000 faea 	bl	8000d30 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <MX_ADC1_Init+0x140>)
 8000780:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <MX_ADC1_Init+0x144>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <MX_ADC1_Init+0x140>)
 8000786:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b47      	ldr	r3, [pc, #284]	; (80008ac <MX_ADC1_Init+0x140>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <MX_ADC1_Init+0x140>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000798:	4b44      	ldr	r3, [pc, #272]	; (80008ac <MX_ADC1_Init+0x140>)
 800079a:	2201      	movs	r2, #1
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b43      	ldr	r3, [pc, #268]	; (80008ac <MX_ADC1_Init+0x140>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_ADC1_Init+0x140>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_ADC1_Init+0x140>)
 80007ae:	4a41      	ldr	r2, [pc, #260]	; (80008b4 <MX_ADC1_Init+0x148>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b3e      	ldr	r3, [pc, #248]	; (80008ac <MX_ADC1_Init+0x140>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80007b8:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_ADC1_Init+0x140>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <MX_ADC1_Init+0x140>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_ADC1_Init+0x140>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <MX_ADC1_Init+0x140>)
 80007ce:	f001 f839 	bl	8001844 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d8:	f000 faaa 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007dc:	2301      	movs	r3, #1
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007e4:	2301      	movs	r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	482f      	ldr	r0, [pc, #188]	; (80008ac <MX_ADC1_Init+0x140>)
 80007ee:	f001 fb1b 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f8:	f000 fa9a 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007fc:	2305      	movs	r3, #5
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4828      	ldr	r0, [pc, #160]	; (80008ac <MX_ADC1_Init+0x140>)
 800080a:	f001 fb0d 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 fa8c 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000818:	2306      	movs	r3, #6
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <MX_ADC1_Init+0x140>)
 8000826:	f001 faff 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000830:	f000 fa7e 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000834:	2307      	movs	r3, #7
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_ADC1_Init+0x140>)
 8000842:	f001 faf1 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800084c:	f000 fa70 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000850:	2308      	movs	r3, #8
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000854:	2305      	movs	r3, #5
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_ADC1_Init+0x140>)
 800085e:	f001 fae3 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000868:	f000 fa62 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000870:	2306      	movs	r3, #6
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_ADC1_Init+0x140>)
 800087a:	f001 fad5 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000884:	f000 fa54 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000888:	2309      	movs	r3, #9
 800088a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC1_Init+0x140>)
 8000896:	f001 fac7 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80008a0:	f000 fa46 	bl	8000d30 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000094 	.word	0x20000094
 80008b0:	40012000 	.word	0x40012000
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI2_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI2_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI2_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI2_Init+0x64>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI2_Init+0x64>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI2_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI2_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI2_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI2_Init+0x64>)
 800090a:	f002 fc15 	bl	8003138 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 fa0c 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200000dc 	.word	0x200000dc
 8000920:	40003800 	.word	0x40003800

08000924 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000950:	f240 227f 	movw	r2, #639	; 0x27f
 8000954:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_TIM2_Init+0xcc>)
 800095e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_TIM2_Init+0xcc>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000972:	f003 f8cf 	bl	8003b14 <HAL_TIM_PWM_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 f9d8 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_TIM2_Init+0xcc>)
 8000990:	f003 fd0e 	bl	80043b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800099a:	f000 f9c9 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 80009a2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_TIM2_Init+0xcc>)
 80009b8:	f003 fa04 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80009c2:	f000 f9b5 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <MX_TIM2_Init+0xcc>)
 80009d2:	f003 f9f7 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80009dc:	f000 f9a8 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MX_TIM2_Init+0xcc>)
 80009e2:	f000 fabd 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000134 	.word	0x20000134

080009f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a18:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <MX_TIM4_Init+0xdc>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a1e:	f240 227f 	movw	r2, #639	; 0x27f
 8000a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a2c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a3e:	4823      	ldr	r0, [pc, #140]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a40:	f003 f868 	bl	8003b14 <HAL_TIM_PWM_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a4a:	f000 f971 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481b      	ldr	r0, [pc, #108]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a5e:	f003 fca7 	bl	80043b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a68:	f000 f962 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6c:	2360      	movs	r3, #96	; 0x60
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a84:	f003 f99e 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000a8e:	f000 f94f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2204      	movs	r2, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000a9a:	f003 f993 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000aa4:	f000 f944 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000ab0:	f003 f988 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000aba:	f000 f939 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM4_Init+0xd8>)
 8000ac0:	f000 fa4e 	bl	8000f60 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000017c 	.word	0x2000017c
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART1_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f003 fcd2 	bl	80044b4 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 f90b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200001c4 	.word	0x200001c4
 8000b24:	40011000 	.word	0x40011000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a41      	ldr	r2, [pc, #260]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a3a      	ldr	r2, [pc, #232]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a2c      	ldr	r2, [pc, #176]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_GPIO_Init+0x124>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4826      	ldr	r0, [pc, #152]	; (8000c50 <MX_GPIO_Init+0x128>)
 8000bb6:	f001 fddd 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2118      	movs	r1, #24
 8000bbe:	4825      	ldr	r0, [pc, #148]	; (8000c54 <MX_GPIO_Init+0x12c>)
 8000bc0:	f001 fdd8 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_GPIO_Init+0x128>)
 8000bde:	f001 fc2d 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000be2:	2304      	movs	r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <MX_GPIO_Init+0x12c>)
 8000bf8:	f001 fc20 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin;
 8000bfc:	2318      	movs	r3, #24
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0x12c>)
 8000c14:	f001 fc12 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <MX_GPIO_Init+0x130>)
 8000c2e:	f001 fc05 	bl	800243c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	2008      	movs	r0, #8
 8000c38:	f001 fbd6 	bl	80023e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c3c:	2008      	movs	r0, #8
 8000c3e:	f001 fbef 	bl	8002420 <HAL_NVIC_EnableIRQ>

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400

08000c5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]


  for(;;)
  {

	  osDelay(10);
 8000c64:	200a      	movs	r0, #10
 8000c66:	f004 f807 	bl	8004c78 <osDelay>
 8000c6a:	e7fb      	b.n	8000c64 <StartDefaultTask+0x8>

08000c6c <Start_tx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_tx_task */
void Start_tx_task(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
		Set_Servo_Angle(5, 180 - DATA_t.R5);
	}
	osDelay(10);

#endif
		osDelay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f003 ffff 	bl	8004c78 <osDelay>
 8000c7a:	e7fb      	b.n	8000c74 <Start_tx_task+0x8>

08000c7c <Start_rx_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_rx_Task */
void Start_rx_Task(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_rx_Task */
  /* Infinite loop */

#if NRF_MODE == TX
	uint16_t adc_values[7] = {0};
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	819a      	strh	r2, [r3, #12]
	NRF24_init_TX();
 8000c92:	f000 fb03 	bl	800129c <NRF24_init_TX>

	for(;;)
	{
#if NRF_MODE == TX
		// Resistors
		adc_values[0] = ADC_Get_Value(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fc24 	bl	80004e4 <ADC_Get_Value>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	843b      	strh	r3, [r7, #32]
		adc_values[1] = ADC_Get_Value(5);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f7ff fc1e 	bl	80004e4 <ADC_Get_Value>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	847b      	strh	r3, [r7, #34]	; 0x22
		adc_values[2] = ADC_Get_Value(6);
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f7ff fc18 	bl	80004e4 <ADC_Get_Value>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		adc_values[3] = ADC_Get_Value(7);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f7ff fc12 	bl	80004e4 <ADC_Get_Value>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
		adc_values[4] = ADC_Get_Value(8);
 8000cc6:	2008      	movs	r0, #8
 8000cc8:	f7ff fc0c 	bl	80004e4 <ADC_Get_Value>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	853b      	strh	r3, [r7, #40]	; 0x28

		// Send data into queue
		uint8_t adc_data[20] = {0};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	8c3b      	ldrh	r3, [r7, #32]
		memcpy(&adc_data[0], &adc_values[0], sizeof(uint16_t));
 8000ce6:	81bb      	strh	r3, [r7, #12]
 8000ce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
		memcpy(&adc_data[2], &adc_values[1], sizeof(uint16_t));
 8000cea:	81fb      	strh	r3, [r7, #14]
 8000cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
		memcpy(&adc_data[4], &adc_values[2], sizeof(uint16_t));
 8000cee:	823b      	strh	r3, [r7, #16]
 8000cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
		memcpy(&adc_data[6], &adc_values[3], sizeof(uint16_t));
 8000cf2:	827b      	strh	r3, [r7, #18]
 8000cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
		memcpy(&adc_data[8], &adc_values[4], sizeof(uint16_t));
 8000cf6:	82bb      	strh	r3, [r7, #20]


		NRF24L01_Transmit_Real_Data(adc_data);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fd05 	bl	800170c <NRF24L01_Transmit_Real_Data>
#endif

		osDelay(10);
 8000d02:	200a      	movs	r0, #10
 8000d04:	f003 ffb8 	bl	8004c78 <osDelay>
	{
 8000d08:	e7c5      	b.n	8000c96 <Start_rx_Task+0x1a>
	...

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 fd4d 	bl	80017bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40014400 	.word	0x40014400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_MspInit+0x54>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x54>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_MspInit+0x54>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_MspInit+0x54>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	f06f 0001 	mvn.w	r0, #1
 8000d82:	f001 fb31 	bl	80023e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_ADC_MspInit+0xc0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d149      	bne.n	8000e4a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_ADC_MspInit+0xc4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000e0a:	23e3      	movs	r3, #227	; 0xe3
 8000e0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480f      	ldr	r0, [pc, #60]	; (8000e5c <HAL_ADC_MspInit+0xc8>)
 8000e1e:	f001 fb0d 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e22:	2303      	movs	r3, #3
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <HAL_ADC_MspInit+0xcc>)
 8000e36:	f001 fb01 	bl	800243c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f001 fad2 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e44:	2012      	movs	r0, #18
 8000e46:	f001 faeb 	bl	8002420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40012000 	.word	0x40012000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12c      	bne.n	8000ee0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000ebe:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_SPI_MspInit+0x8c>)
 8000edc:	f001 faae 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40003800 	.word	0x40003800
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d10e      	bne.n	8000f24 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f22:	e012      	b.n	8000f4a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_TIM_PWM_MspInit+0x68>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_PWM_MspInit+0x64>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40000800 	.word	0x40000800

08000f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d13d      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a31      	ldr	r2, [pc, #196]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481f      	ldr	r0, [pc, #124]	; (8001054 <HAL_TIM_MspPostInit+0xf4>)
 8000fd8:	f001 fa30 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fec:	2301      	movs	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <HAL_TIM_MspPostInit+0xf8>)
 8000ff8:	f001 fa20 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ffc:	e023      	b.n	8001046 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_TIM_MspPostInit+0xfc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d11e      	bne.n	8001046 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_TIM_MspPostInit+0xf0>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001024:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001036:	2302      	movs	r3, #2
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_TIM_MspPostInit+0xf8>)
 8001042:	f001 f9fb 	bl	800243c <HAL_GPIO_Init>
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	40000800 	.word	0x40000800

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_UART_MspInit+0x88>)
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_MspInit+0x88>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010cc:	2307      	movs	r3, #7
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0x8c>)
 80010d8:	f001 f9b0 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_InitTick+0xd0>)
 8001106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_InitTick+0xd0>)
 800110a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110e:	6453      	str	r3, [r2, #68]	; 0x44
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_InitTick+0xd0>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 ffd4 	bl	80030d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800112c:	f001 ffbe 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8001130:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_InitTick+0xd4>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3b01      	subs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_InitTick+0xd8>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_InitTick+0xdc>)
 8001144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_InitTick+0xd8>)
 8001148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_InitTick+0xd8>)
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_InitTick+0xd8>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_InitTick+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_InitTick+0xd8>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <HAL_InitTick+0xd8>)
 8001168:	f002 fc18 	bl	800399c <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11b      	bne.n	80011b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800117a:	4813      	ldr	r0, [pc, #76]	; (80011c8 <HAL_InitTick+0xd8>)
 800117c:	f002 fc68 	bl	8003a50 <HAL_TIM_Base_Start_IT>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800118a:	2b00      	cmp	r3, #0
 800118c:	d111      	bne.n	80011b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800118e:	2019      	movs	r0, #25
 8001190:	f001 f946 	bl	8002420 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	d808      	bhi.n	80011ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800119a:	2200      	movs	r2, #0
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	2019      	movs	r0, #25
 80011a0:	f001 f922 	bl	80023e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0xe0>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e002      	b.n	80011b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	20000220 	.word	0x20000220
 80011cc:	40014400 	.word	0x40014400
 80011d0:	20000008 	.word	0x20000008

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8001204:	2004      	movs	r0, #4
 8001206:	f001 fae9 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <ADC_IRQHandler+0x10>)
 8001216:	f000 fccb 	bl	8001bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000094 	.word	0x20000094

08001224 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800122a:	f002 fcc2 	bl	8003bb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000220 	.word	0x20000220

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <DelayMicro>:
void print_Data_Ower_uart(uint8_t *RX_BUF);
void parsing_Data(uint8_t *RX_BUF);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <DelayMicro+0x38>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <DelayMicro+0x3c>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0a9b      	lsrs	r3, r3, #10
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 800127a:	bf00      	nop
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1e5a      	subs	r2, r3, #1
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1fa      	bne.n	800127c <DelayMicro+0x20>
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000000 	.word	0x20000000
 8001298:	02659117 	.word	0x02659117

0800129c <NRF24_init_TX>:
// -------------------------------------------------------------------------------------
void NRF24_init_TX(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	 CE_RESET;
 80012a0:	2200      	movs	r2, #0
 80012a2:	2108      	movs	r1, #8
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <NRF24_init_TX+0xa0>)
 80012a6:	f001 fa65 	bl	8002774 <HAL_GPIO_WritePin>
	 // DelayMicro(5000);
	 osDelay(5);
 80012aa:	2005      	movs	r0, #5
 80012ac:	f003 fce4 	bl	8004c78 <osDelay>
	 // HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80012b0:	210a      	movs	r1, #10
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f87c 	bl	80013b0 <NRF24_WriteReg>
	 // DelayMicro(5000);
	 // HAL_Delay(5);
	 osDelay(5);
 80012b8:	2005      	movs	r0, #5
 80012ba:	f003 fcdd 	bl	8004c78 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 80012be:	2101      	movs	r1, #1
 80012c0:	2001      	movs	r0, #1
 80012c2:	f000 f875 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0
 80012c6:	2101      	movs	r1, #1
 80012c8:	2002      	movs	r0, #2
 80012ca:	f000 f871 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80012ce:	2101      	movs	r1, #1
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f86d 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 80012d6:	215f      	movs	r1, #95	; 0x5f
 80012d8:	2004      	movs	r0, #4
 80012da:	f000 f869 	bl	80013b0 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 80012de:	f000 f895 	bl	800140c <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	201d      	movs	r0, #29
 80012e6:	f000 f863 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 80012ea:	2100      	movs	r1, #0
 80012ec:	201c      	movs	r0, #28
 80012ee:	f000 f85f 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 80012f2:	2170      	movs	r1, #112	; 0x70
 80012f4:	2007      	movs	r0, #7
 80012f6:	f000 f85b 	bl	80013b0 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			// 2476 MHz
 80012fa:	214c      	movs	r1, #76	; 0x4c
 80012fc:	2005      	movs	r0, #5
 80012fe:	f000 f857 	bl	80013b0 <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, 0x06);		// TX_PWR:0dBm, Datarate:1Mbps      - WAS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	 //NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps	- New version
	 NRF24_WriteReg(RF_SETUP, 0x0F);  		// TX_PWR:0dBm, Datarate: 1Mbps	- New version
 8001302:	210f      	movs	r1, #15
 8001304:	2006      	movs	r0, #6
 8001306:	f000 f853 	bl	80013b0 <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800130a:	2203      	movs	r2, #3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <NRF24_init_TX+0xa4>)
 800130e:	2010      	movs	r0, #16
 8001310:	f000 f8a6 	bl	8001460 <NRF24_Write_Buf>
	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 8001314:	2203      	movs	r2, #3
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <NRF24_init_TX+0xa4>)
 8001318:	200a      	movs	r0, #10
 800131a:	f000 f8a1 	bl	8001460 <NRF24_Write_Buf>
	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 //Number of bytes in RX payload in data pipe 0
 800131e:	210a      	movs	r1, #10
 8001320:	2011      	movs	r0, #17
 8001322:	f000 f845 	bl	80013b0 <NRF24_WriteReg>

	 NRF24L01_TX_Mode();
 8001326:	f000 f937 	bl	8001598 <NRF24L01_TX_Mode>
	 LED_OFF;
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <NRF24_init_TX+0xa8>)
 8001332:	f001 fa1f 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40020000 	.word	0x40020000
 8001340:	20000004 	.word	0x20000004
 8001344:	40020800 	.word	0x40020800

08001348 <NRF24_ReadReg>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8001356:	2200      	movs	r2, #0
 8001358:	2110      	movs	r1, #16
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <NRF24_ReadReg+0x60>)
 800135c:	f001 fa0a 	bl	8002774 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8001360:	f107 020f 	add.w	r2, r7, #15
 8001364:	1df9      	adds	r1, r7, #7
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	480f      	ldr	r0, [pc, #60]	; (80013ac <NRF24_ReadReg+0x64>)
 8001370:	f002 f8a7 	bl	80034c2 <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b07      	cmp	r3, #7
 8001378:	d00c      	beq.n	8001394 <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 800137e:	f107 020f 	add.w	r2, r7, #15
 8001382:	f107 010e 	add.w	r1, r7, #14
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <NRF24_ReadReg+0x64>)
 8001390:	f002 f897 	bl	80034c2 <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8001394:	2201      	movs	r2, #1
 8001396:	2110      	movs	r1, #16
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <NRF24_ReadReg+0x60>)
 800139a:	f001 f9eb 	bl	8002774 <HAL_GPIO_WritePin>

	return dt;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40020000 	.word	0x40020000
 80013ac:	200000dc 	.word	0x200000dc

080013b0 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <NRF24_WriteReg+0x54>)
 80013d0:	f001 f9d0 	bl	8002774 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 80013d4:	1df9      	adds	r1, r7, #7
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	2201      	movs	r2, #1
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <NRF24_WriteReg+0x58>)
 80013de:	f001 ff34 	bl	800324a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 80013e2:	1db9      	adds	r1, r7, #6
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	2201      	movs	r2, #1
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <NRF24_WriteReg+0x58>)
 80013ec:	f001 ff2d 	bl	800324a <HAL_SPI_Transmit>

	CS_OFF;
 80013f0:	2201      	movs	r2, #1
 80013f2:	2110      	movs	r1, #16
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <NRF24_WriteReg+0x54>)
 80013f6:	f001 f9bd 	bl	8002774 <HAL_GPIO_WritePin>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020000 	.word	0x40020000
 8001408:	200000dc 	.word	0x200000dc

0800140c <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8001412:	2350      	movs	r3, #80	; 0x50
 8001414:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <NRF24_ToggleFeatures+0x4c>)
 800141c:	f001 f9aa 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001420:	1d39      	adds	r1, r7, #4
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	2201      	movs	r2, #1
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <NRF24_ToggleFeatures+0x50>)
 800142a:	f001 ff0e 	bl	800324a <HAL_SPI_Transmit>

	DelayMicro(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ff14 	bl	800125c <DelayMicro>

	dt[0] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	2201      	movs	r2, #1
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <NRF24_ToggleFeatures+0x50>)
 8001442:	f001 ff02 	bl	800324a <HAL_SPI_Transmit>
	CS_OFF;
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <NRF24_ToggleFeatures+0x4c>)
 800144c:	f001 f992 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020000 	.word	0x40020000
 800145c:	200000dc 	.word	0x200000dc

08001460 <NRF24_Write_Buf>:

	CS_OFF;
}
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	b2db      	uxtb	r3, r3
 8001478:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 800147a:	2200      	movs	r2, #0
 800147c:	2110      	movs	r1, #16
 800147e:	480f      	ldr	r0, [pc, #60]	; (80014bc <NRF24_Write_Buf+0x5c>)
 8001480:	f001 f978 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8001484:	1df9      	adds	r1, r7, #7
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	2201      	movs	r2, #1
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <NRF24_Write_Buf+0x60>)
 800148e:	f001 fedc 	bl	800324a <HAL_SPI_Transmit>

	DelayMicro(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fee2 	bl	800125c <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	b29a      	uxth	r2, r3
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <NRF24_Write_Buf+0x60>)
 80014a4:	f001 fed1 	bl	800324a <HAL_SPI_Transmit>

	CS_OFF;
 80014a8:	2201      	movs	r2, #1
 80014aa:	2110      	movs	r1, #16
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <NRF24_Write_Buf+0x5c>)
 80014ae:	f001 f961 	bl	8002774 <HAL_GPIO_WritePin>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020000 	.word	0x40020000
 80014c0:	200000dc 	.word	0x200000dc

080014c4 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 80014ca:	23e2      	movs	r3, #226	; 0xe2
 80014cc:	713b      	strb	r3, [r7, #4]

	CS_ON;
 80014ce:	2200      	movs	r2, #0
 80014d0:	2110      	movs	r1, #16
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <NRF24_FlushRX+0x3c>)
 80014d4:	f001 f94e 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 80014d8:	1d39      	adds	r1, r7, #4
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	2201      	movs	r2, #1
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <NRF24_FlushRX+0x40>)
 80014e2:	f001 feb2 	bl	800324a <HAL_SPI_Transmit>
	DelayMicro(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff feb8 	bl	800125c <DelayMicro>
	CS_OFF;
 80014ec:	2201      	movs	r2, #1
 80014ee:	2110      	movs	r1, #16
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <NRF24_FlushRX+0x3c>)
 80014f2:	f001 f93f 	bl	8002774 <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020000 	.word	0x40020000
 8001504:	200000dc 	.word	0x200000dc

08001508 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 800150e:	23e1      	movs	r3, #225	; 0xe1
 8001510:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8001512:	2200      	movs	r2, #0
 8001514:	2110      	movs	r1, #16
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <NRF24_FlushTX+0x3c>)
 8001518:	f001 f92c 	bl	8002774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 800151c:	1d39      	adds	r1, r7, #4
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	2201      	movs	r2, #1
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <NRF24_FlushTX+0x40>)
 8001526:	f001 fe90 	bl	800324a <HAL_SPI_Transmit>
	DelayMicro(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fe96 	bl	800125c <DelayMicro>
	CS_OFF;
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <NRF24_FlushTX+0x3c>)
 8001536:	f001 f91d 	bl	8002774 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40020000 	.word	0x40020000
 8001548:	200000dc 	.word	0x200000dc

0800154c <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fef6 	bl	8001348 <NRF24_ReadReg>
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	f043 0303 	orr.w	r3, r3, #3
 8001566:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4619      	mov	r1, r3
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ff1f 	bl	80013b0 <NRF24_WriteReg>
	CE_SET;
 8001572:	2201      	movs	r2, #1
 8001574:	2108      	movs	r1, #8
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <NRF24L01_RX_Mode+0x48>)
 8001578:	f001 f8fc 	bl	8002774 <HAL_GPIO_WritePin>

	DelayMicro(150);
 800157c:	2096      	movs	r0, #150	; 0x96
 800157e:	f7ff fe6d 	bl	800125c <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 8001582:	f7ff ff9f 	bl	80014c4 <NRF24_FlushRX>
	NRF24_FlushTX();
 8001586:	f7ff ffbf 	bl	8001508 <NRF24_FlushTX>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020000 	.word	0x40020000

08001598 <NRF24L01_TX_Mode>:
	//HAL_GPIO_TogglePin(GPIOC, LED_Pin);
	DelayMicro(1000);
}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80015a0:	2203      	movs	r2, #3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <NRF24L01_TX_Mode+0x2c>)
 80015a4:	2010      	movs	r0, #16
 80015a6:	f7ff ff5b 	bl	8001460 <NRF24_Write_Buf>
	CE_RESET;
 80015aa:	2200      	movs	r2, #0
 80015ac:	2108      	movs	r1, #8
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <NRF24L01_TX_Mode+0x30>)
 80015b0:	f001 f8e0 	bl	8002774 <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 80015b4:	f7ff ff86 	bl	80014c4 <NRF24_FlushRX>
	NRF24_FlushTX();
 80015b8:	f7ff ffa6 	bl	8001508 <NRF24_FlushTX>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000004 	.word	0x20000004
 80015c8:	40020000 	.word	0x40020000

080015cc <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 80015dc:	2200      	movs	r2, #0
 80015de:	2108      	movs	r1, #8
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <NRF24_Transmit+0x64>)
 80015e2:	f001 f8c7 	bl	8002774 <HAL_GPIO_WritePin>
	CS_ON;
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <NRF24_Transmit+0x64>)
 80015ec:	f001 f8c2 	bl	8002774 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 80015f0:	1df9      	adds	r1, r7, #7
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	2201      	movs	r2, #1
 80015f8:	480e      	ldr	r0, [pc, #56]	; (8001634 <NRF24_Transmit+0x68>)
 80015fa:	f001 fe26 	bl	800324a <HAL_SPI_Transmit>
	DelayMicro(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fe2c 	bl	800125c <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	b29a      	uxth	r2, r3
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	6839      	ldr	r1, [r7, #0]
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <NRF24_Transmit+0x68>)
 8001610:	f001 fe1b 	bl	800324a <HAL_SPI_Transmit>

	CS_OFF;
 8001614:	2201      	movs	r2, #1
 8001616:	2110      	movs	r1, #16
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <NRF24_Transmit+0x64>)
 800161a:	f001 f8ab 	bl	8002774 <HAL_GPIO_WritePin>
	CE_SET;
 800161e:	2201      	movs	r2, #1
 8001620:	2108      	movs	r1, #8
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <NRF24_Transmit+0x64>)
 8001624:	f001 f8a6 	bl	8002774 <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40020000 	.word	0x40020000
 8001634:	200000dc 	.word	0x200000dc

08001638 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	2300      	movs	r3, #0
 8001646:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode(pBuf);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffa5 	bl	8001598 <NRF24L01_TX_Mode>

	regval = NRF24_ReadReg(CONFIG);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fe7a 	bl	8001348 <NRF24_ReadReg>
 8001654:	4603      	mov	r3, r0
 8001656:	73bb      	strb	r3, [r7, #14]
	regval |= (1<<PWR_UP);
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);							// Turn on TX mode
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	73bb      	strb	r3, [r7, #14]

	NRF24_WriteReg(CONFIG,regval);
 8001668:	7bbb      	ldrb	r3, [r7, #14]
 800166a:	4619      	mov	r1, r3
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fe9f 	bl	80013b0 <NRF24_WriteReg>
	DelayMicro(150);
 8001672:	2096      	movs	r0, #150	; 0x96
 8001674:	f7ff fdf2 	bl	800125c <DelayMicro>

//	uint8_t dt_reg = NRF24_ReadReg(CONFIG);				// For debug

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 8001678:	220a      	movs	r2, #10
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	20a0      	movs	r0, #160	; 0xa0
 800167e:	f7ff ffa5 	bl	80015cc <NRF24_Transmit>
	CE_SET;
 8001682:	2201      	movs	r2, #1
 8001684:	2108      	movs	r1, #8
 8001686:	481f      	ldr	r0, [pc, #124]	; (8001704 <NRF24L01_Send+0xcc>)
 8001688:	f001 f874 	bl	8002774 <HAL_GPIO_WritePin>
	DelayMicro(15); 			// minimum 10us high pulse (Page 21)
 800168c:	200f      	movs	r0, #15
 800168e:	f7ff fde5 	bl	800125c <DelayMicro>
	CE_RESET;
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	481b      	ldr	r0, [pc, #108]	; (8001704 <NRF24L01_Send+0xcc>)
 8001698:	f001 f86c 	bl	8002774 <HAL_GPIO_WritePin>

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 800169c:	bf00      	nop
 800169e:	2104      	movs	r1, #4
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <NRF24L01_Send+0xcc>)
 80016a2:	f001 f84f 	bl	8002744 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d0f8      	beq.n	800169e <NRF24L01_Send+0x66>

	//HAL_GPIO_TogglePin(GPIOA, TEST_OUT_Pin);    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< for debug latency

	status = NRF24_ReadReg(STATUS);
 80016ac:	2007      	movs	r0, #7
 80016ae:	f7ff fe4b 	bl	8001348 <NRF24_ReadReg>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]

	if(status&TX_DS) 			//tx_ds == 0x20   If data was transmitted
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <NRF24L01_Send+0x9c>
	{
	    LED_TGL;
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4810      	ldr	r0, [pc, #64]	; (8001708 <NRF24L01_Send+0xd0>)
 80016c6:	f001 f86e 	bl	80027a6 <HAL_GPIO_TogglePin>
	    NRF24_WriteReg(STATUS, 0x20);
 80016ca:	2120      	movs	r1, #32
 80016cc:	2007      	movs	r0, #7
 80016ce:	f7ff fe6f 	bl	80013b0 <NRF24_WriteReg>
 80016d2:	e00a      	b.n	80016ea <NRF24L01_Send+0xb2>
	}
	else if(status&MAX_RT)
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <NRF24L01_Send+0xb2>
	{
		NRF24_WriteReg(STATUS, 0x10);
 80016de:	2110      	movs	r1, #16
 80016e0:	2007      	movs	r0, #7
 80016e2:	f7ff fe65 	bl	80013b0 <NRF24_WriteReg>
		NRF24_FlushTX();
 80016e6:	f7ff ff0f 	bl	8001508 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 80016ea:	2008      	movs	r0, #8
 80016ec:	f7ff fe2c 	bl	8001348 <NRF24_ReadReg>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73bb      	strb	r3, [r7, #14]

	NRF24L01_RX_Mode();
 80016f4:	f7ff ff2a 	bl	800154c <NRF24L01_RX_Mode>

	return regval;
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020000 	.word	0x40020000
 8001708:	40020800 	.word	0x40020800

0800170c <NRF24L01_Transmit_Real_Data>:

	  }
}
// -------------------------------------------------------------------------------------
void NRF24L01_Transmit_Real_Data(uint8_t* data)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
//	}
//	memcpy(buf1+2,(uint8_t*)&retr_cnt_full,2);



	NRF24L01_Send(data);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff8f 	bl	8001638 <NRF24L01_Send>
//	if(i>=999)
//	{
//		i=1;
//	}

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff fd73 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f006 f91b 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7fe ff35 	bl	80005c4 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001768:	08007d30 	.word	0x08007d30
  ldr r2, =_sbss
 800176c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001770:	20004c84 	.word	0x20004c84

08001774 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <DMA1_Stream0_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_Init+0x40>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x40>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x40>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 fe16 	bl	80023d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f7ff fca2 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fac6 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	20000268 	.word	0x20000268

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000268 	.word	0x20000268

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000000c 	.word	0x2000000c

08001844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e033      	b.n	80018c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fa96 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800188a:	f023 0302 	bic.w	r3, r3, #2
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fbe8 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
 80018b2:	e001      	b.n	80018b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Start+0x1a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e097      	b.n	8001a16 <HAL_ADC_Start+0x14a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d018      	beq.n	800192e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_ADC_Start+0x158>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_ADC_Start+0x15c>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9a      	lsrs	r2, r3, #18
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001920:	e002      	b.n	8001928 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3b01      	subs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f9      	bne.n	8001922 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d15f      	bne.n	80019fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197a:	d106      	bne.n	800198a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f023 0206 	bic.w	r2, r3, #6
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
 8001988:	e002      	b.n	8001990 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_ADC_Start+0x160>)
 800199a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d129      	bne.n	8001a14 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e020      	b.n	8001a14 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <HAL_ADC_Start+0x164>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d11b      	bne.n	8001a14 <HAL_ADC_Start+0x148>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d114      	bne.n	8001a14 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e00b      	b.n	8001a14 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f043 0210 	orr.w	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	40012000 	.word	0x40012000

08001a34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Stop+0x16>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e021      	b.n	8001a8e <HAL_ADC_Stop+0x5a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d113      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e063      	b.n	8001ba8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ae0:	f7ff fe80 	bl	80017e4 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae6:	e021      	b.n	8001b2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aee:	d01d      	beq.n	8001b2c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x6c>
 8001af6:	f7ff fe75 	bl	80017e4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d212      	bcs.n	8001b2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d00b      	beq.n	8001b2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03d      	b.n	8001ba8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d1d6      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f06f 0212 	mvn.w	r2, #18
 8001b42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d123      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d111      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d049      	beq.n	8001c7a <HAL_ADC_IRQHandler+0xca>
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d046      	beq.n	8001c7a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12b      	bne.n	8001c6a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d127      	bne.n	8001c6a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d119      	bne.n	8001c6a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0220 	bic.w	r2, r2, #32
 8001c44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8bd 	bl	8001dea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0212 	mvn.w	r2, #18
 8001c78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d057      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x190>
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d054      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d139      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d12b      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d124      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11d      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d119      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa97 	bl	8002264 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 020c 	mvn.w	r2, #12
 8001d3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d017      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x1d6>
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10d      	bne.n	8001d86 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f841 	bl	8001dfe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0201 	mvn.w	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d94:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x218>
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0202 	orr.w	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0220 	mvn.w	r2, #32
 8001db6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f82a 	bl	8001e12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0220 	mvn.w	r2, #32
 8001dc6:	601a      	str	r2, [r3, #0]
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e105      	b.n	8002050 <HAL_ADC_ConfigChannel+0x228>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b09      	cmp	r3, #9
 8001e52:	d925      	bls.n	8001ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	3b1e      	subs	r3, #30
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4403      	add	r3, r0
 8001e92:	3b1e      	subs	r3, #30
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e022      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4403      	add	r3, r0
 8001edc:	409a      	lsls	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d824      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b05      	subs	r3, #5
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b05      	subs	r3, #5
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	e04c      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d824      	bhi.n	8001f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b23      	subs	r3, #35	; 0x23
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b23      	subs	r3, #35	; 0x23
 8001f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	e023      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b41      	subs	r3, #65	; 0x41
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b41      	subs	r3, #65	; 0x41
 8001fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_ADC_ConfigChannel+0x234>)
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_ADC_ConfigChannel+0x238>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1cc>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d105      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_ADC_ConfigChannel+0x238>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d123      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d003      	beq.n	800200e <HAL_ADC_ConfigChannel+0x1e6>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b11      	cmp	r3, #17
 800200c:	d11b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d111      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_ADC_ConfigChannel+0x23c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_ADC_ConfigChannel+0x240>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	0c9a      	lsrs	r2, r3, #18
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002038:	e002      	b.n	8002040 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3b01      	subs	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f9      	bne.n	800203a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40012300 	.word	0x40012300
 8002060:	40012000 	.word	0x40012000
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <ADC_Init+0x1f0>)
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <ADC_Init+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e00f      	b.n	800216a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0202 	bic.w	r2, r2, #2
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
 8002184:	005a      	lsls	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	035a      	lsls	r2, r3, #13
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051a      	lsls	r2, r3, #20
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002222:	025a      	lsls	r2, r3, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	0f000001 	.word	0x0f000001

08002264 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff4c 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fa:	f7ff ff61 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 80023fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	6978      	ldr	r0, [r7, #20]
 8002406:	f7ff ffb1 	bl	800236c <NVIC_EncodePriority>
 800240a:	4602      	mov	r2, r0
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff80 	bl	8002318 <__NVIC_SetPriority>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff54 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e159      	b.n	800270c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 8148 	bne.w	8002706 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a2 	beq.w	8002706 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_GPIO_Init+0x2e8>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x2f0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x202>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x2f4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x1fe>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a47      	ldr	r2, [pc, #284]	; (8002734 <HAL_GPIO_Init+0x2f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x1fa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_GPIO_Init+0x2fc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x1f6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_GPIO_Init+0x300>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x1f2>
 800262a:	2304      	movs	r3, #4
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800262e:	2307      	movs	r3, #7
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x204>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x204>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_GPIO_Init+0x2ec>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a2f      	ldr	r2, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x304>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x304>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f aea2 	bls.w	8002458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b8:	887a      	ldrh	r2, [r7, #2]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	041a      	lsls	r2, r3, #16
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	400b      	ands	r3, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f806 	bl	800280c <HAL_GPIO_EXTI_Callback>
  }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e267      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d075      	beq.n	800292e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d00c      	beq.n	8002868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002856:	2b08      	cmp	r3, #8
 8002858:	d112      	bne.n	8002880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285a:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002866:	d10b      	bne.n	8002880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05b      	beq.n	800292c <HAL_RCC_OscConfig+0x108>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d157      	bne.n	800292c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e242      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d106      	bne.n	8002898 <HAL_RCC_OscConfig+0x74>
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a75      	ldr	r2, [pc, #468]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xb0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x98>
 80028a2:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6f      	ldr	r2, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6c      	ldr	r2, [pc, #432]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xb0>
 80028bc:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a68      	ldr	r2, [pc, #416]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff82 	bl	80017e4 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff7e 	bl	80017e4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e207      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xc0>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe ff6e 	bl	80017e4 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe ff6a 	bl	80017e4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1f3      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b51      	ldr	r3, [pc, #324]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0xe8>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293a:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x152>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1c7      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x244>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe ff23 	bl	80017e4 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe ff1f 	bl	80017e4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1a8      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4925      	ldr	r1, [pc, #148]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCC_OscConfig+0x244>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe ff02 	bl	80017e4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fefe 	bl	80017e4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e187      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d036      	beq.n	8002a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_RCC_OscConfig+0x248>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fee2 	bl	80017e4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe fede 	bl	80017e4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e167      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x240>)
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x200>
 8002a42:	e01b      	b.n	8002a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x248>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fecb 	bl	80017e4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	e00e      	b.n	8002a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fe fec7 	bl	80017e4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d907      	bls.n	8002a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e150      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	42470000 	.word	0x42470000
 8002a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b88      	ldr	r3, [pc, #544]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ea      	bne.n	8002a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8097 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a7c      	ldr	r2, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b77      	ldr	r3, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a73      	ldr	r2, [pc, #460]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fe87 	bl	80017e4 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe fe83 	bl	80017e4 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e10c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x474>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2ea>
 8002b00:	4b64      	ldr	r3, [pc, #400]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a63      	ldr	r2, [pc, #396]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x324>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x30c>
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	4a5b      	ldr	r2, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x324>
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b55      	ldr	r3, [pc, #340]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe48 	bl	80017e4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fe44 	bl	80017e4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0cb      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RCC_OscConfig+0x334>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fe32 	bl	80017e4 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fe2e 	bl	80017e4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0b5      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	4b3e      	ldr	r3, [pc, #248]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a1 	beq.w	8002d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d05c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d141      	bne.n	8002c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fe02 	bl	80017e4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fdfe 	bl	80017e4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e087      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	491b      	ldr	r1, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fdd7 	bl	80017e4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe fdd3 	bl	80017e4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e05c      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x416>
 8002c58:	e054      	b.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fdc0 	bl	80017e4 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fdbc 	bl	80017e4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e045      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x444>
 8002c86:	e03d      	b.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e038      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x4ec>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d028      	beq.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d11a      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0cc      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d28:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90c      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d044      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d119      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e067      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4934      	ldr	r1, [pc, #208]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fcee 	bl	80017e4 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0c:	f7fe fcea 	bl	80017e4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 020c 	and.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e34:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d20c      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe f918 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023c00 	.word	0x40023c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08007ca8 	.word	0x08007ca8
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000008 	.word	0x20000008

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b090      	sub	sp, #64	; 0x40
 8002ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
 8002eec:	2300      	movs	r3, #0
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d00d      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	f200 80a1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f12:	e09b      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b53      	ldr	r3, [pc, #332]	; (8003064 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f18:	e09b      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f1e:	e098      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b4f      	ldr	r3, [pc, #316]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2a:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	627a      	str	r2, [r7, #36]	; 0x24
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f4c:	fb03 f201 	mul.w	r2, r3, r1
 8002f50:	2300      	movs	r3, #0
 8002f52:	fb00 f303 	mul.w	r3, r0, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	4a43      	ldr	r2, [pc, #268]	; (8003068 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f60:	460a      	mov	r2, r1
 8002f62:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f66:	4413      	add	r3, r2
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	61fa      	str	r2, [r7, #28]
 8002f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f7a:	f7fd f931 	bl	80001e0 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4613      	mov	r3, r2
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f86:	e053      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	2200      	movs	r2, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	617a      	str	r2, [r7, #20]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f9a:	f04f 0b00 	mov.w	fp, #0
 8002f9e:	4652      	mov	r2, sl
 8002fa0:	465b      	mov	r3, fp
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	0159      	lsls	r1, r3, #5
 8002fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb0:	0150      	lsls	r0, r2, #5
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002fba:	eb63 090b 	sbc.w	r9, r3, fp
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002fd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	00eb      	lsls	r3, r5, #3
 8002fe4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe8:	00e2      	lsls	r2, r4, #3
 8002fea:	4614      	mov	r4, r2
 8002fec:	461d      	mov	r5, r3
 8002fee:	eb14 030a 	adds.w	r3, r4, sl
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	eb45 030b 	adc.w	r3, r5, fp
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003006:	4629      	mov	r1, r5
 8003008:	028b      	lsls	r3, r1, #10
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003010:	4621      	mov	r1, r4
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	2200      	movs	r2, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003024:	f7fd f8dc 	bl	80001e0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetSysClockFreq+0x184>)
 800304e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003054:	4618      	mov	r0, r3
 8003056:	3740      	adds	r7, #64	; 0x40
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	00f42400 	.word	0x00f42400
 8003068:	017d7840 	.word	0x017d7840

0800306c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCC_GetHCLKFreq+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000000 	.word	0x20000000

08003084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003088:	f7ff fff0 	bl	800306c <HAL_RCC_GetHCLKFreq>
 800308c:	4602      	mov	r2, r0
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	4903      	ldr	r1, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08007cb8 	.word	0x08007cb8

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b0:	f7ff ffdc 	bl	800306c <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0b5b      	lsrs	r3, r3, #13
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08007cb8 	.word	0x08007cb8

080030d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	220f      	movs	r2, #15
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0203 	and.w	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_GetClockConfig+0x5c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <HAL_RCC_GetClockConfig+0x60>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	601a      	str	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40023c00 	.word	0x40023c00

08003138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07b      	b.n	8003242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d009      	beq.n	8003170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	e005      	b.n	8003170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fe6a 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	ea42 0103 	orr.w	r1, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0104 	and.w	r1, r3, #4
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0210 	and.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b088      	sub	sp, #32
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_SPI_Transmit+0x22>
 8003268:	2302      	movs	r3, #2
 800326a:	e126      	b.n	80034ba <HAL_SPI_Transmit+0x270>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003274:	f7fe fab6 	bl	80017e4 <HAL_GetTick>
 8003278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800328e:	e10b      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0x52>
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a0:	e102      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e8:	d10f      	bne.n	800330a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d007      	beq.n	8003328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003330:	d14b      	bne.n	80033ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_SPI_Transmit+0xf6>
 800333a:	8afb      	ldrh	r3, [r7, #22]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d13e      	bne.n	80033be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	881a      	ldrh	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003364:	e02b      	b.n	80033be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d112      	bne.n	800339a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	86da      	strh	r2, [r3, #54]	; 0x36
 8003398:	e011      	b.n	80033be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800339a:	f7fe fa23 	bl	80017e4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d803      	bhi.n	80033b2 <HAL_SPI_Transmit+0x168>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Transmit+0x16e>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033bc:	e074      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ce      	bne.n	8003366 <HAL_SPI_Transmit+0x11c>
 80033c8:	e04c      	b.n	8003464 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Transmit+0x18e>
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d140      	bne.n	800345a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033fe:	e02c      	b.n	800345a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d113      	bne.n	8003436 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	; 0x36
 8003434:	e011      	b.n	800345a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003436:	f7fe f9d5 	bl	80017e4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_Transmit+0x204>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800344c:	d102      	bne.n	8003454 <HAL_SPI_Transmit+0x20a>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003458:	e026      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1cd      	bne.n	8003400 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fa55 	bl	8003918 <SPI_EndRxTxTransaction>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e000      	b.n	80034a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b08c      	sub	sp, #48	; 0x30
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x26>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e18a      	b.n	80037fe <HAL_SPI_TransmitReceive+0x33c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f0:	f7fe f978 	bl	80017e4 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800350a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350e:	2b01      	cmp	r3, #1
 8003510:	d00f      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x70>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003518:	d107      	bne.n	800352a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d103      	bne.n	800352a <HAL_SPI_TransmitReceive+0x68>
 8003522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003530:	e15b      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x82>
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800354a:	e14e      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b04      	cmp	r3, #4
 8003556:	d003      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2205      	movs	r2, #5
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	887a      	ldrh	r2, [r7, #2]
 8003576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d007      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035bc:	d178      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_TransmitReceive+0x10a>
 80035c6:	8b7b      	ldrh	r3, [r7, #26]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d166      	bne.n	800369a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	1c9a      	adds	r2, r3, #2
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f0:	e053      	b.n	800369a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11b      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x176>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x176>
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d113      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	1c9a      	adds	r2, r3, #2
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d119      	bne.n	800367a <HAL_SPI_TransmitReceive+0x1b8>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d014      	beq.n	800367a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	b292      	uxth	r2, r2
 800365c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800367a:	f7fe f8b3 	bl	80017e4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003686:	429a      	cmp	r2, r3
 8003688:	d807      	bhi.n	800369a <HAL_SPI_TransmitReceive+0x1d8>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003690:	d003      	beq.n	800369a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003698:	e0a7      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1a6      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x130>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1a1      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x130>
 80036ae:	e07c      	b.n	80037aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_TransmitReceive+0x1fc>
 80036b8:	8b7b      	ldrh	r3, [r7, #26]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d16b      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e4:	e057      	b.n	8003796 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d11c      	bne.n	800372e <HAL_SPI_TransmitReceive+0x26c>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <HAL_SPI_TransmitReceive+0x26c>
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d114      	bne.n	800372e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	7812      	ldrb	r2, [r2, #0]
 8003710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d119      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x2ae>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d014      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800376c:	2301      	movs	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003770:	f7fe f838 	bl	80017e4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800377c:	429a      	cmp	r2, r3
 800377e:	d803      	bhi.n	8003788 <HAL_SPI_TransmitReceive+0x2c6>
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003786:	d102      	bne.n	800378e <HAL_SPI_TransmitReceive+0x2cc>
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003794:	e029      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1a2      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x224>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d19d      	bne.n	80036e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8b2 	bl	8003918 <SPI_EndRxTxTransaction>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037c6:	e010      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e000      	b.n	80037ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3730      	adds	r7, #48	; 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fd ffe4 	bl	80017e4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fd ffdc 	bl	80017e4 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fd ffcc 	bl	80017e4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <SPI_EndRxTxTransaction+0x7c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <SPI_EndRxTxTransaction+0x80>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0d5b      	lsrs	r3, r3, #21
 8003930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003942:	d112      	bne.n	800396a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2200      	movs	r2, #0
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff ff5a 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00f      	b.n	800398a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3b01      	subs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d0f2      	beq.n	800396a <SPI_EndRxTxTransaction+0x52>
 8003984:	e000      	b.n	8003988 <SPI_EndRxTxTransaction+0x70>
        break;
 8003986:	bf00      	nop
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000000 	.word	0x20000000
 8003998:	165e9f81 	.word	0x165e9f81

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f839 	bl	8003a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fadc 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d001      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e044      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x6c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x6c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x6c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_TIM_Base_Start_IT+0xb8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x6c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_TIM_Base_Start_IT+0xbc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x6c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000

08003b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e041      	b.n	8003baa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd f9da 	bl	8000ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fa20 	bl	8003f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d122      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d11b      	bne.n	8003c0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0202 	mvn.w	r2, #2
 8003bde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9b1 	bl	8003f5c <HAL_TIM_IC_CaptureCallback>
 8003bfa:	e005      	b.n	8003c08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f9a3 	bl	8003f48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9b4 	bl	8003f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d122      	bne.n	8003c62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d11b      	bne.n	8003c62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f06f 0204 	mvn.w	r2, #4
 8003c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f987 	bl	8003f5c <HAL_TIM_IC_CaptureCallback>
 8003c4e:	e005      	b.n	8003c5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f979 	bl	8003f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f98a 	bl	8003f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d122      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d11b      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0208 	mvn.w	r2, #8
 8003c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f95d 	bl	8003f5c <HAL_TIM_IC_CaptureCallback>
 8003ca2:	e005      	b.n	8003cb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f94f 	bl	8003f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f960 	bl	8003f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d122      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d11b      	bne.n	8003d0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0210 	mvn.w	r2, #16
 8003cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2208      	movs	r2, #8
 8003ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f933 	bl	8003f5c <HAL_TIM_IC_CaptureCallback>
 8003cf6:	e005      	b.n	8003d04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f925 	bl	8003f48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f936 	bl	8003f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10e      	bne.n	8003d36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0201 	mvn.w	r2, #1
 8003d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fc ffeb 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d10e      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b80      	cmp	r3, #128	; 0x80
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fb9f 	bl	80044a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d10e      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8fb 	bl	8003f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d10e      	bne.n	8003dba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0220 	mvn.w	r2, #32
 8003db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb69 	bl	800448c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0ae      	b.n	8003f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	f200 809f 	bhi.w	8003f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003f31 	.word	0x08003f31
 8003e00:	08003f31 	.word	0x08003f31
 8003e04:	08003f31 	.word	0x08003f31
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003f31 	.word	0x08003f31
 8003e10:	08003f31 	.word	0x08003f31
 8003e14:	08003f31 	.word	0x08003f31
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003f31 	.word	0x08003f31
 8003e20:	08003f31 	.word	0x08003f31
 8003e24:	08003f31 	.word	0x08003f31
 8003e28:	08003eef 	.word	0x08003eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f930 	bl	8004098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	619a      	str	r2, [r3, #24]
      break;
 8003e6a:	e064      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f976 	bl	8004164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      break;
 8003eac:	e043      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f9c1 	bl	800423c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
      break;
 8003eec:	e023      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fa0b 	bl	8004310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a34      	ldr	r2, [pc, #208]	; (800407c <TIM_Base_SetConfig+0xe4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00f      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a31      	ldr	r2, [pc, #196]	; (8004080 <TIM_Base_SetConfig+0xe8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a30      	ldr	r2, [pc, #192]	; (8004084 <TIM_Base_SetConfig+0xec>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <TIM_Base_SetConfig+0xf0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <TIM_Base_SetConfig+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01b      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d017      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <TIM_Base_SetConfig+0xe8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a21      	ldr	r2, [pc, #132]	; (8004084 <TIM_Base_SetConfig+0xec>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00f      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a20      	ldr	r2, [pc, #128]	; (8004088 <TIM_Base_SetConfig+0xf0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1f      	ldr	r2, [pc, #124]	; (800408c <TIM_Base_SetConfig+0xf4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <TIM_Base_SetConfig+0xf8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <TIM_Base_SetConfig+0xfc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <TIM_Base_SetConfig+0xe4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d103      	bne.n	8004068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	615a      	str	r2, [r3, #20]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0201 	bic.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 0302 	bic.w	r3, r3, #2
 80040e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <TIM_OC1_SetConfig+0xc8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10c      	bne.n	800410e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0308 	bic.w	r3, r3, #8
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <TIM_OC1_SetConfig+0xc8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d111      	bne.n	800413a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40010000 	.word	0x40010000

08004164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0210 	bic.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0320 	bic.w	r3, r3, #32
 80041ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <TIM_OC2_SetConfig+0xd4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10d      	bne.n	80041e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <TIM_OC2_SetConfig+0xd4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d113      	bne.n	8004210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000

0800423c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10d      	bne.n	80042b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <TIM_OC3_SetConfig+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d113      	bne.n	80042e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	621a      	str	r2, [r3, #32]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40010000 	.word	0x40010000

08004310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	031b      	lsls	r3, r3, #12
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <TIM_OC4_SetConfig+0x9c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000

080043b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e050      	b.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d013      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40014000 	.word	0x40014000

0800448c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e03f      	b.n	8004546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fdc0 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f829 	bl	8004550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800452c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004554:	b0c0      	sub	sp, #256	; 0x100
 8004556:	af00      	add	r7, sp, #0
 8004558:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	ea40 0301 	orr.w	r3, r0, r1
 8004578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	431a      	orrs	r2, r3
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	431a      	orrs	r2, r3
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045a8:	f021 010c 	bic.w	r1, r1, #12
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045b6:	430b      	orrs	r3, r1
 80045b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	6999      	ldr	r1, [r3, #24]
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	ea40 0301 	orr.w	r3, r0, r1
 80045d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8f      	ldr	r3, [pc, #572]	; (800481c <UART_SetConfig+0x2cc>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d005      	beq.n	80045f0 <UART_SetConfig+0xa0>
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b8d      	ldr	r3, [pc, #564]	; (8004820 <UART_SetConfig+0x2d0>)
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d104      	bne.n	80045fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe fd5c 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 80045f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045f8:	e003      	b.n	8004602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045fa:	f7fe fd43 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
 80045fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	f040 810c 	bne.w	8004828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800461a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800461e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	1891      	adds	r1, r2, r2
 8004628:	65b9      	str	r1, [r7, #88]	; 0x58
 800462a:	415b      	adcs	r3, r3
 800462c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004632:	4621      	mov	r1, r4
 8004634:	eb12 0801 	adds.w	r8, r2, r1
 8004638:	4629      	mov	r1, r5
 800463a:	eb43 0901 	adc.w	r9, r3, r1
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004652:	4690      	mov	r8, r2
 8004654:	4699      	mov	r9, r3
 8004656:	4623      	mov	r3, r4
 8004658:	eb18 0303 	adds.w	r3, r8, r3
 800465c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004660:	462b      	mov	r3, r5
 8004662:	eb49 0303 	adc.w	r3, r9, r3
 8004666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004676:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800467a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800467e:	460b      	mov	r3, r1
 8004680:	18db      	adds	r3, r3, r3
 8004682:	653b      	str	r3, [r7, #80]	; 0x50
 8004684:	4613      	mov	r3, r2
 8004686:	eb42 0303 	adc.w	r3, r2, r3
 800468a:	657b      	str	r3, [r7, #84]	; 0x54
 800468c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004694:	f7fb fda4 	bl	80001e0 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <UART_SetConfig+0x2d4>)
 800469e:	fba3 2302 	umull	r2, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	011c      	lsls	r4, r3, #4
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	64b9      	str	r1, [r7, #72]	; 0x48
 80046c0:	415b      	adcs	r3, r3
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046c8:	4641      	mov	r1, r8
 80046ca:	eb12 0a01 	adds.w	sl, r2, r1
 80046ce:	4649      	mov	r1, r9
 80046d0:	eb43 0b01 	adc.w	fp, r3, r1
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e8:	4692      	mov	sl, r2
 80046ea:	469b      	mov	fp, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	eb1a 0303 	adds.w	r3, sl, r3
 80046f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f6:	464b      	mov	r3, r9
 80046f8:	eb4b 0303 	adc.w	r3, fp, r3
 80046fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800470c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	647b      	str	r3, [r7, #68]	; 0x44
 8004722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800472a:	f7fb fd59 	bl	80001e0 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4611      	mov	r1, r2
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <UART_SetConfig+0x2d4>)
 8004736:	fba3 2301 	umull	r2, r3, r3, r1
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2264      	movs	r2, #100	; 0x64
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	1acb      	subs	r3, r1, r3
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <UART_SetConfig+0x2d4>)
 800474c:	fba3 2302 	umull	r2, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004758:	441c      	add	r4, r3
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004764:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	63b9      	str	r1, [r7, #56]	; 0x38
 8004774:	415b      	adcs	r3, r3
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6339      	str	r1, [r7, #48]	; 0x30
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b0:	464b      	mov	r3, r9
 80047b2:	460a      	mov	r2, r1
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047d0:	460b      	mov	r3, r1
 80047d2:	18db      	adds	r3, r3, r3
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d6:	4613      	mov	r3, r2
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047e6:	f7fb fcfb 	bl	80001e0 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <UART_SetConfig+0x2d4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <UART_SetConfig+0x2d4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4422      	add	r2, r4
 8004816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004818:	e105      	b.n	8004a26 <UART_SetConfig+0x4d6>
 800481a:	bf00      	nop
 800481c:	40011000 	.word	0x40011000
 8004820:	40011400 	.word	0x40011400
 8004824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004832:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800483a:	4642      	mov	r2, r8
 800483c:	464b      	mov	r3, r9
 800483e:	1891      	adds	r1, r2, r2
 8004840:	6239      	str	r1, [r7, #32]
 8004842:	415b      	adcs	r3, r3
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800484a:	4641      	mov	r1, r8
 800484c:	1854      	adds	r4, r2, r1
 800484e:	4649      	mov	r1, r9
 8004850:	eb43 0501 	adc.w	r5, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	00eb      	lsls	r3, r5, #3
 800485e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004862:	00e2      	lsls	r2, r4, #3
 8004864:	4614      	mov	r4, r2
 8004866:	461d      	mov	r5, r3
 8004868:	4643      	mov	r3, r8
 800486a:	18e3      	adds	r3, r4, r3
 800486c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004870:	464b      	mov	r3, r9
 8004872:	eb45 0303 	adc.w	r3, r5, r3
 8004876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004896:	4629      	mov	r1, r5
 8004898:	008b      	lsls	r3, r1, #2
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a0:	4621      	mov	r1, r4
 80048a2:	008a      	lsls	r2, r1, #2
 80048a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048a8:	f7fb fc9a 	bl	80001e0 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b60      	ldr	r3, [pc, #384]	; (8004a34 <UART_SetConfig+0x4e4>)
 80048b2:	fba3 2302 	umull	r2, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	011c      	lsls	r4, r3, #4
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	61b9      	str	r1, [r7, #24]
 80048d4:	415b      	adcs	r3, r3
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048dc:	4641      	mov	r1, r8
 80048de:	1851      	adds	r1, r2, r1
 80048e0:	6139      	str	r1, [r7, #16]
 80048e2:	4649      	mov	r1, r9
 80048e4:	414b      	adcs	r3, r1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f4:	4659      	mov	r1, fp
 80048f6:	00cb      	lsls	r3, r1, #3
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fe:	4651      	mov	r1, sl
 8004900:	00ca      	lsls	r2, r1, #3
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	4603      	mov	r3, r0
 8004908:	4642      	mov	r2, r8
 800490a:	189b      	adds	r3, r3, r2
 800490c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004910:	464b      	mov	r3, r9
 8004912:	460a      	mov	r2, r1
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	67bb      	str	r3, [r7, #120]	; 0x78
 8004926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004934:	4649      	mov	r1, r9
 8004936:	008b      	lsls	r3, r1, #2
 8004938:	4641      	mov	r1, r8
 800493a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493e:	4641      	mov	r1, r8
 8004940:	008a      	lsls	r2, r1, #2
 8004942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004946:	f7fb fc4b 	bl	80001e0 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	; 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	3332      	adds	r3, #50	; 0x32
 8004962:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496e:	441c      	add	r4, r3
 8004970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004974:	2200      	movs	r2, #0
 8004976:	673b      	str	r3, [r7, #112]	; 0x70
 8004978:	677a      	str	r2, [r7, #116]	; 0x74
 800497a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	1891      	adds	r1, r2, r2
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	415b      	adcs	r3, r3
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498e:	4641      	mov	r1, r8
 8004990:	1851      	adds	r1, r2, r1
 8004992:	6039      	str	r1, [r7, #0]
 8004994:	4649      	mov	r1, r9
 8004996:	414b      	adcs	r3, r1
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a6:	4659      	mov	r1, fp
 80049a8:	00cb      	lsls	r3, r1, #3
 80049aa:	4651      	mov	r1, sl
 80049ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b0:	4651      	mov	r1, sl
 80049b2:	00ca      	lsls	r2, r1, #3
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	4603      	mov	r3, r0
 80049ba:	4642      	mov	r2, r8
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c0:	464b      	mov	r3, r9
 80049c2:	460a      	mov	r2, r1
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	663b      	str	r3, [r7, #96]	; 0x60
 80049d4:	667a      	str	r2, [r7, #100]	; 0x64
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049e2:	4649      	mov	r1, r9
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	4641      	mov	r1, r8
 80049e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ec:	4641      	mov	r1, r8
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049f4:	f7fb fbf4 	bl	80001e0 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2164      	movs	r1, #100	; 0x64
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	; 0x32
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4422      	add	r2, r4
 8004a24:	609a      	str	r2, [r3, #8]
}
 8004a26:	bf00      	nop
 8004a28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a32:	bf00      	nop
 8004a34:	51eb851f 	.word	0x51eb851f

08004a38 <__NVIC_SetPriority>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	6039      	str	r1, [r7, #0]
 8004a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	db0a      	blt.n	8004a62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	490c      	ldr	r1, [pc, #48]	; (8004a84 <__NVIC_SetPriority+0x4c>)
 8004a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a56:	0112      	lsls	r2, r2, #4
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a60:	e00a      	b.n	8004a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	4908      	ldr	r1, [pc, #32]	; (8004a88 <__NVIC_SetPriority+0x50>)
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	3b04      	subs	r3, #4
 8004a70:	0112      	lsls	r2, r2, #4
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	440b      	add	r3, r1
 8004a76:	761a      	strb	r2, [r3, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	e000e100 	.word	0xe000e100
 8004a88:	e000ed00 	.word	0xe000ed00

08004a8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <SysTick_Handler+0x1c>)
 8004a92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a94:	f001 ff16 	bl	80068c4 <xTaskGetSchedulerState>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d001      	beq.n	8004aa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a9e:	f002 fcfb 	bl	8007498 <xPortSysTickHandler>
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	e000e010 	.word	0xe000e010

08004aac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f06f 0004 	mvn.w	r0, #4
 8004ab6:	f7ff ffbf 	bl	8004a38 <__NVIC_SetPriority>
#endif
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac6:	f3ef 8305 	mrs	r3, IPSR
 8004aca:	603b      	str	r3, [r7, #0]
  return(result);
 8004acc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ad2:	f06f 0305 	mvn.w	r3, #5
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e00c      	b.n	8004af4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <osKernelInitialize+0x44>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <osKernelInitialize+0x44>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e002      	b.n	8004af4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	2000026c 	.word	0x2000026c

08004b08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0e:	f3ef 8305 	mrs	r3, IPSR
 8004b12:	603b      	str	r3, [r7, #0]
  return(result);
 8004b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b1a:	f06f 0305 	mvn.w	r3, #5
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e010      	b.n	8004b44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <osKernelStart+0x48>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d109      	bne.n	8004b3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b2a:	f7ff ffbf 	bl	8004aac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <osKernelStart+0x48>)
 8004b30:	2202      	movs	r2, #2
 8004b32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b34:	f001 fa6a 	bl	800600c <vTaskStartScheduler>
      stat = osOK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	e002      	b.n	8004b44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b44:	687b      	ldr	r3, [r7, #4]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000026c 	.word	0x2000026c

08004b54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b64:	f3ef 8305 	mrs	r3, IPSR
 8004b68:	617b      	str	r3, [r7, #20]
  return(result);
 8004b6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d17e      	bne.n	8004c6e <osThreadNew+0x11a>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d07b      	beq.n	8004c6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b7a:	2318      	movs	r3, #24
 8004b7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d045      	beq.n	8004c1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <osThreadNew+0x48>
        name = attr->name;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <osThreadNew+0x6e>
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b38      	cmp	r3, #56	; 0x38
 8004bb4:	d805      	bhi.n	8004bc2 <osThreadNew+0x6e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <osThreadNew+0x72>
        return (NULL);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e054      	b.n	8004c70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <osThreadNew+0xa8>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2bbb      	cmp	r3, #187	; 0xbb
 8004be4:	d90a      	bls.n	8004bfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <osThreadNew+0xa8>
        mem = 1;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e010      	b.n	8004c1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10c      	bne.n	8004c1e <osThreadNew+0xca>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d108      	bne.n	8004c1e <osThreadNew+0xca>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <osThreadNew+0xca>
          mem = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e001      	b.n	8004c1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d110      	bne.n	8004c46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c2c:	9202      	str	r2, [sp, #8]
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fffa 	bl	8005c34 <xTaskCreateStatic>
 8004c40:	4603      	mov	r3, r0
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e013      	b.n	8004c6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d110      	bne.n	8004c6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f001 f845 	bl	8005cee <xTaskCreate>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <osThreadNew+0x11a>
            hTask = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c6e:	693b      	ldr	r3, [r7, #16]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c80:	f3ef 8305 	mrs	r3, IPSR
 8004c84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <osDelay+0x1c>
    stat = osErrorISR;
 8004c8c:	f06f 0305 	mvn.w	r3, #5
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e007      	b.n	8004ca4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f001 f980 	bl	8005fa4 <vTaskDelay>
    }
  }

  return (stat);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	; 0x28
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	613b      	str	r3, [r7, #16]
  return(result);
 8004cc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d175      	bne.n	8004db6 <osSemaphoreNew+0x108>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d072      	beq.n	8004db6 <osSemaphoreNew+0x108>
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d86e      	bhi.n	8004db6 <osSemaphoreNew+0x108>
    mem = -1;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d006      	beq.n	8004cfa <osSemaphoreNew+0x4c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b4f      	cmp	r3, #79	; 0x4f
 8004cf2:	d902      	bls.n	8004cfa <osSemaphoreNew+0x4c>
        mem = 1;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e00c      	b.n	8004d14 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <osSemaphoreNew+0x66>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <osSemaphoreNew+0x66>
          mem = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e001      	b.n	8004d14 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1a:	d04c      	beq.n	8004db6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d128      	bne.n	8004d74 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10a      	bne.n	8004d3e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	9200      	str	r2, [sp, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2100      	movs	r1, #0
 8004d34:	2001      	movs	r0, #1
 8004d36:	f000 fa07 	bl	8005148 <xQueueGenericCreateStatic>
 8004d3a:	61f8      	str	r0, [r7, #28]
 8004d3c:	e005      	b.n	8004d4a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004d3e:	2203      	movs	r2, #3
 8004d40:	2100      	movs	r1, #0
 8004d42:	2001      	movs	r0, #1
 8004d44:	f000 fa78 	bl	8005238 <xQueueGenericCreate>
 8004d48:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <osSemaphoreNew+0xe8>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01f      	beq.n	8004d96 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d56:	2300      	movs	r3, #0
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	69f8      	ldr	r0, [r7, #28]
 8004d5e:	f000 fb33 	bl	80053c8 <xQueueGenericSend>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d016      	beq.n	8004d96 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004d68:	69f8      	ldr	r0, [r7, #28]
 8004d6a:	f000 fda7 	bl	80058bc <vQueueDelete>
            hSemaphore = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e010      	b.n	8004d96 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d108      	bne.n	8004d8c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fab5 	bl	80052f2 <xQueueCreateCountingSemaphoreStatic>
 8004d88:	61f8      	str	r0, [r7, #28]
 8004d8a:	e004      	b.n	8004d96 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fae6 	bl	8005360 <xQueueCreateCountingSemaphore>
 8004d94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <osSemaphoreNew+0xfc>
          name = attr->name;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e001      	b.n	8004dae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	69f8      	ldr	r0, [r7, #28]
 8004db2:	f000 feb7 	bl	8005b24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004db6:	69fb      	ldr	r3, [r7, #28]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd0:	f3ef 8305 	mrs	r3, IPSR
 8004dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004dd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d15f      	bne.n	8004e9c <osMessageQueueNew+0xdc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d05c      	beq.n	8004e9c <osMessageQueueNew+0xdc>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d059      	beq.n	8004e9c <osMessageQueueNew+0xdc>
    mem = -1;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d029      	beq.n	8004e48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <osMessageQueueNew+0x62>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b4f      	cmp	r3, #79	; 0x4f
 8004e02:	d90e      	bls.n	8004e22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <osMessageQueueNew+0x62>
        mem = 1;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e014      	b.n	8004e4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <osMessageQueueNew+0x8c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <osMessageQueueNew+0x8c>
          mem = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e001      	b.n	8004e4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10b      	bne.n	8004e6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	9100      	str	r1, [sp, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f971 	bl	8005148 <xQueueGenericCreateStatic>
 8004e66:	61f8      	str	r0, [r7, #28]
 8004e68:	e008      	b.n	8004e7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004e70:	2200      	movs	r2, #0
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9df 	bl	8005238 <xQueueGenericCreate>
 8004e7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e001      	b.n	8004e94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004e94:	6979      	ldr	r1, [r7, #20]
 8004e96:	69f8      	ldr	r0, [r7, #28]
 8004e98:	f000 fe44 	bl	8005b24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4a06      	ldr	r2, [pc, #24]	; (8004ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8004ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000270 	.word	0x20000270
 8004ed8:	2000032c 	.word	0x2000032c

08004edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8004eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a06      	ldr	r2, [pc, #24]	; (8004f0c <vApplicationGetTimerTaskMemory+0x30>)
 8004ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004efa:	601a      	str	r2, [r3, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	2000052c 	.word	0x2000052c
 8004f0c:	200005e8 	.word	0x200005e8

08004f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0208 	add.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f103 0208 	add.w	r2, r3, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0208 	add.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc8:	d103      	bne.n	8004fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e00c      	b.n	8004fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <vListInsert+0x2e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d2f6      	bcs.n	8004fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6852      	ldr	r2, [r2, #4]
 8005044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d103      	bne.n	8005058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050a2:	f002 f967 	bl	8007374 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	441a      	add	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	3b01      	subs	r3, #1
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	22ff      	movs	r2, #255	; 0xff
 80050e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d114      	bne.n	8005122 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01a      	beq.n	8005136 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3310      	adds	r3, #16
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fa1b 	bl	8006540 <xTaskRemoveFromEventList>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d012      	beq.n	8005136 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <xQueueGenericReset+0xcc>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	e009      	b.n	8005136 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3310      	adds	r3, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fef2 	bl	8004f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff feed 	bl	8004f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f002 f94d 	bl	80073d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800513a:	2301      	movs	r3, #1
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <xQueueGenericCreateStatic+0x52>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <xQueueGenericCreateStatic+0x56>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueGenericCreateStatic+0x58>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	623b      	str	r3, [r7, #32]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <xQueueGenericCreateStatic+0x7e>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <xQueueGenericCreateStatic+0x82>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueGenericCreateStatic+0x84>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61fb      	str	r3, [r7, #28]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051e6:	2350      	movs	r3, #80	; 0x50
 80051e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d00a      	beq.n	8005206 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	61bb      	str	r3, [r7, #24]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005206:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00d      	beq.n	800522e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800521a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f83f 	bl	80052ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005230:	4618      	mov	r0, r3
 8005232:	3730      	adds	r7, #48	; 0x30
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreate+0x2a>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	613b      	str	r3, [r7, #16]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3350      	adds	r3, #80	; 0x50
 8005270:	4618      	mov	r0, r3
 8005272:	f002 f9a1 	bl	80075b8 <pvPortMalloc>
 8005276:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3350      	adds	r3, #80	; 0x50
 8005286:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005290:	79fa      	ldrb	r2, [r7, #7]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f805 	bl	80052ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052a2:	69bb      	ldr	r3, [r7, #24]
	}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d103      	bne.n	80052c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e002      	b.n	80052ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052da:	2101      	movs	r1, #1
 80052dc:	69b8      	ldr	r0, [r7, #24]
 80052de:	f7ff fecb 	bl	8005078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b08a      	sub	sp, #40	; 0x28
 80052f6:	af02      	add	r7, sp, #8
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	61bb      	str	r3, [r7, #24]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90a      	bls.n	8005338 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	617b      	str	r3, [r7, #20]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005338:	2302      	movs	r3, #2
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	2100      	movs	r1, #0
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff00 	bl	8005148 <xQueueGenericCreateStatic>
 8005348:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005356:	69fb      	ldr	r3, [r7, #28]
	}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d90a      	bls.n	80053a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053a4:	2202      	movs	r2, #2
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff45 	bl	8005238 <xQueueGenericCreate>
 80053ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053bc:	697b      	ldr	r3, [r7, #20]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08e      	sub	sp, #56	; 0x38
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xQueueGenericSend+0x32>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <xQueueGenericSend+0x40>
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <xQueueGenericSend+0x44>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <xQueueGenericSend+0x46>
 800540c:	2300      	movs	r3, #0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <xQueueGenericSend+0x60>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d103      	bne.n	8005436 <xQueueGenericSend+0x6e>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <xQueueGenericSend+0x72>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueGenericSend+0x74>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGenericSend+0x8e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	623b      	str	r3, [r7, #32]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005456:	f001 fa35 	bl	80068c4 <xTaskGetSchedulerState>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <xQueueGenericSend+0x9e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <xQueueGenericSend+0xa2>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <xQueueGenericSend+0xa4>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <xQueueGenericSend+0xbe>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	61fb      	str	r3, [r7, #28]
}
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005486:	f001 ff75 	bl	8007374 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <xQueueGenericSend+0xd4>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d129      	bne.n	80054f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a2:	f000 fa2e 	bl	8005902 <prvCopyDataToQueue>
 80054a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	3324      	adds	r3, #36	; 0x24
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 f843 	bl	8006540 <xTaskRemoveFromEventList>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d013      	beq.n	80054e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <xQueueGenericSend+0x1f8>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	e00a      	b.n	80054e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d007      	beq.n	80054e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <xQueueGenericSend+0x1f8>)
 80054da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054e8:	f001 ff74 	bl	80073d4 <vPortExitCritical>
				return pdPASS;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e063      	b.n	80055b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054f6:	f001 ff6d 	bl	80073d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e05c      	b.n	80055b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	4618      	mov	r0, r3
 800550a:	f001 f87d 	bl	8006608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005512:	f001 ff5f 	bl	80073d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005516:	f000 fde9 	bl	80060ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800551a:	f001 ff2b 	bl	8007374 <vPortEnterCritical>
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005524:	b25b      	sxtb	r3, r3
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800552a:	d103      	bne.n	8005534 <xQueueGenericSend+0x16c>
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800553a:	b25b      	sxtb	r3, r3
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005540:	d103      	bne.n	800554a <xQueueGenericSend+0x182>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800554a:	f001 ff43 	bl	80073d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800554e:	1d3a      	adds	r2, r7, #4
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f86c 	bl	8006634 <xTaskCheckForTimeOut>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d124      	bne.n	80055ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005564:	f000 fac5 	bl	8005af2 <prvIsQueueFull>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3310      	adds	r3, #16
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 ff92 	bl	80064a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800557c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800557e:	f000 fa50 	bl	8005a22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005582:	f000 fdc1 	bl	8006108 <xTaskResumeAll>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f af7c 	bne.w	8005486 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <xQueueGenericSend+0x1f8>)
 8005590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	e772      	b.n	8005486 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a2:	f000 fa3e 	bl	8005a22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055a6:	f000 fdaf 	bl	8006108 <xTaskResumeAll>
 80055aa:	e76c      	b.n	8005486 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ae:	f000 fa38 	bl	8005a22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055b2:	f000 fda9 	bl	8006108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3738      	adds	r7, #56	; 0x38
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b090      	sub	sp, #64	; 0x40
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <xQueueGenericSendFromISR+0x3c>
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <xQueueGenericSendFromISR+0x40>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <xQueueGenericSendFromISR+0x42>
 8005604:	2300      	movs	r3, #0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d103      	bne.n	800562e <xQueueGenericSendFromISR+0x6a>
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <xQueueGenericSendFromISR+0x6e>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueGenericSendFromISR+0x70>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	623b      	str	r3, [r7, #32]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800564e:	f001 ff73 	bl	8007538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005652:	f3ef 8211 	mrs	r2, BASEPRI
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fa      	str	r2, [r7, #28]
 8005668:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800566a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <xQueueGenericSendFromISR+0xbc>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d12f      	bne.n	80056e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005696:	f000 f934 	bl	8005902 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800569a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a2:	d112      	bne.n	80056ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d016      	beq.n	80056da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	3324      	adds	r3, #36	; 0x24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 ff45 	bl	8006540 <xTaskRemoveFromEventList>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00e      	beq.n	80056da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e007      	b.n	80056da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056ce:	3301      	adds	r3, #1
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	b25a      	sxtb	r2, r3
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056da:	2301      	movs	r3, #1
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056de:	e001      	b.n	80056e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	; 0x30
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <xQueueReceive+0x30>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	623b      	str	r3, [r7, #32]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <xQueueReceive+0x3e>
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <xQueueReceive+0x42>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xQueueReceive+0x44>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <xQueueReceive+0x5e>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	61fb      	str	r3, [r7, #28]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575a:	f001 f8b3 	bl	80068c4 <xTaskGetSchedulerState>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <xQueueReceive+0x6e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <xQueueReceive+0x72>
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <xQueueReceive+0x74>
 800576e:	2300      	movs	r3, #0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10a      	bne.n	800578a <xQueueReceive+0x8e>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	61bb      	str	r3, [r7, #24]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800578a:	f001 fdf3 	bl	8007374 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01f      	beq.n	80057da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800579e:	f000 f91a 	bl	80059d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	3310      	adds	r3, #16
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fec2 	bl	8006540 <xTaskRemoveFromEventList>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057c2:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <xQueueReceive+0x1bc>)
 80057c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057d2:	f001 fdff 	bl	80073d4 <vPortExitCritical>
				return pdPASS;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e069      	b.n	80058ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e0:	f001 fdf8 	bl	80073d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e062      	b.n	80058ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ee:	f107 0310 	add.w	r3, r7, #16
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 ff08 	bl	8006608 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fc:	f001 fdea 	bl	80073d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005800:	f000 fc74 	bl	80060ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005804:	f001 fdb6 	bl	8007374 <vPortEnterCritical>
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800580e:	b25b      	sxtb	r3, r3
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005814:	d103      	bne.n	800581e <xQueueReceive+0x122>
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005824:	b25b      	sxtb	r3, r3
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582a:	d103      	bne.n	8005834 <xQueueReceive+0x138>
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005834:	f001 fdce 	bl	80073d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005838:	1d3a      	adds	r2, r7, #4
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fef7 	bl	8006634 <xTaskCheckForTimeOut>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d123      	bne.n	8005894 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584e:	f000 f93a 	bl	8005ac6 <prvIsQueueEmpty>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fe1d 	bl	80064a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005868:	f000 f8db 	bl	8005a22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800586c:	f000 fc4c 	bl	8006108 <xTaskResumeAll>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d189      	bne.n	800578a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <xQueueReceive+0x1bc>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	e780      	b.n	800578a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	f000 f8ca 	bl	8005a22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800588e:	f000 fc3b 	bl	8006108 <xTaskResumeAll>
 8005892:	e77a      	b.n	800578a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005896:	f000 f8c4 	bl	8005a22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589a:	f000 fc35 	bl	8006108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800589e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058a0:	f000 f911 	bl	8005ac6 <prvIsQueueEmpty>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f43f af6f 	beq.w	800578a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3730      	adds	r7, #48	; 0x30
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <vQueueDelete+0x28>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60bb      	str	r3, [r7, #8]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f947 	bl	8005b78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f001 ff2b 	bl	8007750 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d14d      	bne.n	80059c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 ffe7 	bl	8006900 <xTaskPriorityDisinherit>
 8005932:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	609a      	str	r2, [r3, #8]
 800593a:	e043      	b.n	80059c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d119      	bne.n	8005976 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6858      	ldr	r0, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	461a      	mov	r2, r3
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	f002 f843 	bl	80079d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	d32b      	bcc.n	80059c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	e026      	b.n	80059c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68d8      	ldr	r0, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	461a      	mov	r2, r3
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	f002 f829 	bl	80079d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	425b      	negs	r3, r3
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d207      	bcs.n	80059b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	425b      	negs	r3, r3
 80059ac:	441a      	add	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d105      	bne.n	80059c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059cc:	697b      	ldr	r3, [r7, #20]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d018      	beq.n	8005a1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d303      	bcc.n	8005a0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68d9      	ldr	r1, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	461a      	mov	r2, r3
 8005a14:	6838      	ldr	r0, [r7, #0]
 8005a16:	f001 ffdf 	bl	80079d8 <memcpy>
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a2a:	f001 fca3 	bl	8007374 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a36:	e011      	b.n	8005a5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fd7b 	bl	8006540 <xTaskRemoveFromEventList>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a50:	f000 fe52 	bl	80066f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	dce9      	bgt.n	8005a38 <prvUnlockQueue+0x16>
 8005a64:	e000      	b.n	8005a68 <prvUnlockQueue+0x46>
					break;
 8005a66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	22ff      	movs	r2, #255	; 0xff
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a70:	f001 fcb0 	bl	80073d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a74:	f001 fc7e 	bl	8007374 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a80:	e011      	b.n	8005aa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d012      	beq.n	8005ab0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fd56 	bl	8006540 <xTaskRemoveFromEventList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a9a:	f000 fe2d 	bl	80066f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dce9      	bgt.n	8005a82 <prvUnlockQueue+0x60>
 8005aae:	e000      	b.n	8005ab2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ab0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005aba:	f001 fc8b 	bl	80073d4 <vPortExitCritical>
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ace:	f001 fc51 	bl	8007374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e001      	b.n	8005ae4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 fc76 	bl	80073d4 <vPortExitCritical>

	return xReturn;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005afa:	f001 fc3b 	bl	8007374 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d102      	bne.n	8005b10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e001      	b.n	8005b14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b14:	f001 fc5e 	bl	80073d4 <vPortExitCritical>

	return xReturn;
 8005b18:	68fb      	ldr	r3, [r7, #12]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e014      	b.n	8005b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b34:	4a0f      	ldr	r2, [pc, #60]	; (8005b74 <vQueueAddToRegistry+0x50>)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b40:	490c      	ldr	r1, [pc, #48]	; (8005b74 <vQueueAddToRegistry+0x50>)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <vQueueAddToRegistry+0x50>)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	4413      	add	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b56:	e006      	b.n	8005b66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d9e7      	bls.n	8005b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200009e8 	.word	0x200009e8

08005b78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e016      	b.n	8005bb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <vQueueUnregisterQueue+0x50>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d10b      	bne.n	8005bae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005b96:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <vQueueUnregisterQueue+0x50>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ba0:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <vQueueUnregisterQueue+0x50>)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
				break;
 8005bac:	e006      	b.n	8005bbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b07      	cmp	r3, #7
 8005bb8:	d9e5      	bls.n	8005b86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	200009e8 	.word	0x200009e8

08005bcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bdc:	f001 fbca 	bl	8007374 <vPortEnterCritical>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bec:	d103      	bne.n	8005bf6 <vQueueWaitForMessageRestricted+0x2a>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c02:	d103      	bne.n	8005c0c <vQueueWaitForMessageRestricted+0x40>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c0c:	f001 fbe2 	bl	80073d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fc61 	bl	80064e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	f7ff fefb 	bl	8005a22 <prvUnlockQueue>
	}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08e      	sub	sp, #56	; 0x38
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	623b      	str	r3, [r7, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c7a:	23bc      	movs	r3, #188	; 0xbc
 8005c7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2bbc      	cmp	r3, #188	; 0xbc
 8005c82:	d00a      	beq.n	8005c9a <xTaskCreateStatic+0x66>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61bb      	str	r3, [r7, #24]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01e      	beq.n	8005ce0 <xTaskCreateStatic+0xac>
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9303      	str	r3, [sp, #12]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	f107 0314 	add.w	r3, r7, #20
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f850 	bl	8005d78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cda:	f000 f8f3 	bl	8005ec4 <prvAddNewTaskToReadyList>
 8005cde:	e001      	b.n	8005ce4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ce4:	697b      	ldr	r3, [r7, #20]
	}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3728      	adds	r7, #40	; 0x28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08c      	sub	sp, #48	; 0x30
 8005cf2:	af04      	add	r7, sp, #16
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fc58 	bl	80075b8 <pvPortMalloc>
 8005d08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d10:	20bc      	movs	r0, #188	; 0xbc
 8005d12:	f001 fc51 	bl	80075b8 <pvPortMalloc>
 8005d16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
 8005d24:	e005      	b.n	8005d32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d26:	6978      	ldr	r0, [r7, #20]
 8005d28:	f001 fd12 	bl	8007750 <vPortFree>
 8005d2c:	e001      	b.n	8005d32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d017      	beq.n	8005d68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	9302      	str	r3, [sp, #8]
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f80e 	bl	8005d78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d5c:	69f8      	ldr	r0, [r7, #28]
 8005d5e:	f000 f8b1 	bl	8005ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e002      	b.n	8005d6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	461a      	mov	r2, r3
 8005d90:	21a5      	movs	r1, #165	; 0xa5
 8005d92:	f001 fe2f 	bl	80079f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005da0:	3b01      	subs	r3, #1
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	617b      	str	r3, [r7, #20]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01f      	beq.n	8005e16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e012      	b.n	8005e02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	7819      	ldrb	r1, [r3, #0]
 8005de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	3334      	adds	r3, #52	; 0x34
 8005dec:	460a      	mov	r2, r1
 8005dee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d9e9      	bls.n	8005ddc <prvInitialiseNewTask+0x64>
 8005e08:	e000      	b.n	8005e0c <prvInitialiseNewTask+0x94>
			{
				break;
 8005e0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e14:	e003      	b.n	8005e1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2b37      	cmp	r3, #55	; 0x37
 8005e22:	d901      	bls.n	8005e28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e24:	2337      	movs	r3, #55	; 0x37
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff f886 	bl	8004f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	3318      	adds	r3, #24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff f881 	bl	8004f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	3354      	adds	r3, #84	; 0x54
 8005e78:	2260      	movs	r2, #96	; 0x60
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fdb9 	bl	80079f4 <memset>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <prvInitialiseNewTask+0x140>)
 8005e86:	659a      	str	r2, [r3, #88]	; 0x58
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <prvInitialiseNewTask+0x144>)
 8005e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <prvInitialiseNewTask+0x148>)
 8005e92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	69b8      	ldr	r0, [r7, #24]
 8005e9a:	f001 f941 	bl	8007120 <pxPortInitialiseStack>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	08007ce0 	.word	0x08007ce0
 8005ebc:	08007d00 	.word	0x08007d00
 8005ec0:	08007cc0 	.word	0x08007cc0

08005ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ecc:	f001 fa52 	bl	8007374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4a2c      	ldr	r2, [pc, #176]	; (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ee8:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d110      	bne.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ef0:	f000 fc26 	bl	8006740 <prvInitialiseTaskLists>
 8005ef4:	e00d      	b.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ef6:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <prvAddNewTaskToReadyList+0xcc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d802      	bhi.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <prvAddNewTaskToReadyList+0xd4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <prvAddNewTaskToReadyList+0x74>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <prvAddNewTaskToReadyList+0xd4>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <prvAddNewTaskToReadyList+0xd8>)
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7ff f80b 	bl	8004f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f54:	f001 fa3e 	bl	80073d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <prvAddNewTaskToReadyList+0xcc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d207      	bcs.n	8005f7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <prvAddNewTaskToReadyList+0xdc>)
 8005f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000efc 	.word	0x20000efc
 8005f8c:	20000a28 	.word	0x20000a28
 8005f90:	20000f08 	.word	0x20000f08
 8005f94:	20000f18 	.word	0x20000f18
 8005f98:	20000f04 	.word	0x20000f04
 8005f9c:	20000a2c 	.word	0x20000a2c
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d017      	beq.n	8005fe6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <vTaskDelay+0x60>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <vTaskDelay+0x30>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60bb      	str	r3, [r7, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fd4:	f000 f88a 	bl	80060ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fcfe 	bl	80069dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fe0:	f000 f892 	bl	8006108 <xTaskResumeAll>
 8005fe4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d107      	bne.n	8005ffc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <vTaskDelay+0x64>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000f24 	.word	0x20000f24
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800601a:	463a      	mov	r2, r7
 800601c:	1d39      	adds	r1, r7, #4
 800601e:	f107 0308 	add.w	r3, r7, #8
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe ff40 	bl	8004ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	460a      	mov	r2, r1
 800603a:	4924      	ldr	r1, [pc, #144]	; (80060cc <vTaskStartScheduler+0xc0>)
 800603c:	4824      	ldr	r0, [pc, #144]	; (80060d0 <vTaskStartScheduler+0xc4>)
 800603e:	f7ff fdf9 	bl	8005c34 <xTaskCreateStatic>
 8006042:	4603      	mov	r3, r0
 8006044:	4a23      	ldr	r2, [pc, #140]	; (80060d4 <vTaskStartScheduler+0xc8>)
 8006046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006048:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <vTaskStartScheduler+0xc8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e001      	b.n	800605a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d102      	bne.n	8006066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006060:	f000 fd10 	bl	8006a84 <xTimerCreateTimerTask>
 8006064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d11b      	bne.n	80060a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	613b      	str	r3, [r7, #16]
}
 800607e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006080:	4b15      	ldr	r3, [pc, #84]	; (80060d8 <vTaskStartScheduler+0xcc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3354      	adds	r3, #84	; 0x54
 8006086:	4a15      	ldr	r2, [pc, #84]	; (80060dc <vTaskStartScheduler+0xd0>)
 8006088:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <vTaskStartScheduler+0xd4>)
 800608c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006090:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <vTaskStartScheduler+0xd8>)
 8006094:	2201      	movs	r2, #1
 8006096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006098:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <vTaskStartScheduler+0xdc>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800609e:	f001 f8c7 	bl	8007230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060a2:	e00e      	b.n	80060c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060aa:	d10a      	bne.n	80060c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60fb      	str	r3, [r7, #12]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vTaskStartScheduler+0xb4>
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	08007be4 	.word	0x08007be4
 80060d0:	08006711 	.word	0x08006711
 80060d4:	20000f20 	.word	0x20000f20
 80060d8:	20000a28 	.word	0x20000a28
 80060dc:	20000014 	.word	0x20000014
 80060e0:	20000f1c 	.word	0x20000f1c
 80060e4:	20000f08 	.word	0x20000f08
 80060e8:	20000f00 	.word	0x20000f00

080060ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <vTaskSuspendAll+0x18>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a03      	ldr	r2, [pc, #12]	; (8006104 <vTaskSuspendAll+0x18>)
 80060f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	20000f24 	.word	0x20000f24

08006108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006116:	4b42      	ldr	r3, [pc, #264]	; (8006220 <xTaskResumeAll+0x118>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xTaskResumeAll+0x2c>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	603b      	str	r3, [r7, #0]
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006134:	f001 f91e 	bl	8007374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006138:	4b39      	ldr	r3, [pc, #228]	; (8006220 <xTaskResumeAll+0x118>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a38      	ldr	r2, [pc, #224]	; (8006220 <xTaskResumeAll+0x118>)
 8006140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006142:	4b37      	ldr	r3, [pc, #220]	; (8006220 <xTaskResumeAll+0x118>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d162      	bne.n	8006210 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <xTaskResumeAll+0x11c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d05e      	beq.n	8006210 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006152:	e02f      	b.n	80061b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006154:	4b34      	ldr	r3, [pc, #208]	; (8006228 <xTaskResumeAll+0x120>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3318      	adds	r3, #24
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe ff5f 	bl	8005024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3304      	adds	r3, #4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe ff5a 	bl	8005024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b2d      	ldr	r3, [pc, #180]	; (800622c <xTaskResumeAll+0x124>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <xTaskResumeAll+0x7c>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a2a      	ldr	r2, [pc, #168]	; (800622c <xTaskResumeAll+0x124>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a27      	ldr	r2, [pc, #156]	; (8006230 <xTaskResumeAll+0x128>)
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fee5 	bl	8004f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4b23      	ldr	r3, [pc, #140]	; (8006234 <xTaskResumeAll+0x12c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061ae:	4b22      	ldr	r3, [pc, #136]	; (8006238 <xTaskResumeAll+0x130>)
 80061b0:	2201      	movs	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <xTaskResumeAll+0x120>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1cb      	bne.n	8006154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061c2:	f000 fb5f 	bl	8006884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061c6:	4b1d      	ldr	r3, [pc, #116]	; (800623c <xTaskResumeAll+0x134>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d010      	beq.n	80061f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061d2:	f000 f847 	bl	8006264 <xTaskIncrementTick>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <xTaskResumeAll+0x130>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f1      	bne.n	80061d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <xTaskResumeAll+0x134>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061f4:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xTaskResumeAll+0x130>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d009      	beq.n	8006210 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <xTaskResumeAll+0x138>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006210:	f001 f8e0 	bl	80073d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006214:	68bb      	ldr	r3, [r7, #8]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000f24 	.word	0x20000f24
 8006224:	20000efc 	.word	0x20000efc
 8006228:	20000ebc 	.word	0x20000ebc
 800622c:	20000f04 	.word	0x20000f04
 8006230:	20000a2c 	.word	0x20000a2c
 8006234:	20000a28 	.word	0x20000a28
 8006238:	20000f10 	.word	0x20000f10
 800623c:	20000f0c 	.word	0x20000f0c
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <xTaskGetTickCount+0x1c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006250:	687b      	ldr	r3, [r7, #4]
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000f00 	.word	0x20000f00

08006264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626e:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <xTaskIncrementTick+0x148>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 808f 	bne.w	8006396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006278:	4b4d      	ldr	r3, [pc, #308]	; (80063b0 <xTaskIncrementTick+0x14c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <xTaskIncrementTick+0x14c>)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d120      	bne.n	80062ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800628c:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <xTaskIncrementTick+0x150>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	603b      	str	r3, [r7, #0]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xTaskIncrementTick+0x46>
 80062ac:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <xTaskIncrementTick+0x154>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3f      	ldr	r2, [pc, #252]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <xTaskIncrementTick+0x154>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <xTaskIncrementTick+0x158>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	4a3d      	ldr	r2, [pc, #244]	; (80063bc <xTaskIncrementTick+0x158>)
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	f000 fadb 	bl	8006884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ce:	4b3c      	ldr	r3, [pc, #240]	; (80063c0 <xTaskIncrementTick+0x15c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d349      	bcc.n	800636c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d104      	bne.n	80062ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <xTaskIncrementTick+0x15c>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e8:	601a      	str	r2, [r3, #0]
					break;
 80062ea:	e03f      	b.n	800636c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ec:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <xTaskIncrementTick+0x150>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d203      	bcs.n	800630c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006304:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <xTaskIncrementTick+0x15c>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800630a:	e02f      	b.n	800636c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe87 	bl	8005024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	3318      	adds	r3, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fe7e 	bl	8005024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <xTaskIncrementTick+0x160>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d903      	bls.n	800633c <xTaskIncrementTick+0xd8>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <xTaskIncrementTick+0x160>)
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <xTaskIncrementTick+0x164>)
 800634a:	441a      	add	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f7fe fe09 	bl	8004f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <xTaskIncrementTick+0x168>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	429a      	cmp	r2, r3
 8006364:	d3b8      	bcc.n	80062d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	e7b5      	b.n	80062d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <xTaskIncrementTick+0x168>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	4915      	ldr	r1, [pc, #84]	; (80063c8 <xTaskIncrementTick+0x164>)
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d901      	bls.n	8006388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <xTaskIncrementTick+0x16c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d007      	beq.n	80063a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006390:	2301      	movs	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e004      	b.n	80063a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <xTaskIncrementTick+0x170>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <xTaskIncrementTick+0x170>)
 800639e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063a0:	697b      	ldr	r3, [r7, #20]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000f24 	.word	0x20000f24
 80063b0:	20000f00 	.word	0x20000f00
 80063b4:	20000eb4 	.word	0x20000eb4
 80063b8:	20000eb8 	.word	0x20000eb8
 80063bc:	20000f14 	.word	0x20000f14
 80063c0:	20000f1c 	.word	0x20000f1c
 80063c4:	20000f04 	.word	0x20000f04
 80063c8:	20000a2c 	.word	0x20000a2c
 80063cc:	20000a28 	.word	0x20000a28
 80063d0:	20000f10 	.word	0x20000f10
 80063d4:	20000f0c 	.word	0x20000f0c

080063d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <vTaskSwitchContext+0xb0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063e6:	4b29      	ldr	r3, [pc, #164]	; (800648c <vTaskSwitchContext+0xb4>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063ec:	e046      	b.n	800647c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063ee:	4b27      	ldr	r3, [pc, #156]	; (800648c <vTaskSwitchContext+0xb4>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f4:	4b26      	ldr	r3, [pc, #152]	; (8006490 <vTaskSwitchContext+0xb8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e010      	b.n	800641e <vTaskSwitchContext+0x46>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vTaskSwitchContext+0x40>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vTaskSwitchContext+0x3e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3b01      	subs	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	491d      	ldr	r1, [pc, #116]	; (8006494 <vTaskSwitchContext+0xbc>)
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0e4      	beq.n	80063fc <vTaskSwitchContext+0x24>
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <vTaskSwitchContext+0xbc>)
 800643e:	4413      	add	r3, r2
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	3308      	adds	r3, #8
 8006454:	429a      	cmp	r2, r3
 8006456:	d104      	bne.n	8006462 <vTaskSwitchContext+0x8a>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a0b      	ldr	r2, [pc, #44]	; (8006498 <vTaskSwitchContext+0xc0>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <vTaskSwitchContext+0xb8>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <vTaskSwitchContext+0xc0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3354      	adds	r3, #84	; 0x54
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <vTaskSwitchContext+0xc4>)
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000f24 	.word	0x20000f24
 800648c:	20000f10 	.word	0x20000f10
 8006490:	20000f04 	.word	0x20000f04
 8006494:	20000a2c 	.word	0x20000a2c
 8006498:	20000a28 	.word	0x20000a28
 800649c:	20000014 	.word	0x20000014

080064a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <vTaskPlaceOnEventList+0x44>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3318      	adds	r3, #24
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fe fd6f 	bl	8004fb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064d4:	2101      	movs	r1, #1
 80064d6:	6838      	ldr	r0, [r7, #0]
 80064d8:	f000 fa80 	bl	80069dc <prvAddCurrentTaskToDelayedList>
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000a28 	.word	0x20000a28

080064e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	617b      	str	r3, [r7, #20]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <vTaskPlaceOnEventListRestricted+0x54>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3318      	adds	r3, #24
 8006516:	4619      	mov	r1, r3
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7fe fd26 	bl	8004f6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006528:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	68b8      	ldr	r0, [r7, #8]
 800652e:	f000 fa55 	bl	80069dc <prvAddCurrentTaskToDelayedList>
	}
 8006532:	bf00      	nop
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000a28 	.word	0x20000a28

08006540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	60fb      	str	r3, [r7, #12]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	3318      	adds	r3, #24
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fd57 	bl	8005024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006576:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <xTaskRemoveFromEventList+0xb0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11d      	bne.n	80065ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3304      	adds	r3, #4
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fd4e 	bl	8005024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <xTaskRemoveFromEventList+0xb4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d903      	bls.n	800659c <xTaskRemoveFromEventList+0x5c>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a16      	ldr	r2, [pc, #88]	; (80065f4 <xTaskRemoveFromEventList+0xb4>)
 800659a:	6013      	str	r3, [r2, #0]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <xTaskRemoveFromEventList+0xb8>)
 80065aa:	441a      	add	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f7fe fcd9 	bl	8004f6a <vListInsertEnd>
 80065b8:	e005      	b.n	80065c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3318      	adds	r3, #24
 80065be:	4619      	mov	r1, r3
 80065c0:	480e      	ldr	r0, [pc, #56]	; (80065fc <xTaskRemoveFromEventList+0xbc>)
 80065c2:	f7fe fcd2 	bl	8004f6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	4b0d      	ldr	r3, [pc, #52]	; (8006600 <xTaskRemoveFromEventList+0xc0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d905      	bls.n	80065e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <xTaskRemoveFromEventList+0xc4>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e001      	b.n	80065e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065e4:	697b      	ldr	r3, [r7, #20]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000f24 	.word	0x20000f24
 80065f4:	20000f04 	.word	0x20000f04
 80065f8:	20000a2c 	.word	0x20000a2c
 80065fc:	20000ebc 	.word	0x20000ebc
 8006600:	20000a28 	.word	0x20000a28
 8006604:	20000f10 	.word	0x20000f10

08006608 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <vTaskInternalSetTimeOutState+0x24>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <vTaskInternalSetTimeOutState+0x28>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	20000f14 	.word	0x20000f14
 8006630:	20000f00 	.word	0x20000f00

08006634 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006676:	f000 fe7d 	bl	8007374 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <xTaskCheckForTimeOut+0xbc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006692:	d102      	bne.n	800669a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	e023      	b.n	80066e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <xTaskCheckForTimeOut+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d007      	beq.n	80066b6 <xTaskCheckForTimeOut+0x82>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	e015      	b.n	80066e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d20b      	bcs.n	80066d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff ff9b 	bl	8006608 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e004      	b.n	80066e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066de:	2301      	movs	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066e2:	f000 fe77 	bl	80073d4 <vPortExitCritical>

	return xReturn;
 80066e6:	69fb      	ldr	r3, [r7, #28]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3720      	adds	r7, #32
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000f00 	.word	0x20000f00
 80066f4:	20000f14 	.word	0x20000f14

080066f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <vTaskMissedYield+0x14>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000f10 	.word	0x20000f10

08006710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006718:	f000 f852 	bl	80067c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <prvIdleTask+0x28>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d9f9      	bls.n	8006718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvIdleTask+0x2c>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006734:	e7f0      	b.n	8006718 <prvIdleTask+0x8>
 8006736:	bf00      	nop
 8006738:	20000a2c 	.word	0x20000a2c
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006746:	2300      	movs	r3, #0
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	e00c      	b.n	8006766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <prvInitialiseTaskLists+0x60>)
 8006758:	4413      	add	r3, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fbd8 	bl	8004f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3301      	adds	r3, #1
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b37      	cmp	r3, #55	; 0x37
 800676a:	d9ef      	bls.n	800674c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800676c:	480d      	ldr	r0, [pc, #52]	; (80067a4 <prvInitialiseTaskLists+0x64>)
 800676e:	f7fe fbcf 	bl	8004f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006772:	480d      	ldr	r0, [pc, #52]	; (80067a8 <prvInitialiseTaskLists+0x68>)
 8006774:	f7fe fbcc 	bl	8004f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006778:	480c      	ldr	r0, [pc, #48]	; (80067ac <prvInitialiseTaskLists+0x6c>)
 800677a:	f7fe fbc9 	bl	8004f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800677e:	480c      	ldr	r0, [pc, #48]	; (80067b0 <prvInitialiseTaskLists+0x70>)
 8006780:	f7fe fbc6 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006784:	480b      	ldr	r0, [pc, #44]	; (80067b4 <prvInitialiseTaskLists+0x74>)
 8006786:	f7fe fbc3 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800678a:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <prvInitialiseTaskLists+0x78>)
 800678c:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <prvInitialiseTaskLists+0x64>)
 800678e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <prvInitialiseTaskLists+0x7c>)
 8006792:	4a05      	ldr	r2, [pc, #20]	; (80067a8 <prvInitialiseTaskLists+0x68>)
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000a2c 	.word	0x20000a2c
 80067a4:	20000e8c 	.word	0x20000e8c
 80067a8:	20000ea0 	.word	0x20000ea0
 80067ac:	20000ebc 	.word	0x20000ebc
 80067b0:	20000ed0 	.word	0x20000ed0
 80067b4:	20000ee8 	.word	0x20000ee8
 80067b8:	20000eb4 	.word	0x20000eb4
 80067bc:	20000eb8 	.word	0x20000eb8

080067c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067c6:	e019      	b.n	80067fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067c8:	f000 fdd4 	bl	8007374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <prvCheckTasksWaitingTermination+0x50>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fc23 	bl	8005024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <prvCheckTasksWaitingTermination+0x54>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	4a0b      	ldr	r2, [pc, #44]	; (8006814 <prvCheckTasksWaitingTermination+0x54>)
 80067e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <prvCheckTasksWaitingTermination+0x58>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	4a0a      	ldr	r2, [pc, #40]	; (8006818 <prvCheckTasksWaitingTermination+0x58>)
 80067f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067f2:	f000 fdef 	bl	80073d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f810 	bl	800681c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <prvCheckTasksWaitingTermination+0x58>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e1      	bne.n	80067c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000ed0 	.word	0x20000ed0
 8006814:	20000efc 	.word	0x20000efc
 8006818:	20000ee4 	.word	0x20000ee4

0800681c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3354      	adds	r3, #84	; 0x54
 8006828:	4618      	mov	r0, r3
 800682a:	f001 f8f9 	bl	8007a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006834:	2b00      	cmp	r3, #0
 8006836:	d108      	bne.n	800684a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	4618      	mov	r0, r3
 800683e:	f000 ff87 	bl	8007750 <vPortFree>
				vPortFree( pxTCB );
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ff84 	bl	8007750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006848:	e018      	b.n	800687c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006850:	2b01      	cmp	r3, #1
 8006852:	d103      	bne.n	800685c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff7b 	bl	8007750 <vPortFree>
	}
 800685a:	e00f      	b.n	800687c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006862:	2b02      	cmp	r3, #2
 8006864:	d00a      	beq.n	800687c <prvDeleteTCB+0x60>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60fb      	str	r3, [r7, #12]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <prvDeleteTCB+0x5e>
	}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <prvResetNextTaskUnblockTime+0x38>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800689a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800689c:	e008      	b.n	80068b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <prvResetNextTaskUnblockTime+0x38>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <prvResetNextTaskUnblockTime+0x3c>)
 80068ae:	6013      	str	r3, [r2, #0]
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000eb4 	.word	0x20000eb4
 80068c0:	20000f1c 	.word	0x20000f1c

080068c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <xTaskGetSchedulerState+0x34>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068d2:	2301      	movs	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	e008      	b.n	80068ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d8:	4b08      	ldr	r3, [pc, #32]	; (80068fc <xTaskGetSchedulerState+0x38>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068e0:	2302      	movs	r3, #2
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	e001      	b.n	80068ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ea:	687b      	ldr	r3, [r7, #4]
	}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	20000f08 	.word	0x20000f08
 80068fc:	20000f24 	.word	0x20000f24

08006900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d056      	beq.n	80069c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006916:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <xTaskPriorityDisinherit+0xd0>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d00a      	beq.n	8006936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60bb      	str	r3, [r7, #8]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006966:	429a      	cmp	r2, r3
 8006968:	d02c      	beq.n	80069c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696e:	2b00      	cmp	r3, #0
 8006970:	d128      	bne.n	80069c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fb54 	bl	8005024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <xTaskPriorityDisinherit+0xd4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d903      	bls.n	80069a4 <xTaskPriorityDisinherit+0xa4>
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <xTaskPriorityDisinherit+0xd4>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a09      	ldr	r2, [pc, #36]	; (80069d8 <xTaskPriorityDisinherit+0xd8>)
 80069b2:	441a      	add	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3304      	adds	r3, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7fe fad5 	bl	8004f6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069c4:	697b      	ldr	r3, [r7, #20]
	}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000a28 	.word	0x20000a28
 80069d4:	20000f04 	.word	0x20000f04
 80069d8:	20000a2c 	.word	0x20000a2c

080069dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069e6:	4b21      	ldr	r3, [pc, #132]	; (8006a6c <prvAddCurrentTaskToDelayedList+0x90>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ec:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <prvAddCurrentTaskToDelayedList+0x94>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe fb16 	bl	8005024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fe:	d10a      	bne.n	8006a16 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4819      	ldr	r0, [pc, #100]	; (8006a74 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a10:	f7fe faab 	bl	8004f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a14:	e026      	b.n	8006a64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d209      	bcs.n	8006a42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a2e:	4b12      	ldr	r3, [pc, #72]	; (8006a78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe fab9 	bl	8004fb2 <vListInsert>
}
 8006a40:	e010      	b.n	8006a64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe faaf 	bl	8004fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d202      	bcs.n	8006a64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000f00 	.word	0x20000f00
 8006a70:	20000a28 	.word	0x20000a28
 8006a74:	20000ee8 	.word	0x20000ee8
 8006a78:	20000eb8 	.word	0x20000eb8
 8006a7c:	20000eb4 	.word	0x20000eb4
 8006a80:	20000f1c 	.word	0x20000f1c

08006a84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a8e:	f000 fb07 	bl	80070a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <xTimerCreateTimerTask+0x80>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d021      	beq.n	8006ade <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006aa2:	1d3a      	adds	r2, r7, #4
 8006aa4:	f107 0108 	add.w	r1, r7, #8
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fa15 	bl	8004edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	9202      	str	r2, [sp, #8]
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	2302      	movs	r3, #2
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	4910      	ldr	r1, [pc, #64]	; (8006b08 <xTimerCreateTimerTask+0x84>)
 8006ac6:	4811      	ldr	r0, [pc, #68]	; (8006b0c <xTimerCreateTimerTask+0x88>)
 8006ac8:	f7ff f8b4 	bl	8005c34 <xTaskCreateStatic>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <xTimerCreateTimerTask+0x8c>)
 8006ad0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <xTimerCreateTimerTask+0x8c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ada:	2301      	movs	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	613b      	str	r3, [r7, #16]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006afa:	697b      	ldr	r3, [r7, #20]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000f58 	.word	0x20000f58
 8006b08:	08007bec 	.word	0x08007bec
 8006b0c:	08006c49 	.word	0x08006c49
 8006b10:	20000f5c 	.word	0x20000f5c

08006b14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	623b      	str	r3, [r7, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b42:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <xTimerGenericCommand+0x98>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d02a      	beq.n	8006ba0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	dc18      	bgt.n	8006b8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b5c:	f7ff feb2 	bl	80068c4 <xTaskGetSchedulerState>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d109      	bne.n	8006b7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b66:	4b11      	ldr	r3, [pc, #68]	; (8006bac <xTimerGenericCommand+0x98>)
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f107 0110 	add.w	r1, r7, #16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b72:	f7fe fc29 	bl	80053c8 <xQueueGenericSend>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
 8006b78:	e012      	b.n	8006ba0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <xTimerGenericCommand+0x98>)
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	f107 0110 	add.w	r1, r7, #16
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	f7fe fc1f 	bl	80053c8 <xQueueGenericSend>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b8c:	e008      	b.n	8006ba0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <xTimerGenericCommand+0x98>)
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	f107 0110 	add.w	r1, r7, #16
 8006b96:	2300      	movs	r3, #0
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	f7fe fd13 	bl	80055c4 <xQueueGenericSendFromISR>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3728      	adds	r7, #40	; 0x28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000f58 	.word	0x20000f58

08006bb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <prvProcessExpiredTimer+0x94>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fa2b 	bl	8005024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d022      	beq.n	8006c22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	18d1      	adds	r1, r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	6978      	ldr	r0, [r7, #20]
 8006bea:	f000 f8d1 	bl	8006d90 <prvInsertTimerInActiveList>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6978      	ldr	r0, [r7, #20]
 8006c00:	f7ff ff88 	bl	8006b14 <xTimerGenericCommand>
 8006c04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d113      	bne.n	8006c34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60fb      	str	r3, [r7, #12]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	6978      	ldr	r0, [r7, #20]
 8006c3a:	4798      	blx	r3
}
 8006c3c:	bf00      	nop
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000f50 	.word	0x20000f50

08006c48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f857 	bl	8006d08 <prvGetNextExpireTime>
 8006c5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f803 	bl	8006c6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c66:	f000 f8d5 	bl	8006e14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c6a:	e7f1      	b.n	8006c50 <prvTimerTask+0x8>

08006c6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c76:	f7ff fa39 	bl	80060ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c7a:	f107 0308 	add.w	r3, r7, #8
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f866 	bl	8006d50 <prvSampleTimeNow>
 8006c84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d130      	bne.n	8006cee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <prvProcessTimerOrBlockTask+0x3c>
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d806      	bhi.n	8006ca8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c9a:	f7ff fa35 	bl	8006108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ff85 	bl	8006bb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ca6:	e024      	b.n	8006cf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <prvProcessTimerOrBlockTask+0x90>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <prvProcessTimerOrBlockTask+0x50>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <prvProcessTimerOrBlockTask+0x52>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cc0:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <prvProcessTimerOrBlockTask+0x94>)
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7fe ff7d 	bl	8005bcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cd2:	f7ff fa19 	bl	8006108 <xTaskResumeAll>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <prvProcessTimerOrBlockTask+0x98>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	f3bf 8f6f 	isb	sy
}
 8006cec:	e001      	b.n	8006cf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cee:	f7ff fa0b 	bl	8006108 <xTaskResumeAll>
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000f54 	.word	0x20000f54
 8006d00:	20000f58 	.word	0x20000f58
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <prvGetNextExpireTime+0x44>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <prvGetNextExpireTime+0x16>
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	e000      	b.n	8006d20 <prvGetNextExpireTime+0x18>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <prvGetNextExpireTime+0x44>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e001      	b.n	8006d3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000f50 	.word	0x20000f50

08006d50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d58:	f7ff fa74 	bl	8006244 <xTaskGetTickCount>
 8006d5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <prvSampleTimeNow+0x3c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d205      	bcs.n	8006d74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d68:	f000 f936 	bl	8006fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d7a:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <prvSampleTimeNow+0x3c>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000f60 	.word	0x20000f60

08006d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d812      	bhi.n	8006ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d302      	bcc.n	8006dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e01b      	b.n	8006e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <prvInsertTimerInActiveList+0x7c>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f7fe f8ec 	bl	8004fb2 <vListInsert>
 8006dda:	e012      	b.n	8006e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d206      	bcs.n	8006df2 <prvInsertTimerInActiveList+0x62>
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d302      	bcc.n	8006df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	e007      	b.n	8006e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <prvInsertTimerInActiveList+0x80>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe f8d8 	bl	8004fb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e02:	697b      	ldr	r3, [r7, #20]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000f54 	.word	0x20000f54
 8006e10:	20000f50 	.word	0x20000f50

08006e14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08e      	sub	sp, #56	; 0x38
 8006e18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e1a:	e0ca      	b.n	8006fb2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da18      	bge.n	8006e54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	3304      	adds	r3, #4
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	61fb      	str	r3, [r7, #28]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4a:	6850      	ldr	r0, [r2, #4]
 8006e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4e:	6892      	ldr	r2, [r2, #8]
 8006e50:	4611      	mov	r1, r2
 8006e52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f2c0 80aa 	blt.w	8006fb0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe f8d9 	bl	8005024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e72:	463b      	mov	r3, r7
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff ff6b 	bl	8006d50 <prvSampleTimeNow>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	f200 8097 	bhi.w	8006fb2 <prvProcessReceivedCommands+0x19e>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <prvProcessReceivedCommands+0x78>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006eb5 	.word	0x08006eb5
 8006e98:	08006f29 	.word	0x08006f29
 8006e9c:	08006f3d 	.word	0x08006f3d
 8006ea0:	08006f87 	.word	0x08006f87
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006eb5 	.word	0x08006eb5
 8006eac:	08006f29 	.word	0x08006f29
 8006eb0:	08006f3d 	.word	0x08006f3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	18d1      	adds	r1, r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed4:	f7ff ff5c 	bl	8006d90 <prvInsertTimerInActiveList>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d069      	beq.n	8006fb2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05e      	beq.n	8006fb2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	441a      	add	r2, r3
 8006efc:	2300      	movs	r3, #0
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f06:	f7ff fe05 	bl	8006b14 <xTimerGenericCommand>
 8006f0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d14f      	bne.n	8006fb2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	61bb      	str	r3, [r7, #24]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f3a:	e03a      	b.n	8006fb2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	617b      	str	r3, [r7, #20]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	18d1      	adds	r1, r2, r3
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f80:	f7ff ff06 	bl	8006d90 <prvInsertTimerInActiveList>
					break;
 8006f84:	e015      	b.n	8006fb2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f96:	f000 fbdb 	bl	8007750 <vPortFree>
 8006f9a:	e00a      	b.n	8006fb2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fae:	e000      	b.n	8006fb2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fb2:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <prvProcessReceivedCommands+0x1c0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	1d39      	adds	r1, r7, #4
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fb9e 	bl	80056fc <xQueueReceive>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f47f af2a 	bne.w	8006e1c <prvProcessReceivedCommands+0x8>
	}
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3730      	adds	r7, #48	; 0x30
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000f58 	.word	0x20000f58

08006fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fde:	e048      	b.n	8007072 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe0:	4b2d      	ldr	r3, [pc, #180]	; (8007098 <prvSwitchTimerLists+0xc0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fea:	4b2b      	ldr	r3, [pc, #172]	; (8007098 <prvSwitchTimerLists+0xc0>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe f813 	bl	8005024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d02e      	beq.n	8007072 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4413      	add	r3, r2
 800701c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d90e      	bls.n	8007044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007032:	4b19      	ldr	r3, [pc, #100]	; (8007098 <prvSwitchTimerLists+0xc0>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fd ffb8 	bl	8004fb2 <vListInsert>
 8007042:	e016      	b.n	8007072 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007044:	2300      	movs	r3, #0
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	2300      	movs	r3, #0
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fd60 	bl	8006b14 <xTimerGenericCommand>
 8007054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	603b      	str	r3, [r7, #0]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <prvSwitchTimerLists+0xc0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1b1      	bne.n	8006fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <prvSwitchTimerLists+0xc0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007082:	4b06      	ldr	r3, [pc, #24]	; (800709c <prvSwitchTimerLists+0xc4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a04      	ldr	r2, [pc, #16]	; (8007098 <prvSwitchTimerLists+0xc0>)
 8007088:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800708a:	4a04      	ldr	r2, [pc, #16]	; (800709c <prvSwitchTimerLists+0xc4>)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	6013      	str	r3, [r2, #0]
}
 8007090:	bf00      	nop
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000f50 	.word	0x20000f50
 800709c:	20000f54 	.word	0x20000f54

080070a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070a6:	f000 f965 	bl	8007374 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <prvCheckForValidListAndQueue+0x60>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d120      	bne.n	80070f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070b2:	4814      	ldr	r0, [pc, #80]	; (8007104 <prvCheckForValidListAndQueue+0x64>)
 80070b4:	f7fd ff2c 	bl	8004f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070b8:	4813      	ldr	r0, [pc, #76]	; (8007108 <prvCheckForValidListAndQueue+0x68>)
 80070ba:	f7fd ff29 	bl	8004f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070be:	4b13      	ldr	r3, [pc, #76]	; (800710c <prvCheckForValidListAndQueue+0x6c>)
 80070c0:	4a10      	ldr	r2, [pc, #64]	; (8007104 <prvCheckForValidListAndQueue+0x64>)
 80070c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <prvCheckForValidListAndQueue+0x70>)
 80070c6:	4a10      	ldr	r2, [pc, #64]	; (8007108 <prvCheckForValidListAndQueue+0x68>)
 80070c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070ca:	2300      	movs	r3, #0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <prvCheckForValidListAndQueue+0x74>)
 80070d0:	4a11      	ldr	r2, [pc, #68]	; (8007118 <prvCheckForValidListAndQueue+0x78>)
 80070d2:	2110      	movs	r1, #16
 80070d4:	200a      	movs	r0, #10
 80070d6:	f7fe f837 	bl	8005148 <xQueueGenericCreateStatic>
 80070da:	4603      	mov	r3, r0
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <prvCheckForValidListAndQueue+0x60>)
 80070de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <prvCheckForValidListAndQueue+0x60>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <prvCheckForValidListAndQueue+0x60>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	490b      	ldr	r1, [pc, #44]	; (800711c <prvCheckForValidListAndQueue+0x7c>)
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fd18 	bl	8005b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070f4:	f000 f96e 	bl	80073d4 <vPortExitCritical>
}
 80070f8:	bf00      	nop
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000f58 	.word	0x20000f58
 8007104:	20000f28 	.word	0x20000f28
 8007108:	20000f3c 	.word	0x20000f3c
 800710c:	20000f50 	.word	0x20000f50
 8007110:	20000f54 	.word	0x20000f54
 8007114:	20001004 	.word	0x20001004
 8007118:	20000f64 	.word	0x20000f64
 800711c:	08007bf4 	.word	0x08007bf4

08007120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3b04      	subs	r3, #4
 8007130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3b04      	subs	r3, #4
 800713e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3b04      	subs	r3, #4
 800714e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007150:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <pxPortInitialiseStack+0x64>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3b14      	subs	r3, #20
 800715a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3b04      	subs	r3, #4
 8007166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f06f 0202 	mvn.w	r2, #2
 800716e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3b20      	subs	r3, #32
 8007174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	08007189 	.word	0x08007189

08007188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <prvTaskExitError+0x54>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719a:	d00a      	beq.n	80071b2 <prvTaskExitError+0x2a>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	60fb      	str	r3, [r7, #12]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <prvTaskExitError+0x28>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60bb      	str	r3, [r7, #8]
}
 80071c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071c6:	bf00      	nop
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0fc      	beq.n	80071c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000010 	.word	0x20000010

080071e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <pxCurrentTCBConst2>)
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	6808      	ldr	r0, [r1, #0]
 80071e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	f380 8809 	msr	PSP, r0
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8811 	msr	BASEPRI, r0
 80071fa:	4770      	bx	lr
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst2>:
 8007200:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007208:	4808      	ldr	r0, [pc, #32]	; (800722c <prvPortStartFirstTask+0x24>)
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	6800      	ldr	r0, [r0, #0]
 800720e:	f380 8808 	msr	MSP, r0
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8814 	msr	CONTROL, r0
 800721a:	b662      	cpsie	i
 800721c:	b661      	cpsie	f
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	df00      	svc	0
 8007228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800722a:	bf00      	nop
 800722c:	e000ed08 	.word	0xe000ed08

08007230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007236:	4b46      	ldr	r3, [pc, #280]	; (8007350 <xPortStartScheduler+0x120>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a46      	ldr	r2, [pc, #280]	; (8007354 <xPortStartScheduler+0x124>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10a      	bne.n	8007256 <xPortStartScheduler+0x26>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	613b      	str	r3, [r7, #16]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007256:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <xPortStartScheduler+0x120>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a3f      	ldr	r2, [pc, #252]	; (8007358 <xPortStartScheduler+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d10a      	bne.n	8007276 <xPortStartScheduler+0x46>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007276:	4b39      	ldr	r3, [pc, #228]	; (800735c <xPortStartScheduler+0x12c>)
 8007278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	22ff      	movs	r2, #255	; 0xff
 8007286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007298:	b2da      	uxtb	r2, r3
 800729a:	4b31      	ldr	r3, [pc, #196]	; (8007360 <xPortStartScheduler+0x130>)
 800729c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800729e:	4b31      	ldr	r3, [pc, #196]	; (8007364 <xPortStartScheduler+0x134>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072a4:	e009      	b.n	80072ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072a6:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <xPortStartScheduler+0x134>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	4a2d      	ldr	r2, [pc, #180]	; (8007364 <xPortStartScheduler+0x134>)
 80072ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b80      	cmp	r3, #128	; 0x80
 80072c4:	d0ef      	beq.n	80072a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072c6:	4b27      	ldr	r3, [pc, #156]	; (8007364 <xPortStartScheduler+0x134>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1c3 0307 	rsb	r3, r3, #7
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d00a      	beq.n	80072e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60bb      	str	r3, [r7, #8]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072e8:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <xPortStartScheduler+0x134>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	4a1d      	ldr	r2, [pc, #116]	; (8007364 <xPortStartScheduler+0x134>)
 80072f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072f2:	4b1c      	ldr	r3, [pc, #112]	; (8007364 <xPortStartScheduler+0x134>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072fa:	4a1a      	ldr	r2, [pc, #104]	; (8007364 <xPortStartScheduler+0x134>)
 80072fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	b2da      	uxtb	r2, r3
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007306:	4b18      	ldr	r3, [pc, #96]	; (8007368 <xPortStartScheduler+0x138>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a17      	ldr	r2, [pc, #92]	; (8007368 <xPortStartScheduler+0x138>)
 800730c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <xPortStartScheduler+0x138>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a14      	ldr	r2, [pc, #80]	; (8007368 <xPortStartScheduler+0x138>)
 8007318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800731c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800731e:	f000 f8dd 	bl	80074dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007322:	4b12      	ldr	r3, [pc, #72]	; (800736c <xPortStartScheduler+0x13c>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007328:	f000 f8fc 	bl	8007524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800732c:	4b10      	ldr	r3, [pc, #64]	; (8007370 <xPortStartScheduler+0x140>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a0f      	ldr	r2, [pc, #60]	; (8007370 <xPortStartScheduler+0x140>)
 8007332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007338:	f7ff ff66 	bl	8007208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800733c:	f7ff f84c 	bl	80063d8 <vTaskSwitchContext>
	prvTaskExitError();
 8007340:	f7ff ff22 	bl	8007188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	e000ed00 	.word	0xe000ed00
 8007354:	410fc271 	.word	0x410fc271
 8007358:	410fc270 	.word	0x410fc270
 800735c:	e000e400 	.word	0xe000e400
 8007360:	20001054 	.word	0x20001054
 8007364:	20001058 	.word	0x20001058
 8007368:	e000ed20 	.word	0xe000ed20
 800736c:	20000010 	.word	0x20000010
 8007370:	e000ef34 	.word	0xe000ef34

08007374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	607b      	str	r3, [r7, #4]
}
 800738c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <vPortEnterCritical+0x58>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <vPortEnterCritical+0x58>)
 8007396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <vPortEnterCritical+0x58>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d10f      	bne.n	80073c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <vPortEnterCritical+0x5c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <vPortEnterCritical+0x4a>
	}
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000010 	.word	0x20000010
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <vPortExitCritical+0x50>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <vPortExitCritical+0x24>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	607b      	str	r3, [r7, #4]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <vPortExitCritical+0x50>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	4a09      	ldr	r2, [pc, #36]	; (8007424 <vPortExitCritical+0x50>)
 8007400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007402:	4b08      	ldr	r3, [pc, #32]	; (8007424 <vPortExitCritical+0x50>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d105      	bne.n	8007416 <vPortExitCritical+0x42>
 800740a:	2300      	movs	r3, #0
 800740c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f383 8811 	msr	BASEPRI, r3
}
 8007414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000010 	.word	0x20000010
	...

08007430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007430:	f3ef 8009 	mrs	r0, PSP
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <pxCurrentTCBConst>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	f01e 0f10 	tst.w	lr, #16
 8007440:	bf08      	it	eq
 8007442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744a:	6010      	str	r0, [r2, #0]
 800744c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007454:	f380 8811 	msr	BASEPRI, r0
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f7fe ffba 	bl	80063d8 <vTaskSwitchContext>
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f380 8811 	msr	BASEPRI, r0
 800746c:	bc09      	pop	{r0, r3}
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	6808      	ldr	r0, [r1, #0]
 8007472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007476:	f01e 0f10 	tst.w	lr, #16
 800747a:	bf08      	it	eq
 800747c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007480:	f380 8809 	msr	PSP, r0
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst>:
 8007490:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074b2:	f7fe fed7 	bl	8006264 <xTaskIncrementTick>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <xPortSysTickHandler+0x40>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f383 8811 	msr	BASEPRI, r3
}
 80074ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <vPortSetupTimerInterrupt+0x34>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <vPortSetupTimerInterrupt+0x38>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <vPortSetupTimerInterrupt+0x3c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0a      	ldr	r2, [pc, #40]	; (800751c <vPortSetupTimerInterrupt+0x40>)
 80074f2:	fba2 2303 	umull	r2, r3, r2, r3
 80074f6:	099b      	lsrs	r3, r3, #6
 80074f8:	4a09      	ldr	r2, [pc, #36]	; (8007520 <vPortSetupTimerInterrupt+0x44>)
 80074fa:	3b01      	subs	r3, #1
 80074fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074fe:	4b04      	ldr	r3, [pc, #16]	; (8007510 <vPortSetupTimerInterrupt+0x34>)
 8007500:	2207      	movs	r2, #7
 8007502:	601a      	str	r2, [r3, #0]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	e000e010 	.word	0xe000e010
 8007514:	e000e018 	.word	0xe000e018
 8007518:	20000000 	.word	0x20000000
 800751c:	10624dd3 	.word	0x10624dd3
 8007520:	e000e014 	.word	0xe000e014

08007524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007534 <vPortEnableVFP+0x10>
 8007528:	6801      	ldr	r1, [r0, #0]
 800752a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800752e:	6001      	str	r1, [r0, #0]
 8007530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007532:	bf00      	nop
 8007534:	e000ed88 	.word	0xe000ed88

08007538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800753e:	f3ef 8305 	mrs	r3, IPSR
 8007542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b0f      	cmp	r3, #15
 8007548:	d914      	bls.n	8007574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <vPortValidateInterruptPriority+0x70>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007554:	4b15      	ldr	r3, [pc, #84]	; (80075ac <vPortValidateInterruptPriority+0x74>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	7afa      	ldrb	r2, [r7, #11]
 800755a:	429a      	cmp	r2, r3
 800755c:	d20a      	bcs.n	8007574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007574:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <vPortValidateInterruptPriority+0x78>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800757c:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <vPortValidateInterruptPriority+0x7c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d90a      	bls.n	800759a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	603b      	str	r3, [r7, #0]
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <vPortValidateInterruptPriority+0x60>
	}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	e000e3f0 	.word	0xe000e3f0
 80075ac:	20001054 	.word	0x20001054
 80075b0:	e000ed0c 	.word	0xe000ed0c
 80075b4:	20001058 	.word	0x20001058

080075b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075c4:	f7fe fd92 	bl	80060ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075c8:	4b5b      	ldr	r3, [pc, #364]	; (8007738 <pvPortMalloc+0x180>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075d0:	f000 f920 	bl	8007814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075d4:	4b59      	ldr	r3, [pc, #356]	; (800773c <pvPortMalloc+0x184>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4013      	ands	r3, r2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8093 	bne.w	8007708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01d      	beq.n	8007624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075e8:	2208      	movs	r2, #8
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d014      	beq.n	8007624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f023 0307 	bic.w	r3, r3, #7
 8007600:	3308      	adds	r3, #8
 8007602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <pvPortMalloc+0x6c>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	617b      	str	r3, [r7, #20]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d06e      	beq.n	8007708 <pvPortMalloc+0x150>
 800762a:	4b45      	ldr	r3, [pc, #276]	; (8007740 <pvPortMalloc+0x188>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d869      	bhi.n	8007708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007634:	4b43      	ldr	r3, [pc, #268]	; (8007744 <pvPortMalloc+0x18c>)
 8007636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007638:	4b42      	ldr	r3, [pc, #264]	; (8007744 <pvPortMalloc+0x18c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800763e:	e004      	b.n	800764a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d903      	bls.n	800765c <pvPortMalloc+0xa4>
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f1      	bne.n	8007640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <pvPortMalloc+0x180>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007662:	429a      	cmp	r2, r3
 8007664:	d050      	beq.n	8007708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2208      	movs	r2, #8
 800766c:	4413      	add	r3, r2
 800766e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	2308      	movs	r3, #8
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	429a      	cmp	r2, r3
 8007686:	d91f      	bls.n	80076c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <pvPortMalloc+0xf8>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	613b      	str	r3, [r7, #16]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076c2:	69b8      	ldr	r0, [r7, #24]
 80076c4:	f000 f908 	bl	80078d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <pvPortMalloc+0x188>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <pvPortMalloc+0x188>)
 80076d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <pvPortMalloc+0x188>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <pvPortMalloc+0x190>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d203      	bcs.n	80076ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076e2:	4b17      	ldr	r3, [pc, #92]	; (8007740 <pvPortMalloc+0x188>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a18      	ldr	r2, [pc, #96]	; (8007748 <pvPortMalloc+0x190>)
 80076e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <pvPortMalloc+0x184>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076fe:	4b13      	ldr	r3, [pc, #76]	; (800774c <pvPortMalloc+0x194>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	4a11      	ldr	r2, [pc, #68]	; (800774c <pvPortMalloc+0x194>)
 8007706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007708:	f7fe fcfe 	bl	8006108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <pvPortMalloc+0x174>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60fb      	str	r3, [r7, #12]
}
 8007728:	bf00      	nop
 800772a:	e7fe      	b.n	800772a <pvPortMalloc+0x172>
	return pvReturn;
 800772c:	69fb      	ldr	r3, [r7, #28]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3728      	adds	r7, #40	; 0x28
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20004c64 	.word	0x20004c64
 800773c:	20004c78 	.word	0x20004c78
 8007740:	20004c68 	.word	0x20004c68
 8007744:	20004c5c 	.word	0x20004c5c
 8007748:	20004c6c 	.word	0x20004c6c
 800774c:	20004c70 	.word	0x20004c70

08007750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d04d      	beq.n	80077fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007762:	2308      	movs	r3, #8
 8007764:	425b      	negs	r3, r3
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4413      	add	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	4b24      	ldr	r3, [pc, #144]	; (8007808 <vPortFree+0xb8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <vPortFree+0x44>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	60fb      	str	r3, [r7, #12]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <vPortFree+0x62>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	60bb      	str	r3, [r7, #8]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	4b14      	ldr	r3, [pc, #80]	; (8007808 <vPortFree+0xb8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4013      	ands	r3, r2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01e      	beq.n	80077fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11a      	bne.n	80077fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <vPortFree+0xb8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	43db      	mvns	r3, r3
 80077d2:	401a      	ands	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077d8:	f7fe fc88 	bl	80060ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <vPortFree+0xbc>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4413      	add	r3, r2
 80077e6:	4a09      	ldr	r2, [pc, #36]	; (800780c <vPortFree+0xbc>)
 80077e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ea:	6938      	ldr	r0, [r7, #16]
 80077ec:	f000 f874 	bl	80078d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <vPortFree+0xc0>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	4a06      	ldr	r2, [pc, #24]	; (8007810 <vPortFree+0xc0>)
 80077f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077fa:	f7fe fc85 	bl	8006108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077fe:	bf00      	nop
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20004c78 	.word	0x20004c78
 800780c:	20004c68 	.word	0x20004c68
 8007810:	20004c74 	.word	0x20004c74

08007814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800781a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800781e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007820:	4b27      	ldr	r3, [pc, #156]	; (80078c0 <prvHeapInit+0xac>)
 8007822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3307      	adds	r3, #7
 8007832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <prvHeapInit+0xac>)
 8007844:	4413      	add	r3, r2
 8007846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800784c:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <prvHeapInit+0xb0>)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <prvHeapInit+0xb0>)
 8007854:	2200      	movs	r2, #0
 8007856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4413      	add	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007860:	2208      	movs	r2, #8
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0307 	bic.w	r3, r3, #7
 800786e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <prvHeapInit+0xb4>)
 8007874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <prvHeapInit+0xb4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <prvHeapInit+0xb4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007894:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <prvHeapInit+0xb4>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <prvHeapInit+0xb8>)
 80078a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <prvHeapInit+0xbc>)
 80078aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <prvHeapInit+0xc0>)
 80078ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	2000105c 	.word	0x2000105c
 80078c4:	20004c5c 	.word	0x20004c5c
 80078c8:	20004c64 	.word	0x20004c64
 80078cc:	20004c6c 	.word	0x20004c6c
 80078d0:	20004c68 	.word	0x20004c68
 80078d4:	20004c78 	.word	0x20004c78

080078d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078e0:	4b28      	ldr	r3, [pc, #160]	; (8007984 <prvInsertBlockIntoFreeList+0xac>)
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e002      	b.n	80078ec <prvInsertBlockIntoFreeList+0x14>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d8f7      	bhi.n	80078e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	d108      	bne.n	800791a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	441a      	add	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	441a      	add	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d118      	bne.n	8007960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b15      	ldr	r3, [pc, #84]	; (8007988 <prvInsertBlockIntoFreeList+0xb0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d00d      	beq.n	8007956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	441a      	add	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e008      	b.n	8007968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvInsertBlockIntoFreeList+0xb0>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e003      	b.n	8007968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	d002      	beq.n	8007976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20004c5c 	.word	0x20004c5c
 8007988:	20004c64 	.word	0x20004c64

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4d0d      	ldr	r5, [pc, #52]	; (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2600      	movs	r6, #0
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4d0b      	ldr	r5, [pc, #44]	; (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	; (80079d0 <__libc_init_array+0x44>)
 80079a0:	f000 f8f2 	bl	8007b88 <_init>
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2600      	movs	r6, #0
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	08007d28 	.word	0x08007d28
 80079c8:	08007d28 	.word	0x08007d28
 80079cc:	08007d28 	.word	0x08007d28
 80079d0:	08007d2c 	.word	0x08007d2c

080079d4 <__retarget_lock_acquire_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <__retarget_lock_release_recursive>:
 80079d6:	4770      	bx	lr

080079d8 <memcpy>:
 80079d8:	440a      	add	r2, r1
 80079da:	4291      	cmp	r1, r2
 80079dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079e0:	d100      	bne.n	80079e4 <memcpy+0xc>
 80079e2:	4770      	bx	lr
 80079e4:	b510      	push	{r4, lr}
 80079e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ee:	4291      	cmp	r1, r2
 80079f0:	d1f9      	bne.n	80079e6 <memcpy+0xe>
 80079f2:	bd10      	pop	{r4, pc}

080079f4 <memset>:
 80079f4:	4402      	add	r2, r0
 80079f6:	4603      	mov	r3, r0
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d100      	bne.n	80079fe <memset+0xa>
 80079fc:	4770      	bx	lr
 80079fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007a02:	e7f9      	b.n	80079f8 <memset+0x4>

08007a04 <cleanup_glue>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	460c      	mov	r4, r1
 8007a08:	6809      	ldr	r1, [r1, #0]
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	b109      	cbz	r1, 8007a12 <cleanup_glue+0xe>
 8007a0e:	f7ff fff9 	bl	8007a04 <cleanup_glue>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a1a:	f000 b869 	b.w	8007af0 <_free_r>
	...

08007a20 <_reclaim_reent>:
 8007a20:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <_reclaim_reent+0xb4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4283      	cmp	r3, r0
 8007a26:	b570      	push	{r4, r5, r6, lr}
 8007a28:	4604      	mov	r4, r0
 8007a2a:	d051      	beq.n	8007ad0 <_reclaim_reent+0xb0>
 8007a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a2e:	b143      	cbz	r3, 8007a42 <_reclaim_reent+0x22>
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d14a      	bne.n	8007acc <_reclaim_reent+0xac>
 8007a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a38:	6819      	ldr	r1, [r3, #0]
 8007a3a:	b111      	cbz	r1, 8007a42 <_reclaim_reent+0x22>
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 f857 	bl	8007af0 <_free_r>
 8007a42:	6961      	ldr	r1, [r4, #20]
 8007a44:	b111      	cbz	r1, 8007a4c <_reclaim_reent+0x2c>
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 f852 	bl	8007af0 <_free_r>
 8007a4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a4e:	b111      	cbz	r1, 8007a56 <_reclaim_reent+0x36>
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 f84d 	bl	8007af0 <_free_r>
 8007a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a58:	b111      	cbz	r1, 8007a60 <_reclaim_reent+0x40>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f848 	bl	8007af0 <_free_r>
 8007a60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a62:	b111      	cbz	r1, 8007a6a <_reclaim_reent+0x4a>
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 f843 	bl	8007af0 <_free_r>
 8007a6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a6c:	b111      	cbz	r1, 8007a74 <_reclaim_reent+0x54>
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f83e 	bl	8007af0 <_free_r>
 8007a74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a76:	b111      	cbz	r1, 8007a7e <_reclaim_reent+0x5e>
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f839 	bl	8007af0 <_free_r>
 8007a7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a80:	b111      	cbz	r1, 8007a88 <_reclaim_reent+0x68>
 8007a82:	4620      	mov	r0, r4
 8007a84:	f000 f834 	bl	8007af0 <_free_r>
 8007a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a8a:	b111      	cbz	r1, 8007a92 <_reclaim_reent+0x72>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 f82f 	bl	8007af0 <_free_r>
 8007a92:	69a3      	ldr	r3, [r4, #24]
 8007a94:	b1e3      	cbz	r3, 8007ad0 <_reclaim_reent+0xb0>
 8007a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4798      	blx	r3
 8007a9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a9e:	b1b9      	cbz	r1, 8007ad0 <_reclaim_reent+0xb0>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aa6:	f7ff bfad 	b.w	8007a04 <cleanup_glue>
 8007aaa:	5949      	ldr	r1, [r1, r5]
 8007aac:	b941      	cbnz	r1, 8007ac0 <_reclaim_reent+0xa0>
 8007aae:	3504      	adds	r5, #4
 8007ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab2:	2d80      	cmp	r5, #128	; 0x80
 8007ab4:	68d9      	ldr	r1, [r3, #12]
 8007ab6:	d1f8      	bne.n	8007aaa <_reclaim_reent+0x8a>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f819 	bl	8007af0 <_free_r>
 8007abe:	e7ba      	b.n	8007a36 <_reclaim_reent+0x16>
 8007ac0:	680e      	ldr	r6, [r1, #0]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f814 	bl	8007af0 <_free_r>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	e7ef      	b.n	8007aac <_reclaim_reent+0x8c>
 8007acc:	2500      	movs	r5, #0
 8007ace:	e7ef      	b.n	8007ab0 <_reclaim_reent+0x90>
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000014 	.word	0x20000014

08007ad8 <__malloc_lock>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__malloc_lock+0x8>)
 8007ada:	f7ff bf7b 	b.w	80079d4 <__retarget_lock_acquire_recursive>
 8007ade:	bf00      	nop
 8007ae0:	20004c7c 	.word	0x20004c7c

08007ae4 <__malloc_unlock>:
 8007ae4:	4801      	ldr	r0, [pc, #4]	; (8007aec <__malloc_unlock+0x8>)
 8007ae6:	f7ff bf76 	b.w	80079d6 <__retarget_lock_release_recursive>
 8007aea:	bf00      	nop
 8007aec:	20004c7c 	.word	0x20004c7c

08007af0 <_free_r>:
 8007af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007af2:	2900      	cmp	r1, #0
 8007af4:	d044      	beq.n	8007b80 <_free_r+0x90>
 8007af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007afa:	9001      	str	r0, [sp, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f1a1 0404 	sub.w	r4, r1, #4
 8007b02:	bfb8      	it	lt
 8007b04:	18e4      	addlt	r4, r4, r3
 8007b06:	f7ff ffe7 	bl	8007ad8 <__malloc_lock>
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <_free_r+0x94>)
 8007b0c:	9801      	ldr	r0, [sp, #4]
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	b933      	cbnz	r3, 8007b20 <_free_r+0x30>
 8007b12:	6063      	str	r3, [r4, #4]
 8007b14:	6014      	str	r4, [r2, #0]
 8007b16:	b003      	add	sp, #12
 8007b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b1c:	f7ff bfe2 	b.w	8007ae4 <__malloc_unlock>
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d908      	bls.n	8007b36 <_free_r+0x46>
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	1961      	adds	r1, r4, r5
 8007b28:	428b      	cmp	r3, r1
 8007b2a:	bf01      	itttt	eq
 8007b2c:	6819      	ldreq	r1, [r3, #0]
 8007b2e:	685b      	ldreq	r3, [r3, #4]
 8007b30:	1949      	addeq	r1, r1, r5
 8007b32:	6021      	streq	r1, [r4, #0]
 8007b34:	e7ed      	b.n	8007b12 <_free_r+0x22>
 8007b36:	461a      	mov	r2, r3
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	b10b      	cbz	r3, 8007b40 <_free_r+0x50>
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d9fa      	bls.n	8007b36 <_free_r+0x46>
 8007b40:	6811      	ldr	r1, [r2, #0]
 8007b42:	1855      	adds	r5, r2, r1
 8007b44:	42a5      	cmp	r5, r4
 8007b46:	d10b      	bne.n	8007b60 <_free_r+0x70>
 8007b48:	6824      	ldr	r4, [r4, #0]
 8007b4a:	4421      	add	r1, r4
 8007b4c:	1854      	adds	r4, r2, r1
 8007b4e:	42a3      	cmp	r3, r4
 8007b50:	6011      	str	r1, [r2, #0]
 8007b52:	d1e0      	bne.n	8007b16 <_free_r+0x26>
 8007b54:	681c      	ldr	r4, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	6053      	str	r3, [r2, #4]
 8007b5a:	4421      	add	r1, r4
 8007b5c:	6011      	str	r1, [r2, #0]
 8007b5e:	e7da      	b.n	8007b16 <_free_r+0x26>
 8007b60:	d902      	bls.n	8007b68 <_free_r+0x78>
 8007b62:	230c      	movs	r3, #12
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	e7d6      	b.n	8007b16 <_free_r+0x26>
 8007b68:	6825      	ldr	r5, [r4, #0]
 8007b6a:	1961      	adds	r1, r4, r5
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	bf04      	itt	eq
 8007b70:	6819      	ldreq	r1, [r3, #0]
 8007b72:	685b      	ldreq	r3, [r3, #4]
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	bf04      	itt	eq
 8007b78:	1949      	addeq	r1, r1, r5
 8007b7a:	6021      	streq	r1, [r4, #0]
 8007b7c:	6054      	str	r4, [r2, #4]
 8007b7e:	e7ca      	b.n	8007b16 <_free_r+0x26>
 8007b80:	b003      	add	sp, #12
 8007b82:	bd30      	pop	{r4, r5, pc}
 8007b84:	20004c80 	.word	0x20004c80

08007b88 <_init>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr

08007b94 <_fini>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr
