
nrf_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800737c  0800737c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  2000007c  08007400  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c04  08007400  00024c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b691  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bf  00000000  00000000  0003b73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00040458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cab  00000000  00000000  00041978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017920  00000000  00000000  00045623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992e1  00000000  00000000  0005cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006394  00000000  00000000  000f6274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007150 	.word	0x08007150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007150 	.word	0x08007150

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 ff10 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f836 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8fe 	bl	8000790 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000594:	f000 f89c 	bl	80006d0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8d0 	bl	800073c <MX_USART1_UART_Init>
//  NRF24_init_TX();
//#else
//  NRF24_init_RX();
//#endif

  testReadWriteSetingd();			// For debug
 800059c:	f000 fd4a 	bl	8001034 <testReadWriteSetingd>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a0:	f003 f9d4 	bl	800394c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semFromNrfIRQ_Pin */
  semFromNrfIRQ_PinHandle = osSemaphoreNew(1, 1, &semFromNrfIRQ_Pin_attributes);
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <main+0x58>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 fac6 	bl	8003b3a <osSemaphoreNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <main+0x5c>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <main+0x60>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x64>)
 80005ba:	f003 fa11 	bl	80039e0 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <main+0x68>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of nrf_task */
  nrf_taskHandle = osThreadNew(Start_nrf_task, NULL, &nrf_task_attributes);
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <main+0x6c>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <main+0x70>)
 80005ca:	f003 fa09 	bl	80039e0 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <main+0x74>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f003 f9de 	bl	8003994 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x54>
 80005da:	bf00      	nop
 80005dc:	080072b8 	.word	0x080072b8
 80005e0:	2000018c 	.word	0x2000018c
 80005e4:	08007270 	.word	0x08007270
 80005e8:	080008fd 	.word	0x080008fd
 80005ec:	20000184 	.word	0x20000184
 80005f0:	08007294 	.word	0x08007294
 80005f4:	0800090d 	.word	0x0800090d
 80005f8:	20000188 	.word	0x20000188

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f006 f8d0 	bl	80067b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xd0>)
 800064a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000670:	2319      	movs	r3, #25
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f9a9 	bl	80019dc <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000690:	f000 f95e 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fc0b 	bl	8001ecc <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f948 	bl	8000950 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI2_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI2_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI2_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI2_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI2_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI2_Init+0x64>)
 8000704:	2218      	movs	r2, #24
 8000706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI2_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI2_Init+0x64>)
 8000722:	f001 fde5 	bl	80022f0 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f910 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000e8 	.word	0x200000e8
 8000738:	40003800 	.word	0x40003800

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f002 fde4 	bl	8003340 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8e7 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000140 	.word	0x20000140
 800078c:	40011000 	.word	0x40011000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b50      	ldr	r3, [pc, #320]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a4f      	ldr	r2, [pc, #316]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b4d      	ldr	r3, [pc, #308]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a48      	ldr	r2, [pc, #288]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b42      	ldr	r3, [pc, #264]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a41      	ldr	r2, [pc, #260]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_GPIO_Init+0x15c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3a      	ldr	r2, [pc, #232]	; (80008ec <MX_GPIO_Init+0x15c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b38      	ldr	r3, [pc, #224]	; (80008ec <MX_GPIO_Init+0x15c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4834      	ldr	r0, [pc, #208]	; (80008f0 <MX_GPIO_Init+0x160>)
 800081e:	f001 f885 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nrf_CE_Pin|nrf_CS_Pin|TEST_OUT_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2138      	movs	r1, #56	; 0x38
 8000826:	4833      	ldr	r0, [pc, #204]	; (80008f4 <MX_GPIO_Init+0x164>)
 8000828:	f001 f880 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	4831      	ldr	r0, [pc, #196]	; (80008f8 <MX_GPIO_Init+0x168>)
 8000834:	f001 f87a 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4827      	ldr	r0, [pc, #156]	; (80008f0 <MX_GPIO_Init+0x160>)
 8000852:	f000 fecf 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4822      	ldr	r0, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x164>)
 800086c:	f000 fec2 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nrf_IRQ_Pin */
  GPIO_InitStruct.Pin = nrf_IRQ_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nrf_IRQ_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <MX_GPIO_Init+0x164>)
 8000886:	f000 feb5 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nrf_CE_Pin nrf_CS_Pin TEST_OUT_Pin */
  GPIO_InitStruct.Pin = nrf_CE_Pin|nrf_CS_Pin|TEST_OUT_Pin;
 800088a:	2338      	movs	r3, #56	; 0x38
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_GPIO_Init+0x164>)
 80008a2:	f000 fea7 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_OUT_Pin */
  GPIO_InitStruct.Pin = DEBUG_OUT_Pin;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x168>)
 80008c0:	f000 fe98 	bl	80015f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2105      	movs	r1, #5
 80008c8:	2007      	movs	r0, #7
 80008ca:	f000 fe69 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fe82 	bl	80015d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	2008      	movs	r0, #8
 80008da:	f000 fe61 	bl	80015a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008de:	2008      	movs	r0, #8
 80008e0:	f000 fe7a 	bl	80015d8 <HAL_NVIC_EnableIRQ>

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
//	  xSemaphoreTake(semFromNrfIRQ_PinHandle ,portMAX_DELAY);
//	  HAL_GPIO_TogglePin(GPIOA, TEST_OUT_Pin);



	  osDelay(100);
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f003 f8fd 	bl	8003b04 <osDelay>
 800090a:	e7fb      	b.n	8000904 <StartDefaultTask+0x8>

0800090c <Start_nrf_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_nrf_task */
void Start_nrf_task(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_nrf_task */
  /* Infinite loop */

	osDelay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f003 f8f4 	bl	8003b04 <osDelay>

	#if NRF_MODE == TX
	  NRF24_init_TX();
 800091c:	f000 f9e2 	bl	8000ce4 <NRF24_init_TX>

	  for(;;)
	  {

#if NRF_MODE == TX
	  NRF24L01_Transmit();
 8000920:	f000 fcc2 	bl	80012a8 <NRF24L01_Transmit>
#else
	  NRF24L01_Receive();
#endif

	  osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f003 f8ed 	bl	8003b04 <osDelay>
	  {
 800092a:	e7f9      	b.n	8000920 <Start_nrf_task+0x14>

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f000 fd57 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40014400 	.word	0x40014400

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x54>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_MspInit+0x54>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x54>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x54>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_MspInit+0x54>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_MspInit+0x54>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fdfd 	bl	80015a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000a0e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a20:	2305      	movs	r3, #5
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_SPI_MspInit+0x8c>)
 8000a2c:	f000 fde2 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40003800 	.word	0x40003800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12c      	bne.n	8000ac0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f003 0310 	and.w	r3, r3, #16
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_UART_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x8c>)
 8000abc:	f000 fd9a 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af2:	6453      	str	r3, [r2, #68]	; 0x44
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_InitTick+0xd0>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fbbe 	bl	800228c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b10:	f001 fba8 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8000b14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xd4>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xd8>)
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_InitTick+0xdc>)
 8000b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_InitTick+0xd8>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_InitTick+0xd8>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_InitTick+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xd8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <HAL_InitTick+0xd8>)
 8000b4c:	f002 f978 	bl	8002e40 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d11b      	bne.n	8000b96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <HAL_InitTick+0xd8>)
 8000b60:	f002 f9c8 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d111      	bne.n	8000b96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fd30 	bl	80015d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d808      	bhi.n	8000b90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2019      	movs	r0, #25
 8000b84:	f000 fd0c 	bl	80015a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xe0>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e002      	b.n	8000b96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20000190 	.word	0x20000190
 8000bb0:	40014400 	.word	0x40014400
 8000bb4:	2000000c 	.word	0x2000000c

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f000 fed3 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nrf_IRQ_Pin);
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f000 fecc 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c06:	f002 f9d7 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000190 	.word	0x20000190

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f005 fd7a 	bl	800673c <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20010000 	.word	0x20010000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200001d8 	.word	0x200001d8
 8000c7c:	20004c08 	.word	0x20004c08

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <DelayMicro>:
void NRF24L01_RX_Mode(void);
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes);

// -------------------------------------------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 7;   // 9
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <DelayMicro+0x38>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	099b      	lsrs	r3, r3, #6
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <DelayMicro+0x3c>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	0a9b      	lsrs	r3, r3, #10
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	607b      	str	r3, [r7, #4]

	/* Wait till done */
	while (micros--) ;
 8000cc2:	bf00      	nop
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1fa      	bne.n	8000cc4 <DelayMicro+0x20>
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	02659117 	.word	0x02659117

08000ce4 <NRF24_init_TX>:
// -------------------------------------------------------------------------------------
void NRF24_init_TX(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	 CE_RESET;
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2108      	movs	r1, #8
 8000cec:	4825      	ldr	r0, [pc, #148]	; (8000d84 <NRF24_init_TX+0xa0>)
 8000cee:	f000 fe1d 	bl	800192c <HAL_GPIO_WritePin>
	 //DelayMicro(5000);
	 osDelay(5);
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f002 ff06 	bl	8003b04 <osDelay>
	// HAL_Delay(5);
	 NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000cf8:	210a      	movs	r1, #10
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f87c 	bl	8000df8 <NRF24_WriteReg>
	 //DelayMicro(5000);
//	 HAL_Delay(5);
	 osDelay(5);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f002 feff 	bl	8003b04 <osDelay>

	 NRF24_WriteReg(EN_AA, 0x01); 			// Enable pipe 0
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 f875 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe 0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2002      	movs	r0, #2
 8000d12:	f000 f871 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000d16:	2101      	movs	r1, #1
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f86d 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(SETUP_RETR, 0x5F);		// 1500us, 15 retrans
 8000d1e:	215f      	movs	r1, #95	; 0x5f
 8000d20:	2004      	movs	r0, #4
 8000d22:	f000 f869 	bl	8000df8 <NRF24_WriteReg>

	 NRF24_ToggleFeatures();
 8000d26:	f000 f895 	bl	8000e54 <NRF24_ToggleFeatures>

	 NRF24_WriteReg(FEATURE, 0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	201d      	movs	r0, #29
 8000d2e:	f000 f863 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(DYNPD, 0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	201c      	movs	r0, #28
 8000d36:	f000 f85f 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(STATUS, 0x70);			// Reset flags for IRQ
 8000d3a:	2170      	movs	r1, #112	; 0x70
 8000d3c:	2007      	movs	r0, #7
 8000d3e:	f000 f85b 	bl	8000df8 <NRF24_WriteReg>
	 NRF24_WriteReg(RF_CH, 76); 			//  2476 MHz
 8000d42:	214c      	movs	r1, #76	; 0x4c
 8000d44:	2005      	movs	r0, #5
 8000d46:	f000 f857 	bl	8000df8 <NRF24_WriteReg>
	 //NRF24_WriteReg(RF_SETUP, 0x06);		// TX_PWR:0dBm, Datarate:1Mbps      - WAS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	 NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps	- New version
 8000d4a:	2126      	movs	r1, #38	; 0x26
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f000 f853 	bl	8000df8 <NRF24_WriteReg>

	 NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000d52:	2203      	movs	r2, #3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <NRF24_init_TX+0xa4>)
 8000d56:	2010      	movs	r0, #16
 8000d58:	f000 f8d0 	bl	8000efc <NRF24_Write_Buf>

	 NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	490a      	ldr	r1, [pc, #40]	; (8000d88 <NRF24_init_TX+0xa4>)
 8000d60:	200a      	movs	r0, #10
 8000d62:	f000 f8cb 	bl	8000efc <NRF24_Write_Buf>

	 NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);	 //Number of bytes in RX payload in data pipe 0
 8000d66:	2105      	movs	r1, #5
 8000d68:	2011      	movs	r0, #17
 8000d6a:	f000 f845 	bl	8000df8 <NRF24_WriteReg>

	 NRF24L01_RX_Mode();
 8000d6e:	f000 f93b 	bl	8000fe8 <NRF24L01_RX_Mode>
	 LED_OFF;
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <NRF24_init_TX+0xa8>)
 8000d7a:	f000 fdd7 	bl	800192c <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020000 	.word	0x40020000
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	40020800 	.word	0x40020800

08000d90 <NRF24_ReadReg>:
	 NRF24L01_RX_Mode();
	 LED_OFF;
}
// -------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	uint8_t dt=0, cmd;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
	CS_ON;
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	4813      	ldr	r0, [pc, #76]	; (8000df0 <NRF24_ReadReg+0x60>)
 8000da4:	f000 fdc2 	bl	800192c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, &addr, &dt, 1, 1000);
 8000da8:	f107 020f 	add.w	r2, r7, #15
 8000dac:	1df9      	adds	r1, r7, #7
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	480f      	ldr	r0, [pc, #60]	; (8000df4 <NRF24_ReadReg+0x64>)
 8000db8:	f001 fd70 	bl	800289c <HAL_SPI_TransmitReceive>

	if (addr != STATUS)		//если адрес равен адрес регистра статус то и возварщаем его состояние
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d00c      	beq.n	8000ddc <NRF24_ReadReg+0x4c>
	{
		cmd = 0xFF;
 8000dc2:	23ff      	movs	r3, #255	; 0xff
 8000dc4:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_TransmitReceive(&hspi2, &cmd, &dt, 1, 1000);
 8000dc6:	f107 020f 	add.w	r2, r7, #15
 8000dca:	f107 010e 	add.w	r1, r7, #14
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <NRF24_ReadReg+0x64>)
 8000dd8:	f001 fd60 	bl	800289c <HAL_SPI_TransmitReceive>
	}

	CS_OFF;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2110      	movs	r1, #16
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <NRF24_ReadReg+0x60>)
 8000de2:	f000 fda3 	bl	800192c <HAL_GPIO_WritePin>

	return dt;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40020000 	.word	0x40020000
 8000df4:	200000e8 	.word	0x200000e8

08000df8 <NRF24_WriteReg>:
// -------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;//включим бит записи в адрес
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <NRF24_WriteReg+0x54>)
 8000e18:	f000 fd88 	bl	800192c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);	//отправим адрес в шину
 8000e1c:	1df9      	adds	r1, r7, #7
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	2201      	movs	r2, #1
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <NRF24_WriteReg+0x58>)
 8000e26:	f001 faec 	bl	8002402 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&dt,1,1000);	//отправим данные в шину
 8000e2a:	1db9      	adds	r1, r7, #6
 8000e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e30:	2201      	movs	r2, #1
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <NRF24_WriteReg+0x58>)
 8000e34:	f001 fae5 	bl	8002402 <HAL_SPI_Transmit>

	CS_OFF;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <NRF24_WriteReg+0x54>)
 8000e3e:	f000 fd75 	bl	800192c <HAL_GPIO_WritePin>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	200000e8 	.word	0x200000e8

08000e54 <NRF24_ToggleFeatures>:
// -------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {ACTIVATE};
 8000e5a:	2350      	movs	r3, #80	; 0x50
 8000e5c:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2110      	movs	r1, #16
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <NRF24_ToggleFeatures+0x4c>)
 8000e64:	f000 fd62 	bl	800192c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000e68:	1d39      	adds	r1, r7, #4
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	2201      	movs	r2, #1
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <NRF24_ToggleFeatures+0x50>)
 8000e72:	f001 fac6 	bl	8002402 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff ff14 	bl	8000ca4 <DelayMicro>

	dt[0] = 0x73;
 8000e7c:	2373      	movs	r3, #115	; 0x73
 8000e7e:	713b      	strb	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000e80:	1d39      	adds	r1, r7, #4
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	2201      	movs	r2, #1
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <NRF24_ToggleFeatures+0x50>)
 8000e8a:	f001 faba 	bl	8002402 <HAL_SPI_Transmit>
	CS_OFF;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2110      	movs	r1, #16
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <NRF24_ToggleFeatures+0x4c>)
 8000e94:	f000 fd4a 	bl	800192c <HAL_GPIO_WritePin>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	200000e8 	.word	0x200000e8

08000ea8 <NRF24_Read_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <NRF24_Read_Buf+0x4c>)
 8000ebe:	f000 fd35 	bl	800192c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8000ec2:	1df9      	adds	r1, r7, #7
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	2201      	movs	r2, #1
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <NRF24_Read_Buf+0x50>)
 8000ecc:	f001 fa99 	bl	8002402 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <NRF24_Read_Buf+0x50>)
 8000edc:	f001 fbcd 	bl	800267a <HAL_SPI_Receive>

	CS_OFF;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <NRF24_Read_Buf+0x4c>)
 8000ee6:	f000 fd21 	bl	800192c <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	200000e8 	.word	0x200000e8

08000efc <NRF24_Write_Buf>:
// -------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	addr |= W_REGISTER;									//включим бит записи в адрес
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	71fb      	strb	r3, [r7, #7]

	CS_ON;
 8000f16:	2200      	movs	r2, #0
 8000f18:	2110      	movs	r1, #16
 8000f1a:	480f      	ldr	r0, [pc, #60]	; (8000f58 <NRF24_Write_Buf+0x5c>)
 8000f1c:	f000 fd06 	bl	800192c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&addr,1,1000);				//отправим адрес в шину
 8000f20:	1df9      	adds	r1, r7, #7
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	2201      	movs	r2, #1
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <NRF24_Write_Buf+0x60>)
 8000f2a:	f001 fa6a 	bl	8002402 <HAL_SPI_Transmit>

	DelayMicro(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff feb8 	bl	8000ca4 <DelayMicro>

	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);			//отправим данные в буфер
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <NRF24_Write_Buf+0x60>)
 8000f40:	f001 fa5f 	bl	8002402 <HAL_SPI_Transmit>

	CS_OFF;
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <NRF24_Write_Buf+0x5c>)
 8000f4a:	f000 fcef 	bl	800192c <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	200000e8 	.word	0x200000e8

08000f60 <NRF24_FlushRX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushRX(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_RX};
 8000f66:	23e2      	movs	r3, #226	; 0xe2
 8000f68:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <NRF24_FlushRX+0x3c>)
 8000f70:	f000 fcdc 	bl	800192c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000f74:	1d39      	adds	r1, r7, #4
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <NRF24_FlushRX+0x40>)
 8000f7e:	f001 fa40 	bl	8002402 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fe8e 	bl	8000ca4 <DelayMicro>
	CS_OFF;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <NRF24_FlushRX+0x3c>)
 8000f8e:	f000 fccd 	bl	800192c <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	200000e8 	.word	0x200000e8

08000fa4 <NRF24_FlushTX>:
// -------------------------------------------------------------------------------------
static void NRF24_FlushTX(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t dt[1] = {FLUSH_TX};
 8000faa:	23e1      	movs	r3, #225	; 0xe1
 8000fac:	713b      	strb	r3, [r7, #4]

	CS_ON;
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <NRF24_FlushTX+0x3c>)
 8000fb4:	f000 fcba 	bl	800192c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,dt,1,1000);
 8000fb8:	1d39      	adds	r1, r7, #4
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <NRF24_FlushTX+0x40>)
 8000fc2:	f001 fa1e 	bl	8002402 <HAL_SPI_Transmit>
	DelayMicro(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fe6c 	bl	8000ca4 <DelayMicro>
	CS_OFF;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2110      	movs	r1, #16
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <NRF24_FlushTX+0x3c>)
 8000fd2:	f000 fcab 	bl	800192c <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	200000e8 	.word	0x200000e8

08000fe8 <NRF24L01_RX_Mode>:
// -------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	uint8_t regval=0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	regval = NRF24_ReadReg(CONFIG);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fecc 	bl	8000d90 <NRF24_ReadReg>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]

	regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f043 0303 	orr.w	r3, r3, #3
 8001002:	71fb      	strb	r3, [r7, #7]

	NRF24_WriteReg(CONFIG, regval);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4619      	mov	r1, r3
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fef5 	bl	8000df8 <NRF24_WriteReg>
	CE_SET;
 800100e:	2201      	movs	r2, #1
 8001010:	2108      	movs	r1, #8
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <NRF24L01_RX_Mode+0x48>)
 8001014:	f000 fc8a 	bl	800192c <HAL_GPIO_WritePin>

	DelayMicro(150);
 8001018:	2096      	movs	r0, #150	; 0x96
 800101a:	f7ff fe43 	bl	8000ca4 <DelayMicro>

	// Flush buffers
	NRF24_FlushRX();
 800101e:	f7ff ff9f 	bl	8000f60 <NRF24_FlushRX>
	NRF24_FlushTX();
 8001022:	f7ff ffbf 	bl	8000fa4 <NRF24_FlushTX>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000

08001034 <testReadWriteSetingd>:
// -------------------------------------------------------------------------------------
void testReadWriteSetingd(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af02      	add	r7, sp, #8
	uint8_t dt_reg=0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

	dt_reg = NRF24_ReadReg(CONFIG);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fea6 	bl	8000d90 <NRF24_ReadReg>
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"CONFIG: 0x%02Xrn",dt_reg);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	461a      	mov	r2, r3
 800104c:	492c      	ldr	r1, [pc, #176]	; (8001100 <testReadWriteSetingd+0xcc>)
 800104e:	482d      	ldr	r0, [pc, #180]	; (8001104 <testReadWriteSetingd+0xd0>)
 8001050:	f005 fcc4 	bl	80069dc <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);

	dt_reg = NRF24_ReadReg(EN_AA);
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff fe9b 	bl	8000d90 <NRF24_ReadReg>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"EN_AA: 0x%02Xrn",dt_reg);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	461a      	mov	r2, r3
 8001062:	4929      	ldr	r1, [pc, #164]	; (8001108 <testReadWriteSetingd+0xd4>)
 8001064:	4827      	ldr	r0, [pc, #156]	; (8001104 <testReadWriteSetingd+0xd0>)
 8001066:	f005 fcb9 	bl	80069dc <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(EN_RXADDR);
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff fe90 	bl	8000d90 <NRF24_ReadReg>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"EN_RXADDR: 0x%02Xrn",dt_reg);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	461a      	mov	r2, r3
 8001078:	4924      	ldr	r1, [pc, #144]	; (800110c <testReadWriteSetingd+0xd8>)
 800107a:	4822      	ldr	r0, [pc, #136]	; (8001104 <testReadWriteSetingd+0xd0>)
 800107c:	f005 fcae 	bl	80069dc <siprintf>

	//  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(STATUS);
 8001080:	2007      	movs	r0, #7
 8001082:	f7ff fe85 	bl	8000d90 <NRF24_ReadReg>
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"STATUS: 0x%02Xrn",dt_reg);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	461a      	mov	r2, r3
 800108e:	4920      	ldr	r1, [pc, #128]	; (8001110 <testReadWriteSetingd+0xdc>)
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <testReadWriteSetingd+0xd0>)
 8001092:	f005 fca3 	bl	80069dc <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	dt_reg = NRF24_ReadReg(RF_SETUP);
 8001096:	2006      	movs	r0, #6
 8001098:	f7ff fe7a 	bl	8000d90 <NRF24_ReadReg>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
	sprintf(str1,"RF_SETUP: 0x%02Xrn",dt_reg);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	461a      	mov	r2, r3
 80010a4:	491b      	ldr	r1, [pc, #108]	; (8001114 <testReadWriteSetingd+0xe0>)
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <testReadWriteSetingd+0xd0>)
 80010a8:	f005 fc98 	bl	80069dc <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);

    NRF24_Read_Buf(TX_ADDR,buf1,3);
 80010ac:	2203      	movs	r2, #3
 80010ae:	491a      	ldr	r1, [pc, #104]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010b0:	2010      	movs	r0, #16
 80010b2:	f7ff fef9 	bl	8000ea8 <NRF24_Read_Buf>
	sprintf(str1,"TX_ADDR: 0x%02X, 0x%02X, 0x%02Xrn",buf1[0],buf1[1],buf1[2]);
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	4914      	ldr	r1, [pc, #80]	; (800111c <testReadWriteSetingd+0xe8>)
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <testReadWriteSetingd+0xd0>)
 80010ce:	f005 fc85 	bl	80069dc <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 80010d2:	2203      	movs	r2, #3
 80010d4:	4910      	ldr	r1, [pc, #64]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010d6:	200a      	movs	r0, #10
 80010d8:	f7ff fee6 	bl	8000ea8 <NRF24_Read_Buf>
	sprintf(str1,"RX_ADDR: 0x%02X, 0x%02X, 0x%02Xrn",buf1[0],buf1[1],buf1[2]);
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <testReadWriteSetingd+0xe4>)
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	460b      	mov	r3, r1
 80010f0:	490b      	ldr	r1, [pc, #44]	; (8001120 <testReadWriteSetingd+0xec>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <testReadWriteSetingd+0xd0>)
 80010f4:	f005 fc72 	bl	80069dc <siprintf>

//	  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);



}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	08007194 	.word	0x08007194
 8001104:	20000098 	.word	0x20000098
 8001108:	080071a8 	.word	0x080071a8
 800110c:	080071b8 	.word	0x080071b8
 8001110:	080071cc 	.word	0x080071cc
 8001114:	080071e0 	.word	0x080071e0
 8001118:	200000c0 	.word	0x200000c0
 800111c:	080071f4 	.word	0x080071f4
 8001120:	08007218 	.word	0x08007218

08001124 <NRF24L01_TX_Mode>:
	DelayMicro(1000);

}
// -------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800112c:	2203      	movs	r2, #3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <NRF24L01_TX_Mode+0x2c>)
 8001130:	2010      	movs	r0, #16
 8001132:	f7ff fee3 	bl	8000efc <NRF24_Write_Buf>
	CE_RESET;
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <NRF24L01_TX_Mode+0x30>)
 800113c:	f000 fbf6 	bl	800192c <HAL_GPIO_WritePin>

	// Flush buffers
	NRF24_FlushRX();
 8001140:	f7ff ff0e 	bl	8000f60 <NRF24_FlushRX>
	NRF24_FlushTX();
 8001144:	f7ff ff2e 	bl	8000fa4 <NRF24_FlushTX>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000004 	.word	0x20000004
 8001154:	40020000 	.word	0x40020000

08001158 <NRF24_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	CE_RESET;
 8001168:	2200      	movs	r2, #0
 800116a:	2108      	movs	r1, #8
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <NRF24_Transmit+0x64>)
 800116e:	f000 fbdd 	bl	800192c <HAL_GPIO_WritePin>
	CS_ON;
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <NRF24_Transmit+0x64>)
 8001178:	f000 fbd8 	bl	800192c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,&addr,1,1000);			// Send address in buss
 800117c:	1df9      	adds	r1, r7, #7
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	2201      	movs	r2, #1
 8001184:	480e      	ldr	r0, [pc, #56]	; (80011c0 <NRF24_Transmit+0x68>)
 8001186:	f001 f93c 	bl	8002402 <HAL_SPI_Transmit>
	DelayMicro(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fd8a 	bl	8000ca4 <DelayMicro>
	HAL_SPI_Transmit(&hspi2,pBuf,bytes,1000);		// Send data in buss
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	b29a      	uxth	r2, r3
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <NRF24_Transmit+0x68>)
 800119c:	f001 f931 	bl	8002402 <HAL_SPI_Transmit>

	CS_OFF;
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <NRF24_Transmit+0x64>)
 80011a6:	f000 fbc1 	bl	800192c <HAL_GPIO_WritePin>
	CE_SET;
 80011aa:	2201      	movs	r2, #1
 80011ac:	2108      	movs	r1, #8
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <NRF24_Transmit+0x64>)
 80011b0:	f000 fbbc 	bl	800192c <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020000 	.word	0x40020000
 80011c0:	200000e8 	.word	0x200000e8

080011c4 <NRF24L01_Send>:
// -------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint8_t status=0x00, regval=0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]

	NRF24L01_TX_Mode(pBuf);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffa5 	bl	8001124 <NRF24L01_TX_Mode>

	regval = NRF24_ReadReg(CONFIG);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fdd8 	bl	8000d90 <NRF24_ReadReg>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73bb      	strb	r3, [r7, #14]
	regval |= (1<<PWR_UP);
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	73bb      	strb	r3, [r7, #14]
	regval &= ~(1<<PRIM_RX);							// Turn on TX mode
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	73bb      	strb	r3, [r7, #14]

	NRF24_WriteReg(CONFIG,regval);
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	4619      	mov	r1, r3
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdfd 	bl	8000df8 <NRF24_WriteReg>
	DelayMicro(150);
 80011fe:	2096      	movs	r0, #150	; 0x96
 8001200:	f7ff fd50 	bl	8000ca4 <DelayMicro>

	uint8_t dt_reg = NRF24_ReadReg(CONFIG);				// For debug
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fdc3 	bl	8000d90 <NRF24_ReadReg>
 800120a:	4603      	mov	r3, r0
 800120c:	737b      	strb	r3, [r7, #13]

	NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);
 800120e:	2205      	movs	r2, #5
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	20a0      	movs	r0, #160	; 0xa0
 8001214:	f7ff ffa0 	bl	8001158 <NRF24_Transmit>
	CE_SET;
 8001218:	2201      	movs	r2, #1
 800121a:	2108      	movs	r1, #8
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <NRF24L01_Send+0xdc>)
 800121e:	f000 fb85 	bl	800192c <HAL_GPIO_WritePin>
	DelayMicro(15); 			// minimum 10us high pulse (Page 21)
 8001222:	200f      	movs	r0, #15
 8001224:	f7ff fd3e 	bl	8000ca4 <DelayMicro>
	CE_RESET;
 8001228:	2200      	movs	r2, #0
 800122a:	2108      	movs	r1, #8
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <NRF24L01_Send+0xdc>)
 800122e:	f000 fb7d 	bl	800192c <HAL_GPIO_WritePin>

	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8001232:	bf00      	nop
 8001234:	2104      	movs	r1, #4
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <NRF24L01_Send+0xdc>)
 8001238:	f000 fb60 	bl	80018fc <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d0f8      	beq.n	8001234 <NRF24L01_Send+0x70>

	HAL_GPIO_TogglePin(GPIOA, TEST_OUT_Pin);    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< for debug latency
 8001242:	2120      	movs	r1, #32
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <NRF24L01_Send+0xdc>)
 8001246:	f000 fb8a 	bl	800195e <HAL_GPIO_TogglePin>

	status = NRF24_ReadReg(STATUS);
 800124a:	2007      	movs	r0, #7
 800124c:	f7ff fda0 	bl	8000d90 <NRF24_ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]

	if(status&TX_DS) 			//tx_ds == 0x20   If data was transmitted
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <NRF24L01_Send+0xae>
	{
	    LED_TGL;
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4810      	ldr	r0, [pc, #64]	; (80012a4 <NRF24L01_Send+0xe0>)
 8001264:	f000 fb7b 	bl	800195e <HAL_GPIO_TogglePin>
	    NRF24_WriteReg(STATUS, 0x20);
 8001268:	2120      	movs	r1, #32
 800126a:	2007      	movs	r0, #7
 800126c:	f7ff fdc4 	bl	8000df8 <NRF24_WriteReg>
 8001270:	e00a      	b.n	8001288 <NRF24L01_Send+0xc4>
	}
	else if(status&MAX_RT)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <NRF24L01_Send+0xc4>
	{
		NRF24_WriteReg(STATUS, 0x10);
 800127c:	2110      	movs	r1, #16
 800127e:	2007      	movs	r0, #7
 8001280:	f7ff fdba 	bl	8000df8 <NRF24_WriteReg>
		NRF24_FlushTX();
 8001284:	f7ff fe8e 	bl	8000fa4 <NRF24_FlushTX>
	}

	regval = NRF24_ReadReg(OBSERVE_TX);
 8001288:	2008      	movs	r0, #8
 800128a:	f7ff fd81 	bl	8000d90 <NRF24_ReadReg>
 800128e:	4603      	mov	r3, r0
 8001290:	73bb      	strb	r3, [r7, #14]

	NRF24L01_RX_Mode();
 8001292:	f7ff fea9 	bl	8000fe8 <NRF24L01_RX_Mode>

	return regval;
 8001296:	7bbb      	ldrb	r3, [r7, #14]

}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020800 	.word	0x40020800

080012a8 <NRF24L01_Transmit>:
// -------------------------------------------------------------------------------------
void NRF24L01_Transmit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt;
	static uint16_t i=1, retr_cnt_full;

//	HAL_Delay(500);
	osDelay(500);
 80012ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b2:	f002 fc27 	bl	8003b04 <osDelay>
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <NRF24L01_Transmit+0x94>)
 80012b8:	881b      	ldrh	r3, [r3, #0]

	memcpy(buf1,(uint8_t*)&i,2);
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <NRF24L01_Transmit+0x98>)
 80012bc:	8013      	strh	r3, [r2, #0]

	if(retr_cnt_full>999)
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <NRF24L01_Transmit+0x9c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012c6:	d303      	bcc.n	80012d0 <NRF24L01_Transmit+0x28>
	{
		retr_cnt_full=999;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <NRF24L01_Transmit+0x9c>)
 80012ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ce:	801a      	strh	r2, [r3, #0]
	}
	memcpy(buf1+2,(uint8_t*)&retr_cnt_full,2);
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <NRF24L01_Transmit+0xa0>)
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <NRF24L01_Transmit+0x9c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	8013      	strh	r3, [r2, #0]


	char test_tx_data[] = "123\n\r";
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <NRF24L01_Transmit+0xa4>)
 80012da:	463b      	mov	r3, r7
 80012dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e0:	6018      	str	r0, [r3, #0]
 80012e2:	3304      	adds	r3, #4
 80012e4:	8019      	strh	r1, [r3, #0]

	dt = NRF24L01_Send(test_tx_data);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff6b 	bl	80011c4 <NRF24L01_Send>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <NRF24L01_Transmit+0xa8>)
 80012f4:	701a      	strb	r2, [r3, #0]
	//dt = NRF24L01_Send(buf1);
	retr_cnt = dt & 0x0F;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <NRF24L01_Transmit+0xa8>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <NRF24L01_Transmit+0xac>)
 8001302:	701a      	strb	r2, [r3, #0]

	i++;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <NRF24L01_Transmit+0x94>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <NRF24L01_Transmit+0x94>)
 800130e:	801a      	strh	r2, [r3, #0]
	retr_cnt_full += retr_cnt;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <NRF24L01_Transmit+0xac>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <NRF24L01_Transmit+0x9c>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <NRF24L01_Transmit+0x9c>)
 8001320:	801a      	strh	r2, [r3, #0]

	if(i>=999)
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <NRF24L01_Transmit+0x94>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	f240 32e6 	movw	r2, #998	; 0x3e6
 800132a:	4293      	cmp	r3, r2
 800132c:	d902      	bls.n	8001334 <NRF24L01_Transmit+0x8c>
	{
		i=1;
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <NRF24L01_Transmit+0x94>)
 8001330:	2201      	movs	r2, #1
 8001332:	801a      	strh	r2, [r3, #0]
	}
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000008 	.word	0x20000008
 8001340:	200000c0 	.word	0x200000c0
 8001344:	200001dc 	.word	0x200001dc
 8001348:	200000c2 	.word	0x200000c2
 800134c:	0800723c 	.word	0x0800723c
 8001350:	200001de 	.word	0x200001de
 8001354:	200001df 	.word	0x200001df

08001358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001382:	f7ff fc7d 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f005 f9df 	bl	8006748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff f8fb 	bl	8000584 <main>
  bx  lr    
 800138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800139c:	08007384 	.word	0x08007384
  ldr r2, =_sbss
 80013a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013a4:	20004c04 	.word	0x20004c04

080013a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f8d8 	bl	800158a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f7ff fb7a 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fabc 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000010 	.word	0x20000010
 8001414:	200001e0 	.word	0x200001e0

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200001e0 	.word	0x200001e0

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff4c 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b2:	f7ff ff61 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f7ff ffb1 	bl	8001524 <NVIC_EncodePriority>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff80 	bl	80014d0 <__NVIC_SetPriority>
}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff54 	bl	8001494 <__NVIC_EnableIRQ>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e159      	b.n	80018c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8148 	bne.w	80018be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a2 	beq.w	80018be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_GPIO_Init+0x2e8>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_GPIO_Init+0x2e8>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b54      	ldr	r3, [pc, #336]	; (80018dc <HAL_GPIO_Init+0x2e8>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x2ec>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <HAL_GPIO_Init+0x2f0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x202>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2f4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x1fe>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a47      	ldr	r2, [pc, #284]	; (80018ec <HAL_GPIO_Init+0x2f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x1fa>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a46      	ldr	r2, [pc, #280]	; (80018f0 <HAL_GPIO_Init+0x2fc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x1f6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_GPIO_Init+0x300>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x1f2>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x204>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x2ec>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_GPIO_Init+0x304>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x304>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_GPIO_Init+0x304>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_GPIO_Init+0x304>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_GPIO_Init+0x304>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188e:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_GPIO_Init+0x304>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_GPIO_Init+0x304>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_GPIO_Init+0x304>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f aea2 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e001      	b.n	800191e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	041a      	lsls	r2, r3, #16
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43d9      	mvns	r1, r3
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	400b      	ands	r3, r1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f806 	bl	80019c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e267      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d075      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d00c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d112      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1e:	d10b      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	4b7e      	ldr	r3, [pc, #504]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x108>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d157      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e242      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x74>
 8001a42:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x98>
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6f      	ldr	r2, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6c      	ldr	r2, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xb0>
 8001a74:	4b69      	ldr	r3, [pc, #420]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a68      	ldr	r2, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fcc0 	bl	8001418 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fcbc 	bl	8001418 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e207      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xc0>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fcac 	bl	8001418 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fca8 	bl	8001418 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1f3      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xe8>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d063      	beq.n	8001bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1c7      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x244>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fc61 	bl	8001418 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fc5d 	bl	8001418 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1a8      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x244>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fc40 	bl	8001418 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fc3c 	bl	8001418 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e187      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d036      	beq.n	8001c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x248>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fc20 	bl	8001418 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc1c 	bl	8001418 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e167      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x200>
 8001bfa:	e01b      	b.n	8001c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x248>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fc09 	bl	8001418 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e00e      	b.n	8001c28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fc05 	bl	8001418 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d907      	bls.n	8001c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e150      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ea      	bne.n	8001c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b81      	ldr	r3, [pc, #516]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b77      	ldr	r3, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b74      	ldr	r3, [pc, #464]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a73      	ldr	r2, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fbc5 	bl	8001418 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff fbc1 	bl	8001418 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e10c      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x474>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2ea>
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x324>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x30c>
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5b      	ldr	r2, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x324>
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a54      	ldr	r2, [pc, #336]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fb86 	bl	8001418 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff fb82 	bl	8001418 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0cb      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x334>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fb70 	bl	8001418 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fb6c 	bl	8001418 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0b5      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a1 	beq.w	8001ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d05c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d141      	bne.n	8001e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fb40 	bl	8001418 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fb3c 	bl	8001418 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e087      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	491b      	ldr	r1, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb15 	bl	8001418 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff fb11 	bl	8001418 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e05c      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x416>
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x478>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fafe 	bl	8001418 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff fafa 	bl	8001418 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e045      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_OscConfig+0x470>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x444>
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e038      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x4ec>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d028      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d121      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d11a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0cc      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d90c      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a58      	ldr	r2, [pc, #352]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d044      	beq.n	8001fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e067      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4934      	ldr	r1, [pc, #208]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fa2c 	bl	8001418 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff fa28 	bl	8001418 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04f      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d20c      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_RCC_ClockConfig+0x1b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fd2e 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00
 8002088:	40023800 	.word	0x40023800
 800208c:	080072c8 	.word	0x080072c8
 8002090:	20000000 	.word	0x20000000
 8002094:	2000000c 	.word	0x2000000c

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800209c:	b090      	sub	sp, #64	; 0x40
 800209e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a8:	2300      	movs	r3, #0
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d00d      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x40>
 80020bc:	2b08      	cmp	r3, #8
 80020be:	f200 80a1 	bhi.w	8002204 <HAL_RCC_GetSysClockFreq+0x16c>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ca:	e09b      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_GetSysClockFreq+0x184>)
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020d0:	e09b      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020d6:	e098      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e2:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d028      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	2200      	movs	r2, #0
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	627a      	str	r2, [r7, #36]	; 0x24
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002100:	2100      	movs	r1, #0
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 8002104:	fb03 f201 	mul.w	r2, r3, r1
 8002108:	2300      	movs	r3, #0
 800210a:	fb00 f303 	mul.w	r3, r0, r3
 800210e:	4413      	add	r3, r2
 8002110:	4a43      	ldr	r2, [pc, #268]	; (8002220 <HAL_RCC_GetSysClockFreq+0x188>)
 8002112:	fba0 1202 	umull	r1, r2, r0, r2
 8002116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002118:	460a      	mov	r2, r1
 800211a:	62ba      	str	r2, [r7, #40]	; 0x28
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211e:	4413      	add	r3, r2
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	2200      	movs	r2, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	61fa      	str	r2, [r7, #28]
 800212a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800212e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002132:	f7fe f8a5 	bl	8000280 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4613      	mov	r3, r2
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213e:	e053      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	2200      	movs	r2, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	617a      	str	r2, [r7, #20]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002152:	f04f 0b00 	mov.w	fp, #0
 8002156:	4652      	mov	r2, sl
 8002158:	465b      	mov	r3, fp
 800215a:	f04f 0000 	mov.w	r0, #0
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	0159      	lsls	r1, r3, #5
 8002164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002168:	0150      	lsls	r0, r2, #5
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	ebb2 080a 	subs.w	r8, r2, sl
 8002172:	eb63 090b 	sbc.w	r9, r3, fp
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002182:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002186:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800218a:	ebb2 0408 	subs.w	r4, r2, r8
 800218e:	eb63 0509 	sbc.w	r5, r3, r9
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	00eb      	lsls	r3, r5, #3
 800219c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021a0:	00e2      	lsls	r2, r4, #3
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	eb14 030a 	adds.w	r3, r4, sl
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	eb45 030b 	adc.w	r3, r5, fp
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021be:	4629      	mov	r1, r5
 80021c0:	028b      	lsls	r3, r1, #10
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c8:	4621      	mov	r1, r4
 80021ca:	028a      	lsls	r2, r1, #10
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d2:	2200      	movs	r2, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	60fa      	str	r2, [r7, #12]
 80021d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021dc:	f7fe f850 	bl	8000280 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetSysClockFreq+0x184>)
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800220c:	4618      	mov	r0, r3
 800220e:	3740      	adds	r7, #64	; 0x40
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	00f42400 	.word	0x00f42400
 8002220:	017d7840 	.word	0x017d7840

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	080072d8 	.word	0x080072d8

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	080072d8 	.word	0x080072d8

0800228c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	220f      	movs	r2, #15
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCC_GetClockConfig+0x60>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07b      	b.n	80023fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d108      	bne.n	800231c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002312:	d009      	beq.n	8002328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
 800231a:	e005      	b.n	8002328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fb36 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	ea42 0103 	orr.w	r1, r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0104 	and.w	r1, r3, #4
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f003 0210 	and.w	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_SPI_Transmit+0x22>
 8002420:	2302      	movs	r3, #2
 8002422:	e126      	b.n	8002672 <HAL_SPI_Transmit+0x270>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800242c:	f7fe fff4 	bl	8001418 <HAL_GetTick>
 8002430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002446:	e10b      	b.n	8002660 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_SPI_Transmit+0x52>
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002458:	e102      	b.n	8002660 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a0:	d10f      	bne.n	80024c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d007      	beq.n	80024e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e8:	d14b      	bne.n	8002582 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Transmit+0xf6>
 80024f2:	8afb      	ldrh	r3, [r7, #22]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d13e      	bne.n	8002576 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	881a      	ldrh	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	1c9a      	adds	r2, r3, #2
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800251c:	e02b      	b.n	8002576 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d112      	bne.n	8002552 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	1c9a      	adds	r2, r3, #2
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002550:	e011      	b.n	8002576 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002552:	f7fe ff61 	bl	8001418 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d803      	bhi.n	800256a <HAL_SPI_Transmit+0x168>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002568:	d102      	bne.n	8002570 <HAL_SPI_Transmit+0x16e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002574:	e074      	b.n	8002660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ce      	bne.n	800251e <HAL_SPI_Transmit+0x11c>
 8002580:	e04c      	b.n	800261c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_SPI_Transmit+0x18e>
 800258a:	8afb      	ldrh	r3, [r7, #22]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d140      	bne.n	8002612 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	330c      	adds	r3, #12
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025b6:	e02c      	b.n	8002612 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d113      	bne.n	80025ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80025ec:	e011      	b.n	8002612 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ee:	f7fe ff13 	bl	8001418 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d803      	bhi.n	8002606 <HAL_SPI_Transmit+0x204>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002604:	d102      	bne.n	800260c <HAL_SPI_Transmit+0x20a>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002610:	e026      	b.n	8002660 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1cd      	bne.n	80025b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fbcb 	bl	8002dbc <SPI_EndRxTxTransaction>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e000      	b.n	8002660 <HAL_SPI_Transmit+0x25e>
  }

error:
 800265e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002670:	7ffb      	ldrb	r3, [r7, #31]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b088      	sub	sp, #32
 800267e:	af02      	add	r7, sp, #8
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002696:	d112      	bne.n	80026be <HAL_SPI_Receive+0x44>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10e      	bne.n	80026be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2204      	movs	r2, #4
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f8f1 	bl	800289c <HAL_SPI_TransmitReceive>
 80026ba:	4603      	mov	r3, r0
 80026bc:	e0ea      	b.n	8002894 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_SPI_Receive+0x52>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0e3      	b.n	8002894 <HAL_SPI_Receive+0x21a>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d4:	f7fe fea0 	bl	8001418 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d002      	beq.n	80026ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026ea:	e0ca      	b.n	8002882 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_Receive+0x7e>
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026fc:	e0c1      	b.n	8002882 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2204      	movs	r2, #4
 8002702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	d10f      	bne.n	8002766 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d007      	beq.n	8002784 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d162      	bne.n	8002852 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800278c:	e02e      	b.n	80027ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d115      	bne.n	80027c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f103 020c 	add.w	r2, r3, #12
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c6:	e011      	b.n	80027ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c8:	f7fe fe26 	bl	8001418 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d803      	bhi.n	80027e0 <HAL_SPI_Receive+0x166>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027de:	d102      	bne.n	80027e6 <HAL_SPI_Receive+0x16c>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027ea:	e04a      	b.n	8002882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1cb      	bne.n	800278e <HAL_SPI_Receive+0x114>
 80027f6:	e031      	b.n	800285c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d113      	bne.n	800282e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	b292      	uxth	r2, r2
 8002812:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	1c9a      	adds	r2, r3, #2
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800282c:	e011      	b.n	8002852 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282e:	f7fe fdf3 	bl	8001418 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d803      	bhi.n	8002846 <HAL_SPI_Receive+0x1cc>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002844:	d102      	bne.n	800284c <HAL_SPI_Receive+0x1d2>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002850:	e017      	b.n	8002882 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1cd      	bne.n	80027f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fa45 	bl	8002cf0 <SPI_EndRxTransaction>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
 800287e:	e000      	b.n	8002882 <HAL_SPI_Receive+0x208>
  }

error :
 8002880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08c      	sub	sp, #48	; 0x30
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028aa:	2301      	movs	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x26>
 80028be:	2302      	movs	r3, #2
 80028c0:	e18a      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x33c>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ca:	f7fe fda5 	bl	8001418 <HAL_GetTick>
 80028ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d00f      	beq.n	800290c <HAL_SPI_TransmitReceive+0x70>
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f2:	d107      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x68>
 80028fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002900:	2b04      	cmp	r3, #4
 8002902:	d003      	beq.n	800290c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002904:	2302      	movs	r3, #2
 8002906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800290a:	e15b      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_SPI_TransmitReceive+0x82>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_TransmitReceive+0x82>
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002924:	e14e      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2205      	movs	r2, #5
 8002936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	887a      	ldrh	r2, [r7, #2]
 8002962:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d007      	beq.n	800298e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002996:	d178      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x10a>
 80029a0:	8b7b      	ldrh	r3, [r7, #26]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d166      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ca:	e053      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d11b      	bne.n	8002a12 <HAL_SPI_TransmitReceive+0x176>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d016      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x176>
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d113      	bne.n	8002a12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d119      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x1b8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d014      	beq.n	8002a54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	b292      	uxth	r2, r2
 8002a36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	1c9a      	adds	r2, r3, #2
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a54:	f7fe fce0 	bl	8001418 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d807      	bhi.n	8002a74 <HAL_SPI_TransmitReceive+0x1d8>
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6a:	d003      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a72:	e0a7      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1a6      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x130>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1a1      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x130>
 8002a88:	e07c      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_SPI_TransmitReceive+0x1fc>
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d16b      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002abe:	e057      	b.n	8002b70 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d11c      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x26c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x26c>
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d114      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d119      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x2ae>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d014      	beq.n	8002b4a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b46:	2301      	movs	r3, #1
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b4a:	f7fe fc65 	bl	8001418 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d803      	bhi.n	8002b62 <HAL_SPI_TransmitReceive+0x2c6>
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b60:	d102      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x2cc>
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b6e:	e029      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1a2      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x224>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d19d      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f917 	bl	8002dbc <SPI_EndRxTxTransaction>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ba0:	e010      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e000      	b.n	8002bc4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3730      	adds	r7, #48	; 0x30
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf0:	f7fe fc12 	bl	8001418 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c00:	f7fe fc0a 	bl	8001418 <HAL_GetTick>
 8002c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	015b      	lsls	r3, r3, #5
 8002c0c:	0d1b      	lsrs	r3, r3, #20
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c16:	e054      	b.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1e:	d050      	beq.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c20:	f7fe fbfa 	bl	8001418 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d902      	bls.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13d      	bne.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4e:	d111      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c58:	d004      	beq.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d107      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7c:	d10f      	bne.n	8002c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e017      	b.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d19b      	bne.n	8002c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d04:	d111      	bne.n	8002d2a <SPI_EndRxTransaction+0x3a>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0e:	d004      	beq.n	8002d1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d107      	bne.n	8002d2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d32:	d12a      	bne.n	8002d8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d012      	beq.n	8002d64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ff49 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02d      	beq.n	8002db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e026      	b.n	8002db2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff ff36 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01a      	beq.n	8002db0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e013      	b.n	8002db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff ff23 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e000      	b.n	8002db2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <SPI_EndRxTxTransaction+0x7c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <SPI_EndRxTxTransaction+0x80>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0d5b      	lsrs	r3, r3, #21
 8002dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de6:	d112      	bne.n	8002e0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fef4 	bl	8002be0 <SPI_WaitFlagStateUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e00f      	b.n	8002e2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d0f2      	beq.n	8002e0e <SPI_EndRxTxTransaction+0x52>
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002e2a:	bf00      	nop
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	165e9f81 	.word	0x165e9f81

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f9ca 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e044      	b.n	8002f96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_TIM_Base_Start_IT+0xb8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x6c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x6c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d010      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	e007      	b.n	8002f94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40014000 	.word	0x40014000

08002fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0202 	mvn.w	r2, #2
 8002fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8ee 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8e0 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8f1 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0204 	mvn.w	r2, #4
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8c4 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8b6 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8c7 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f89a 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f88c 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f89d 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2208      	movs	r2, #8
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f870 	bl	80031dc <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f862 	bl	80031c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f873 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0201 	mvn.w	r2, #1
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fbf8 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8e2 	bl	800332c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f838 	bl	8003204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0220 	mvn.w	r2, #32
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8ac 	bl	8003318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <TIM_Base_SetConfig+0xe4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0x38>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x38>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a31      	ldr	r2, [pc, #196]	; (8003300 <TIM_Base_SetConfig+0xe8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x38>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a30      	ldr	r2, [pc, #192]	; (8003304 <TIM_Base_SetConfig+0xec>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <TIM_Base_SetConfig+0xf0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <TIM_Base_SetConfig+0xe4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01b      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d017      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <TIM_Base_SetConfig+0xe8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a21      	ldr	r2, [pc, #132]	; (8003304 <TIM_Base_SetConfig+0xec>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a20      	ldr	r2, [pc, #128]	; (8003308 <TIM_Base_SetConfig+0xf0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <TIM_Base_SetConfig+0xf4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <TIM_Base_SetConfig+0xf8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <TIM_Base_SetConfig+0xfc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <TIM_Base_SetConfig+0xe4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d103      	bne.n	80032e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40000c00 	.word	0x40000c00
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800

08003318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e03f      	b.n	80033d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fb6c 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f829 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b0c0      	sub	sp, #256	; 0x100
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	ea40 0301 	orr.w	r3, r0, r1
 8003404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	431a      	orrs	r2, r3
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003434:	f021 010c 	bic.w	r1, r1, #12
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003442:	430b      	orrs	r3, r1
 8003444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	6999      	ldr	r1, [r3, #24]
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	ea40 0301 	orr.w	r3, r0, r1
 8003462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <UART_SetConfig+0x2cc>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d005      	beq.n	800347c <UART_SetConfig+0xa0>
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8d      	ldr	r3, [pc, #564]	; (80036ac <UART_SetConfig+0x2d0>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d104      	bne.n	8003486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800347c:	f7fe fef2 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003484:	e003      	b.n	800348e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003486:	f7fe fed9 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 800348a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	f040 810c 	bne.w	80036b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034b6:	415b      	adcs	r3, r3
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034be:	4621      	mov	r1, r4
 80034c0:	eb12 0801 	adds.w	r8, r2, r1
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb43 0901 	adc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034ec:	462b      	mov	r3, r5
 80034ee:	eb49 0303 	adc.w	r3, r9, r3
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800350a:	460b      	mov	r3, r1
 800350c:	18db      	adds	r3, r3, r3
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
 8003510:	4613      	mov	r3, r2
 8003512:	eb42 0303 	adc.w	r3, r2, r3
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
 8003518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800351c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003520:	f7fc feae 	bl	8000280 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	011c      	lsls	r4, r3, #4
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	64b9      	str	r1, [r7, #72]	; 0x48
 800354c:	415b      	adcs	r3, r3
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003554:	4641      	mov	r1, r8
 8003556:	eb12 0a01 	adds.w	sl, r2, r1
 800355a:	4649      	mov	r1, r9
 800355c:	eb43 0b01 	adc.w	fp, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800356c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003574:	4692      	mov	sl, r2
 8003576:	469b      	mov	fp, r3
 8003578:	4643      	mov	r3, r8
 800357a:	eb1a 0303 	adds.w	r3, sl, r3
 800357e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003582:	464b      	mov	r3, r9
 8003584:	eb4b 0303 	adc.w	r3, fp, r3
 8003588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800359c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035a0:	460b      	mov	r3, r1
 80035a2:	18db      	adds	r3, r3, r3
 80035a4:	643b      	str	r3, [r7, #64]	; 0x40
 80035a6:	4613      	mov	r3, r2
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035b6:	f7fc fe63 	bl	8000280 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035c2:	fba3 2301 	umull	r2, r3, r3, r1
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	1acb      	subs	r3, r1, r3
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035d8:	fba3 2302 	umull	r2, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e4:	441c      	add	r4, r3
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003600:	415b      	adcs	r3, r3
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6339      	str	r1, [r7, #48]	; 0x30
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800365c:	460b      	mov	r3, r1
 800365e:	18db      	adds	r3, r3, r3
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	4613      	mov	r3, r2
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003672:	f7fc fe05 	bl	8000280 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <UART_SetConfig+0x2d4>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <UART_SetConfig+0x2d4>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0207 	and.w	r2, r3, #7
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4422      	add	r2, r4
 80036a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a4:	e105      	b.n	80038b2 <UART_SetConfig+0x4d6>
 80036a6:	bf00      	nop
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036c6:	4642      	mov	r2, r8
 80036c8:	464b      	mov	r3, r9
 80036ca:	1891      	adds	r1, r2, r2
 80036cc:	6239      	str	r1, [r7, #32]
 80036ce:	415b      	adcs	r3, r3
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036d6:	4641      	mov	r1, r8
 80036d8:	1854      	adds	r4, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb43 0501 	adc.w	r5, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	18e3      	adds	r3, r4, r3
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036fc:	464b      	mov	r3, r9
 80036fe:	eb45 0303 	adc.w	r3, r5, r3
 8003702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003722:	4629      	mov	r1, r5
 8003724:	008b      	lsls	r3, r1, #2
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800372c:	4621      	mov	r1, r4
 800372e:	008a      	lsls	r2, r1, #2
 8003730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003734:	f7fc fda4 	bl	8000280 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <UART_SetConfig+0x4e4>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	011c      	lsls	r4, r3, #4
 8003746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	1891      	adds	r1, r2, r2
 800375e:	61b9      	str	r1, [r7, #24]
 8003760:	415b      	adcs	r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003768:	4641      	mov	r1, r8
 800376a:	1851      	adds	r1, r2, r1
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	4649      	mov	r1, r9
 8003770:	414b      	adcs	r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	00cb      	lsls	r3, r1, #3
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800378a:	4651      	mov	r1, sl
 800378c:	00ca      	lsls	r2, r1, #3
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	4603      	mov	r3, r0
 8003794:	4642      	mov	r2, r8
 8003796:	189b      	adds	r3, r3, r2
 8003798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800379c:	464b      	mov	r3, r9
 800379e:	460a      	mov	r2, r1
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037c0:	4649      	mov	r1, r9
 80037c2:	008b      	lsls	r3, r1, #2
 80037c4:	4641      	mov	r1, r8
 80037c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ca:	4641      	mov	r1, r8
 80037cc:	008a      	lsls	r2, r1, #2
 80037ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037d2:	f7fc fd55 	bl	8000280 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	441c      	add	r4, r3
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	673b      	str	r3, [r7, #112]	; 0x70
 8003804:	677a      	str	r2, [r7, #116]	; 0x74
 8003806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	415b      	adcs	r3, r3
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800381a:	4641      	mov	r1, r8
 800381c:	1851      	adds	r1, r2, r1
 800381e:	6039      	str	r1, [r7, #0]
 8003820:	4649      	mov	r1, r9
 8003822:	414b      	adcs	r3, r1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003832:	4659      	mov	r1, fp
 8003834:	00cb      	lsls	r3, r1, #3
 8003836:	4651      	mov	r1, sl
 8003838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383c:	4651      	mov	r1, sl
 800383e:	00ca      	lsls	r2, r1, #3
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	4603      	mov	r3, r0
 8003846:	4642      	mov	r2, r8
 8003848:	189b      	adds	r3, r3, r2
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
 800384c:	464b      	mov	r3, r9
 800384e:	460a      	mov	r2, r1
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	663b      	str	r3, [r7, #96]	; 0x60
 8003860:	667a      	str	r2, [r7, #100]	; 0x64
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800386e:	4649      	mov	r1, r9
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4641      	mov	r1, r8
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4641      	mov	r1, r8
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003880:	f7fc fcfe 	bl	8000280 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <UART_SetConfig+0x4e4>)
 800388a:	fba3 1302 	umull	r1, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <UART_SetConfig+0x4e4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4422      	add	r2, r4
 80038b0:	609a      	str	r2, [r3, #8]
}
 80038b2:	bf00      	nop
 80038b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	51eb851f 	.word	0x51eb851f

080038c4 <__NVIC_SetPriority>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SysTick_Handler+0x1c>)
 800391e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003920:	f001 fea2 	bl	8005668 <xTaskGetSchedulerState>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800392a:	f002 fc8d 	bl	8006248 <xPortSysTickHandler>
  }
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800393c:	2100      	movs	r1, #0
 800393e:	f06f 0004 	mvn.w	r0, #4
 8003942:	f7ff ffbf 	bl	80038c4 <__NVIC_SetPriority>
#endif
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003952:	f3ef 8305 	mrs	r3, IPSR
 8003956:	603b      	str	r3, [r7, #0]
  return(result);
 8003958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800395e:	f06f 0305 	mvn.w	r3, #5
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	e00c      	b.n	8003980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <osKernelInitialize+0x44>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <osKernelInitialize+0x44>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e002      	b.n	8003980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800397e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003980:	687b      	ldr	r3, [r7, #4]
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200001e4 	.word	0x200001e4

08003994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399a:	f3ef 8305 	mrs	r3, IPSR
 800399e:	603b      	str	r3, [r7, #0]
  return(result);
 80039a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80039a6:	f06f 0305 	mvn.w	r3, #5
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e010      	b.n	80039d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <osKernelStart+0x48>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d109      	bne.n	80039ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039b6:	f7ff ffbf 	bl	8003938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <osKernelStart+0x48>)
 80039bc:	2202      	movs	r2, #2
 80039be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039c0:	f001 f9f6 	bl	8004db0 <vTaskStartScheduler>
      stat = osOK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e002      	b.n	80039d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039d0:	687b      	ldr	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200001e4 	.word	0x200001e4

080039e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f0:	f3ef 8305 	mrs	r3, IPSR
 80039f4:	617b      	str	r3, [r7, #20]
  return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d17e      	bne.n	8003afa <osThreadNew+0x11a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07b      	beq.n	8003afa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a06:	2318      	movs	r3, #24
 8003a08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d045      	beq.n	8003aa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <osThreadNew+0x48>
        name = attr->name;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <osThreadNew+0x6e>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b38      	cmp	r3, #56	; 0x38
 8003a40:	d805      	bhi.n	8003a4e <osThreadNew+0x6e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <osThreadNew+0x72>
        return (NULL);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e054      	b.n	8003afc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <osThreadNew+0xa8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2bbb      	cmp	r3, #187	; 0xbb
 8003a70:	d90a      	bls.n	8003a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <osThreadNew+0xa8>
        mem = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e010      	b.n	8003aaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10c      	bne.n	8003aaa <osThreadNew+0xca>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <osThreadNew+0xca>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <osThreadNew+0xca>
          mem = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e001      	b.n	8003aaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d110      	bne.n	8003ad2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab8:	9202      	str	r2, [sp, #8]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 ff86 	bl	80049d8 <xTaskCreateStatic>
 8003acc:	4603      	mov	r3, r0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e013      	b.n	8003afa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d110      	bne.n	8003afa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 ffd1 	bl	8004a92 <xTaskCreate>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <osThreadNew+0x11a>
            hTask = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003afa:	693b      	ldr	r3, [r7, #16]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0c:	f3ef 8305 	mrs	r3, IPSR
 8003b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <osDelay+0x1c>
    stat = osErrorISR;
 8003b18:	f06f 0305 	mvn.w	r3, #5
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e007      	b.n	8003b30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 f90c 	bl	8004d48 <vTaskDelay>
    }
  }

  return (stat);
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b08a      	sub	sp, #40	; 0x28
 8003b3e:	af02      	add	r7, sp, #8
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4a:	f3ef 8305 	mrs	r3, IPSR
 8003b4e:	613b      	str	r3, [r7, #16]
  return(result);
 8003b50:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d175      	bne.n	8003c42 <osSemaphoreNew+0x108>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d072      	beq.n	8003c42 <osSemaphoreNew+0x108>
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d86e      	bhi.n	8003c42 <osSemaphoreNew+0x108>
    mem = -1;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <osSemaphoreNew+0x4c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b4f      	cmp	r3, #79	; 0x4f
 8003b7e:	d902      	bls.n	8003b86 <osSemaphoreNew+0x4c>
        mem = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e00c      	b.n	8003ba0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <osSemaphoreNew+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <osSemaphoreNew+0x66>
          mem = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e001      	b.n	8003ba0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba6:	d04c      	beq.n	8003c42 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d128      	bne.n	8003c00 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10a      	bne.n	8003bca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	9200      	str	r2, [sp, #0]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f000 f993 	bl	8003eec <xQueueGenericCreateStatic>
 8003bc6:	61f8      	str	r0, [r7, #28]
 8003bc8:	e005      	b.n	8003bd6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003bca:	2203      	movs	r2, #3
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 fa04 	bl	8003fdc <xQueueGenericCreate>
 8003bd4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <osSemaphoreNew+0xe8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01f      	beq.n	8003c22 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	2200      	movs	r2, #0
 8003be6:	2100      	movs	r1, #0
 8003be8:	69f8      	ldr	r0, [r7, #28]
 8003bea:	f000 fabf 	bl	800416c <xQueueGenericSend>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d016      	beq.n	8003c22 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003bf4:	69f8      	ldr	r0, [r7, #28]
 8003bf6:	f000 fd33 	bl	8004660 <vQueueDelete>
            hSemaphore = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e010      	b.n	8003c22 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d108      	bne.n	8003c18 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa41 	bl	8004096 <xQueueCreateCountingSemaphoreStatic>
 8003c14:	61f8      	str	r0, [r7, #28]
 8003c16:	e004      	b.n	8003c22 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa72 	bl	8004104 <xQueueCreateCountingSemaphore>
 8003c20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00c      	beq.n	8003c42 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e001      	b.n	8003c3a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	69f8      	ldr	r0, [r7, #28]
 8003c3e:	f000 fe43 	bl	80048c8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003c42:	69fb      	ldr	r3, [r7, #28]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3720      	adds	r7, #32
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4a06      	ldr	r2, [pc, #24]	; (8003c7c <vApplicationGetIdleTaskMemory+0x30>)
 8003c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200001e8 	.word	0x200001e8
 8003c7c:	200002a4 	.word	0x200002a4

08003c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	; (8003cac <vApplicationGetTimerTaskMemory+0x2c>)
 8003c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a06      	ldr	r2, [pc, #24]	; (8003cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8003c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	200004a4 	.word	0x200004a4
 8003cb0:	20000560 	.word	0x20000560

08003cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 0208 	add.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f103 0208 	add.w	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0208 	add.w	r2, r3, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6c:	d103      	bne.n	8003d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e00c      	b.n	8003d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e002      	b.n	8003d84 <vListInsert+0x2e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d2f6      	bcs.n	8003d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6892      	ldr	r2, [r2, #8]
 8003dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6852      	ldr	r2, [r2, #4]
 8003de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d103      	bne.n	8003dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e46:	f002 f96d 	bl	8006124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	3b01      	subs	r3, #1
 8003e78:	68f9      	ldr	r1, [r7, #12]
 8003e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d114      	bne.n	8003ec6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01a      	beq.n	8003eda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fa1b 	bl	80052e4 <xTaskRemoveFromEventList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <xQueueGenericReset+0xcc>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	e009      	b.n	8003eda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3310      	adds	r3, #16
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fef2 	bl	8003cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff feed 	bl	8003cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eda:	f002 f953 	bl	8006184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <xQueueGenericCreateStatic+0x52>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xQueueGenericCreateStatic+0x56>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericCreateStatic+0x58>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xQueueGenericCreateStatic+0x7e>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <xQueueGenericCreateStatic+0x82>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueGenericCreateStatic+0x84>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10a      	bne.n	8003f8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f8a:	2350      	movs	r3, #80	; 0x50
 8003f8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b50      	cmp	r3, #80	; 0x50
 8003f92:	d00a      	beq.n	8003faa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	61bb      	str	r3, [r7, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003faa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f83f 	bl	8004050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3730      	adds	r7, #48	; 0x30
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	613b      	str	r3, [r7, #16]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	3350      	adds	r3, #80	; 0x50
 8004014:	4618      	mov	r0, r3
 8004016:	f002 f9a7 	bl	8006368 <pvPortMalloc>
 800401a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d011      	beq.n	8004046 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3350      	adds	r3, #80	; 0x50
 800402a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f805 	bl	8004050 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004046:	69bb      	ldr	r3, [r7, #24]
	}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e002      	b.n	8004072 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800407e:	2101      	movs	r1, #1
 8004080:	69b8      	ldr	r0, [r7, #24]
 8004082:	f7ff fecb 	bl	8003e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004096:	b580      	push	{r7, lr}
 8004098:	b08a      	sub	sp, #40	; 0x28
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	61bb      	str	r3, [r7, #24]
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90a      	bls.n	80040dc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	617b      	str	r3, [r7, #20]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040dc:	2302      	movs	r3, #2
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff ff00 	bl	8003eec <xQueueGenericCreateStatic>
 80040ec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040fa:	69fb      	ldr	r3, [r7, #28]
	}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d90a      	bls.n	8004148 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60fb      	str	r3, [r7, #12]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004148:	2202      	movs	r2, #2
 800414a:	2100      	movs	r1, #0
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ff45 	bl	8003fdc <xQueueGenericCreate>
 8004152:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004160:	697b      	ldr	r3, [r7, #20]
	}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	; 0x38
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xQueueGenericSend+0x32>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <xQueueGenericSend+0x40>
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueGenericSend+0x44>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueGenericSend+0x46>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <xQueueGenericSend+0x60>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d103      	bne.n	80041da <xQueueGenericSend+0x6e>
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <xQueueGenericSend+0x72>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <xQueueGenericSend+0x74>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xQueueGenericSend+0x8e>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	623b      	str	r3, [r7, #32]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041fa:	f001 fa35 	bl	8005668 <xTaskGetSchedulerState>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <xQueueGenericSend+0x9e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <xQueueGenericSend+0xa2>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <xQueueGenericSend+0xa4>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xQueueGenericSend+0xbe>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	61fb      	str	r3, [r7, #28]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800422a:	f001 ff7b 	bl	8006124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <xQueueGenericSend+0xd4>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d129      	bne.n	8004294 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004246:	f000 fa2e 	bl	80046a6 <prvCopyDataToQueue>
 800424a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	3324      	adds	r3, #36	; 0x24
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f843 	bl	80052e4 <xTaskRemoveFromEventList>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004264:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <xQueueGenericSend+0x1f8>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	e00a      	b.n	800428c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800427c:	4b39      	ldr	r3, [pc, #228]	; (8004364 <xQueueGenericSend+0x1f8>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800428c:	f001 ff7a 	bl	8006184 <vPortExitCritical>
				return pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	e063      	b.n	800435c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800429a:	f001 ff73 	bl	8006184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	e05c      	b.n	800435c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f87d 	bl	80053ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042b6:	f001 ff65 	bl	8006184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ba:	f000 fde9 	bl	8004e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042be:	f001 ff31 	bl	8006124 <vPortEnterCritical>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ce:	d103      	bne.n	80042d8 <xQueueGenericSend+0x16c>
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e4:	d103      	bne.n	80042ee <xQueueGenericSend+0x182>
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ee:	f001 ff49 	bl	8006184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042f2:	1d3a      	adds	r2, r7, #4
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 f86c 	bl	80053d8 <xTaskCheckForTimeOut>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d124      	bne.n	8004350 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004308:	f000 fac5 	bl	8004896 <prvIsQueueFull>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	3310      	adds	r3, #16
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 ff92 	bl	8005244 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004322:	f000 fa50 	bl	80047c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004326:	f000 fdc1 	bl	8004eac <xTaskResumeAll>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af7c 	bne.w	800422a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <xQueueGenericSend+0x1f8>)
 8004334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	e772      	b.n	800422a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004346:	f000 fa3e 	bl	80047c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800434a:	f000 fdaf 	bl	8004eac <xTaskResumeAll>
 800434e:	e76c      	b.n	800422a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004352:	f000 fa38 	bl	80047c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004356:	f000 fda9 	bl	8004eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800435a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800435c:	4618      	mov	r0, r3
 800435e:	3738      	adds	r7, #56	; 0x38
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b090      	sub	sp, #64	; 0x40
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d103      	bne.n	80043a4 <xQueueGenericSendFromISR+0x3c>
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <xQueueGenericSendFromISR+0x40>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <xQueueGenericSendFromISR+0x42>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d103      	bne.n	80043d2 <xQueueGenericSendFromISR+0x6a>
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <xQueueGenericSendFromISR+0x6e>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <xQueueGenericSendFromISR+0x70>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	623b      	str	r3, [r7, #32]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f2:	f001 ff79 	bl	80062e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043f6:	f3ef 8211 	mrs	r2, BASEPRI
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800440e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <xQueueGenericSendFromISR+0xbc>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d12f      	bne.n	8004484 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800442a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800443a:	f000 f934 	bl	80046a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800443e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004446:	d112      	bne.n	800446e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	3324      	adds	r3, #36	; 0x24
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ff45 	bl	80052e4 <xTaskRemoveFromEventList>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00e      	beq.n	800447e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e007      	b.n	800447e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800446e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004472:	3301      	adds	r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	b25a      	sxtb	r2, r3
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800447e:	2301      	movs	r3, #1
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004482:	e001      	b.n	8004488 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004484:	2300      	movs	r3, #0
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004496:	4618      	mov	r0, r3
 8004498:	3740      	adds	r7, #64	; 0x40
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <xQueueReceive+0x30>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	623b      	str	r3, [r7, #32]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <xQueueReceive+0x3e>
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xQueueReceive+0x42>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xQueueReceive+0x44>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueReceive+0x5e>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	61fb      	str	r3, [r7, #28]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044fe:	f001 f8b3 	bl	8005668 <xTaskGetSchedulerState>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xQueueReceive+0x6e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <xQueueReceive+0x72>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <xQueueReceive+0x74>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xQueueReceive+0x8e>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	61bb      	str	r3, [r7, #24]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800452e:	f001 fdf9 	bl	8006124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01f      	beq.n	800457e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004542:	f000 f91a 	bl	800477a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00f      	beq.n	8004576 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fec2 	bl	80052e4 <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004566:	4b3d      	ldr	r3, [pc, #244]	; (800465c <xQueueReceive+0x1bc>)
 8004568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004576:	f001 fe05 	bl	8006184 <vPortExitCritical>
				return pdPASS;
 800457a:	2301      	movs	r3, #1
 800457c:	e069      	b.n	8004652 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004584:	f001 fdfe 	bl	8006184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004588:	2300      	movs	r3, #0
 800458a:	e062      	b.n	8004652 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004592:	f107 0310 	add.w	r3, r7, #16
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff08 	bl	80053ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045a0:	f001 fdf0 	bl	8006184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045a4:	f000 fc74 	bl	8004e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a8:	f001 fdbc 	bl	8006124 <vPortEnterCritical>
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b8:	d103      	bne.n	80045c2 <xQueueReceive+0x122>
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ce:	d103      	bne.n	80045d8 <xQueueReceive+0x138>
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d8:	f001 fdd4 	bl	8006184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045dc:	1d3a      	adds	r2, r7, #4
 80045de:	f107 0310 	add.w	r3, r7, #16
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fef7 	bl	80053d8 <xTaskCheckForTimeOut>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d123      	bne.n	8004638 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f2:	f000 f93a 	bl	800486a <prvIsQueueEmpty>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d017      	beq.n	800462c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	3324      	adds	r3, #36	; 0x24
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fe1d 	bl	8005244 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800460a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460c:	f000 f8db 	bl	80047c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004610:	f000 fc4c 	bl	8004eac <xTaskResumeAll>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d189      	bne.n	800452e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <xQueueReceive+0x1bc>)
 800461c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	e780      	b.n	800452e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800462c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462e:	f000 f8ca 	bl	80047c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004632:	f000 fc3b 	bl	8004eac <xTaskResumeAll>
 8004636:	e77a      	b.n	800452e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463a:	f000 f8c4 	bl	80047c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800463e:	f000 fc35 	bl	8004eac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004644:	f000 f911 	bl	800486a <prvIsQueueEmpty>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f43f af6f 	beq.w	800452e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004652:	4618      	mov	r0, r3
 8004654:	3730      	adds	r7, #48	; 0x30
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <vQueueDelete+0x28>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	60bb      	str	r3, [r7, #8]
}
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f947 	bl	800491c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f001 ff31 	bl	8006500 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10d      	bne.n	80046e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d14d      	bne.n	8004768 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 ffe7 	bl	80056a4 <xTaskPriorityDisinherit>
 80046d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	e043      	b.n	8004768 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d119      	bne.n	800471a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6858      	ldr	r0, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	461a      	mov	r2, r3
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	f002 f84f 	bl	8006794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	441a      	add	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	d32b      	bcc.n	8004768 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e026      	b.n	8004768 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68d8      	ldr	r0, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	461a      	mov	r2, r3
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	f002 f835 	bl	8006794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	425b      	negs	r3, r3
 8004734:	441a      	add	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d207      	bcs.n	8004756 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	425b      	negs	r3, r3
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d105      	bne.n	8004768 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3b01      	subs	r3, #1
 8004766:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004770:	697b      	ldr	r3, [r7, #20]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d018      	beq.n	80047be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d303      	bcc.n	80047ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	461a      	mov	r2, r3
 80047b8:	6838      	ldr	r0, [r7, #0]
 80047ba:	f001 ffeb 	bl	8006794 <memcpy>
	}
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047ce:	f001 fca9 	bl	8006124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047da:	e011      	b.n	8004800 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d012      	beq.n	800480a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd7b 	bl	80052e4 <xTaskRemoveFromEventList>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047f4:	f000 fe52 	bl	800549c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	dce9      	bgt.n	80047dc <prvUnlockQueue+0x16>
 8004808:	e000      	b.n	800480c <prvUnlockQueue+0x46>
					break;
 800480a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	22ff      	movs	r2, #255	; 0xff
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004814:	f001 fcb6 	bl	8006184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004818:	f001 fc84 	bl	8006124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004822:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004824:	e011      	b.n	800484a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3310      	adds	r3, #16
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd56 	bl	80052e4 <xTaskRemoveFromEventList>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800483e:	f000 fe2d 	bl	800549c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	3b01      	subs	r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800484a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800484e:	2b00      	cmp	r3, #0
 8004850:	dce9      	bgt.n	8004826 <prvUnlockQueue+0x60>
 8004852:	e000      	b.n	8004856 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004854:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	22ff      	movs	r2, #255	; 0xff
 800485a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800485e:	f001 fc91 	bl	8006184 <vPortExitCritical>
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004872:	f001 fc57 	bl	8006124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800487e:	2301      	movs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e001      	b.n	8004888 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004888:	f001 fc7c 	bl	8006184 <vPortExitCritical>

	return xReturn;
 800488c:	68fb      	ldr	r3, [r7, #12]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800489e:	f001 fc41 	bl	8006124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d102      	bne.n	80048b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e001      	b.n	80048b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048b8:	f001 fc64 	bl	8006184 <vPortExitCritical>

	return xReturn;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e014      	b.n	8004902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80048d8:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <vQueueAddToRegistry+0x50>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80048e4:	490c      	ldr	r1, [pc, #48]	; (8004918 <vQueueAddToRegistry+0x50>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <vQueueAddToRegistry+0x50>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80048fa:	e006      	b.n	800490a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3301      	adds	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b07      	cmp	r3, #7
 8004906:	d9e7      	bls.n	80048d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000960 	.word	0x20000960

0800491c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e016      	b.n	8004958 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <vQueueUnregisterQueue+0x50>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4413      	add	r3, r2
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d10b      	bne.n	8004952 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800493a:	4a0c      	ldr	r2, [pc, #48]	; (800496c <vQueueUnregisterQueue+0x50>)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2100      	movs	r1, #0
 8004940:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <vQueueUnregisterQueue+0x50>)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	2200      	movs	r2, #0
 800494e:	605a      	str	r2, [r3, #4]
				break;
 8004950:	e006      	b.n	8004960 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3301      	adds	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b07      	cmp	r3, #7
 800495c:	d9e5      	bls.n	800492a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000960 	.word	0x20000960

08004970 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004980:	f001 fbd0 	bl	8006124 <vPortEnterCritical>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004990:	d103      	bne.n	800499a <vQueueWaitForMessageRestricted+0x2a>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a6:	d103      	bne.n	80049b0 <vQueueWaitForMessageRestricted+0x40>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	f001 fbe8 	bl	8006184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fc61 	bl	800528c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff fefb 	bl	80047c6 <prvUnlockQueue>
	}
 80049d0:	bf00      	nop
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	; 0x38
 80049dc:	af04      	add	r7, sp, #16
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xTaskCreateStatic+0x2a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	623b      	str	r3, [r7, #32]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xTaskCreateStatic+0x46>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61fb      	str	r3, [r7, #28]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a1e:	23bc      	movs	r3, #188	; 0xbc
 8004a20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2bbc      	cmp	r3, #188	; 0xbc
 8004a26:	d00a      	beq.n	8004a3e <xTaskCreateStatic+0x66>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	61bb      	str	r3, [r7, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01e      	beq.n	8004a84 <xTaskCreateStatic+0xac>
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	f107 0314 	add.w	r3, r7, #20
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f850 	bl	8004b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a7e:	f000 f8f3 	bl	8004c68 <prvAddNewTaskToReadyList>
 8004a82:	e001      	b.n	8004a88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a88:	697b      	ldr	r3, [r7, #20]
	}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3728      	adds	r7, #40	; 0x28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08c      	sub	sp, #48	; 0x30
 8004a96:	af04      	add	r7, sp, #16
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f001 fc5e 	bl	8006368 <pvPortMalloc>
 8004aac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ab4:	20bc      	movs	r0, #188	; 0xbc
 8004ab6:	f001 fc57 	bl	8006368 <pvPortMalloc>
 8004aba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac8:	e005      	b.n	8004ad6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f001 fd18 	bl	8006500 <vPortFree>
 8004ad0:	e001      	b.n	8004ad6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f80e 	bl	8004b1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b00:	69f8      	ldr	r0, [r7, #28]
 8004b02:	f000 f8b1 	bl	8004c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e002      	b.n	8004b12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b12:	69bb      	ldr	r3, [r7, #24]
	}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	461a      	mov	r2, r3
 8004b34:	21a5      	movs	r1, #165	; 0xa5
 8004b36:	f001 fe3b 	bl	80067b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b44:	3b01      	subs	r3, #1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f023 0307 	bic.w	r3, r3, #7
 8004b52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	617b      	str	r3, [r7, #20]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01f      	beq.n	8004bba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	e012      	b.n	8004ba6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	7819      	ldrb	r1, [r3, #0]
 8004b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3334      	adds	r3, #52	; 0x34
 8004b90:	460a      	mov	r2, r1
 8004b92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d9e9      	bls.n	8004b80 <prvInitialiseNewTask+0x64>
 8004bac:	e000      	b.n	8004bb0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004bae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb8:	e003      	b.n	8004bc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	2b37      	cmp	r3, #55	; 0x37
 8004bc6:	d901      	bls.n	8004bcc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bc8:	2337      	movs	r3, #55	; 0x37
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	2200      	movs	r2, #0
 8004bdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	3304      	adds	r3, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff f886 	bl	8003cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	3318      	adds	r3, #24
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff f881 	bl	8003cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	3354      	adds	r3, #84	; 0x54
 8004c1c:	2260      	movs	r2, #96	; 0x60
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fdc5 	bl	80067b0 <memset>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <prvInitialiseNewTask+0x140>)
 8004c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <prvInitialiseNewTask+0x144>)
 8004c30:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <prvInitialiseNewTask+0x148>)
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	69b8      	ldr	r0, [r7, #24]
 8004c3e:	f001 f941 	bl	8005ec4 <pxPortInitialiseStack>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c54:	bf00      	nop
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08007300 	.word	0x08007300
 8004c60:	08007320 	.word	0x08007320
 8004c64:	080072e0 	.word	0x080072e0

08004c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c70:	f001 fa58 	bl	8006124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c74:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d110      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c94:	f000 fc26 	bl	80054e4 <prvInitialiseTaskLists>
 8004c98:	e00d      	b.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <prvAddNewTaskToReadyList+0xcc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d802      	bhi.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <prvAddNewTaskToReadyList+0xd4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d903      	bls.n	8004cdc <prvAddNewTaskToReadyList+0x74>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <prvAddNewTaskToReadyList+0xd4>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <prvAddNewTaskToReadyList+0xd8>)
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7ff f80b 	bl	8003d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 fa44 	bl	8006184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <prvAddNewTaskToReadyList+0xcc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00e      	beq.n	8004d22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d207      	bcs.n	8004d22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <prvAddNewTaskToReadyList+0xdc>)
 8004d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000e74 	.word	0x20000e74
 8004d30:	200009a0 	.word	0x200009a0
 8004d34:	20000e80 	.word	0x20000e80
 8004d38:	20000e90 	.word	0x20000e90
 8004d3c:	20000e7c 	.word	0x20000e7c
 8004d40:	200009a4 	.word	0x200009a4
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d5a:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <vTaskDelay+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <vTaskDelay+0x30>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	60bb      	str	r3, [r7, #8]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d78:	f000 f88a 	bl	8004e90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fcfe 	bl	8005780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d84:	f000 f892 	bl	8004eac <xTaskResumeAll>
 8004d88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d107      	bne.n	8004da0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <vTaskDelay+0x64>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000e9c 	.word	0x20000e9c
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	; 0x28
 8004db4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dbe:	463a      	mov	r2, r7
 8004dc0:	1d39      	adds	r1, r7, #4
 8004dc2:	f107 0308 	add.w	r3, r7, #8
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe ff40 	bl	8003c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dcc:	6839      	ldr	r1, [r7, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	9202      	str	r2, [sp, #8]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	460a      	mov	r2, r1
 8004dde:	4924      	ldr	r1, [pc, #144]	; (8004e70 <vTaskStartScheduler+0xc0>)
 8004de0:	4824      	ldr	r0, [pc, #144]	; (8004e74 <vTaskStartScheduler+0xc4>)
 8004de2:	f7ff fdf9 	bl	80049d8 <xTaskCreateStatic>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <vTaskStartScheduler+0xc8>)
 8004dea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <vTaskStartScheduler+0xc8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004df4:	2301      	movs	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e001      	b.n	8004dfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d102      	bne.n	8004e0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e04:	f000 fd10 	bl	8005828 <xTimerCreateTimerTask>
 8004e08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d11b      	bne.n	8004e48 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <vTaskStartScheduler+0xcc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3354      	adds	r3, #84	; 0x54
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <vTaskStartScheduler+0xd0>)
 8004e2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <vTaskStartScheduler+0xd4>)
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <vTaskStartScheduler+0xd8>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <vTaskStartScheduler+0xdc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e42:	f001 f8cd 	bl	8005fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e46:	e00e      	b.n	8004e66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e4e:	d10a      	bne.n	8004e66 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <vTaskStartScheduler+0xb4>
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	08007258 	.word	0x08007258
 8004e74:	080054b5 	.word	0x080054b5
 8004e78:	20000e98 	.word	0x20000e98
 8004e7c:	200009a0 	.word	0x200009a0
 8004e80:	20000018 	.word	0x20000018
 8004e84:	20000e94 	.word	0x20000e94
 8004e88:	20000e80 	.word	0x20000e80
 8004e8c:	20000e78 	.word	0x20000e78

08004e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <vTaskSuspendAll+0x18>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <vTaskSuspendAll+0x18>)
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e9e:	bf00      	nop
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000e9c 	.word	0x20000e9c

08004eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eba:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	603b      	str	r3, [r7, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ed8:	f001 f924 	bl	8006124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004edc:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	4a38      	ldr	r2, [pc, #224]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ee4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d162      	bne.n	8004fb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eee:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <xTaskResumeAll+0x11c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05e      	beq.n	8004fb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef6:	e02f      	b.n	8004f58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <xTaskResumeAll+0x120>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3318      	adds	r3, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff5f 	bl	8003dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ff5a 	bl	8003dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <xTaskResumeAll+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d903      	bls.n	8004f28 <xTaskResumeAll+0x7c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <xTaskResumeAll+0x124>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <xTaskResumeAll+0x128>)
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fe fee5 	bl	8003d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <xTaskResumeAll+0x12c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <xTaskResumeAll+0x120>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1cb      	bne.n	8004ef8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f66:	f000 fb5f 	bl	8005628 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <xTaskResumeAll+0x134>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f76:	f000 f847 	bl	8005008 <xTaskIncrementTick>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <xTaskResumeAll+0x134>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <xTaskResumeAll+0x138>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb4:	f001 f8e6 	bl	8006184 <vPortExitCritical>

	return xAlreadyYielded;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000e9c 	.word	0x20000e9c
 8004fc8:	20000e74 	.word	0x20000e74
 8004fcc:	20000e34 	.word	0x20000e34
 8004fd0:	20000e7c 	.word	0x20000e7c
 8004fd4:	200009a4 	.word	0x200009a4
 8004fd8:	200009a0 	.word	0x200009a0
 8004fdc:	20000e88 	.word	0x20000e88
 8004fe0:	20000e84 	.word	0x20000e84
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <xTaskGetTickCount+0x1c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ff4:	687b      	ldr	r3, [r7, #4]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000e78 	.word	0x20000e78

08005008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005012:	4b4f      	ldr	r3, [pc, #316]	; (8005150 <xTaskIncrementTick+0x148>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 808f 	bne.w	800513a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800501c:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <xTaskIncrementTick+0x14c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005024:	4a4b      	ldr	r2, [pc, #300]	; (8005154 <xTaskIncrementTick+0x14c>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d120      	bne.n	8005072 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005030:	4b49      	ldr	r3, [pc, #292]	; (8005158 <xTaskIncrementTick+0x150>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <xTaskIncrementTick+0x48>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	603b      	str	r3, [r7, #0]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <xTaskIncrementTick+0x46>
 8005050:	4b41      	ldr	r3, [pc, #260]	; (8005158 <xTaskIncrementTick+0x150>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <xTaskIncrementTick+0x154>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <xTaskIncrementTick+0x150>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4a3f      	ldr	r2, [pc, #252]	; (800515c <xTaskIncrementTick+0x154>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4b3e      	ldr	r3, [pc, #248]	; (8005160 <xTaskIncrementTick+0x158>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <xTaskIncrementTick+0x158>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	f000 fadb 	bl	8005628 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005072:	4b3c      	ldr	r3, [pc, #240]	; (8005164 <xTaskIncrementTick+0x15c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	429a      	cmp	r2, r3
 800507a:	d349      	bcc.n	8005110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <xTaskIncrementTick+0x150>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005086:	4b37      	ldr	r3, [pc, #220]	; (8005164 <xTaskIncrementTick+0x15c>)
 8005088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800508c:	601a      	str	r2, [r3, #0]
					break;
 800508e:	e03f      	b.n	8005110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <xTaskIncrementTick+0x150>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d203      	bcs.n	80050b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050a8:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <xTaskIncrementTick+0x15c>)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050ae:	e02f      	b.n	8005110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fe87 	bl	8003dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3318      	adds	r3, #24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fe7e 	bl	8003dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <xTaskIncrementTick+0x160>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d903      	bls.n	80050e0 <xTaskIncrementTick+0xd8>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <xTaskIncrementTick+0x160>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <xTaskIncrementTick+0x164>)
 80050ee:	441a      	add	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7fe fe09 	bl	8003d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <xTaskIncrementTick+0x168>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b8      	bcc.n	800507c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510e:	e7b5      	b.n	800507c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b17      	ldr	r3, [pc, #92]	; (8005170 <xTaskIncrementTick+0x168>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	4915      	ldr	r1, [pc, #84]	; (800516c <xTaskIncrementTick+0x164>)
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d901      	bls.n	800512c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <xTaskIncrementTick+0x16c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e004      	b.n	8005144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <xTaskIncrementTick+0x170>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <xTaskIncrementTick+0x170>)
 8005142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005144:	697b      	ldr	r3, [r7, #20]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000e9c 	.word	0x20000e9c
 8005154:	20000e78 	.word	0x20000e78
 8005158:	20000e2c 	.word	0x20000e2c
 800515c:	20000e30 	.word	0x20000e30
 8005160:	20000e8c 	.word	0x20000e8c
 8005164:	20000e94 	.word	0x20000e94
 8005168:	20000e7c 	.word	0x20000e7c
 800516c:	200009a4 	.word	0x200009a4
 8005170:	200009a0 	.word	0x200009a0
 8005174:	20000e88 	.word	0x20000e88
 8005178:	20000e84 	.word	0x20000e84

0800517c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005182:	4b2a      	ldr	r3, [pc, #168]	; (800522c <vTaskSwitchContext+0xb0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800518a:	4b29      	ldr	r3, [pc, #164]	; (8005230 <vTaskSwitchContext+0xb4>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005190:	e046      	b.n	8005220 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005192:	4b27      	ldr	r3, [pc, #156]	; (8005230 <vTaskSwitchContext+0xb4>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <vTaskSwitchContext+0xb8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e010      	b.n	80051c2 <vTaskSwitchContext+0x46>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <vTaskSwitchContext+0x40>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	607b      	str	r3, [r7, #4]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <vTaskSwitchContext+0x3e>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	491d      	ldr	r1, [pc, #116]	; (8005238 <vTaskSwitchContext+0xbc>)
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0e4      	beq.n	80051a0 <vTaskSwitchContext+0x24>
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <vTaskSwitchContext+0xbc>)
 80051e2:	4413      	add	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	3308      	adds	r3, #8
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d104      	bne.n	8005206 <vTaskSwitchContext+0x8a>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a0b      	ldr	r2, [pc, #44]	; (800523c <vTaskSwitchContext+0xc0>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <vTaskSwitchContext+0xb8>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <vTaskSwitchContext+0xc0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3354      	adds	r3, #84	; 0x54
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <vTaskSwitchContext+0xc4>)
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000e9c 	.word	0x20000e9c
 8005230:	20000e88 	.word	0x20000e88
 8005234:	20000e7c 	.word	0x20000e7c
 8005238:	200009a4 	.word	0x200009a4
 800523c:	200009a0 	.word	0x200009a0
 8005240:	20000018 	.word	0x20000018

08005244 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	60fb      	str	r3, [r7, #12]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <vTaskPlaceOnEventList+0x44>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3318      	adds	r3, #24
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fe fd6f 	bl	8003d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005278:	2101      	movs	r1, #1
 800527a:	6838      	ldr	r0, [r7, #0]
 800527c:	f000 fa80 	bl	8005780 <prvAddCurrentTaskToDelayedList>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200009a0 	.word	0x200009a0

0800528c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3318      	adds	r3, #24
 80052ba:	4619      	mov	r1, r3
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7fe fd26 	bl	8003d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f000 fa55 	bl	8005780 <prvAddCurrentTaskToDelayedList>
	}
 80052d6:	bf00      	nop
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200009a0 	.word	0x200009a0

080052e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
}
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3318      	adds	r3, #24
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fd57 	bl	8003dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <xTaskRemoveFromEventList+0xb0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d11d      	bne.n	800535e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fd4e 	bl	8003dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <xTaskRemoveFromEventList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d903      	bls.n	8005340 <xTaskRemoveFromEventList+0x5c>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a16      	ldr	r2, [pc, #88]	; (8005398 <xTaskRemoveFromEventList+0xb4>)
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <xTaskRemoveFromEventList+0xb8>)
 800534e:	441a      	add	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe fcd9 	bl	8003d0e <vListInsertEnd>
 800535c:	e005      	b.n	800536a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3318      	adds	r3, #24
 8005362:	4619      	mov	r1, r3
 8005364:	480e      	ldr	r0, [pc, #56]	; (80053a0 <xTaskRemoveFromEventList+0xbc>)
 8005366:	f7fe fcd2 	bl	8003d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <xTaskRemoveFromEventList+0xc0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	429a      	cmp	r2, r3
 8005376:	d905      	bls.n	8005384 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <xTaskRemoveFromEventList+0xc4>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e001      	b.n	8005388 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005388:	697b      	ldr	r3, [r7, #20]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000e9c 	.word	0x20000e9c
 8005398:	20000e7c 	.word	0x20000e7c
 800539c:	200009a4 	.word	0x200009a4
 80053a0:	20000e34 	.word	0x20000e34
 80053a4:	200009a0 	.word	0x200009a0
 80053a8:	20000e88 	.word	0x20000e88

080053ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <vTaskInternalSetTimeOutState+0x24>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <vTaskInternalSetTimeOutState+0x28>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	605a      	str	r2, [r3, #4]
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000e8c 	.word	0x20000e8c
 80053d4:	20000e78 	.word	0x20000e78

080053d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	613b      	str	r3, [r7, #16]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800541a:	f000 fe83 	bl	8006124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800541e:	4b1d      	ldr	r3, [pc, #116]	; (8005494 <xTaskCheckForTimeOut+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005436:	d102      	bne.n	800543e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e023      	b.n	8005486 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <xTaskCheckForTimeOut+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d007      	beq.n	800545a <xTaskCheckForTimeOut+0x82>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	429a      	cmp	r2, r3
 8005452:	d302      	bcc.n	800545a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	e015      	b.n	8005486 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	429a      	cmp	r2, r3
 8005462:	d20b      	bcs.n	800547c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff9b 	bl	80053ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e004      	b.n	8005486 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005486:	f000 fe7d 	bl	8006184 <vPortExitCritical>

	return xReturn;
 800548a:	69fb      	ldr	r3, [r7, #28]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000e78 	.word	0x20000e78
 8005498:	20000e8c 	.word	0x20000e8c

0800549c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <vTaskMissedYield+0x14>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
}
 80054a6:	bf00      	nop
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20000e88 	.word	0x20000e88

080054b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054bc:	f000 f852 	bl	8005564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvIdleTask+0x28>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d9f9      	bls.n	80054bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <prvIdleTask+0x2c>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054d8:	e7f0      	b.n	80054bc <prvIdleTask+0x8>
 80054da:	bf00      	nop
 80054dc:	200009a4 	.word	0x200009a4
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e00c      	b.n	800550a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a12      	ldr	r2, [pc, #72]	; (8005544 <prvInitialiseTaskLists+0x60>)
 80054fc:	4413      	add	r3, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fbd8 	bl	8003cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3301      	adds	r3, #1
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b37      	cmp	r3, #55	; 0x37
 800550e:	d9ef      	bls.n	80054f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005510:	480d      	ldr	r0, [pc, #52]	; (8005548 <prvInitialiseTaskLists+0x64>)
 8005512:	f7fe fbcf 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005516:	480d      	ldr	r0, [pc, #52]	; (800554c <prvInitialiseTaskLists+0x68>)
 8005518:	f7fe fbcc 	bl	8003cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800551c:	480c      	ldr	r0, [pc, #48]	; (8005550 <prvInitialiseTaskLists+0x6c>)
 800551e:	f7fe fbc9 	bl	8003cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005522:	480c      	ldr	r0, [pc, #48]	; (8005554 <prvInitialiseTaskLists+0x70>)
 8005524:	f7fe fbc6 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005528:	480b      	ldr	r0, [pc, #44]	; (8005558 <prvInitialiseTaskLists+0x74>)
 800552a:	f7fe fbc3 	bl	8003cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <prvInitialiseTaskLists+0x78>)
 8005530:	4a05      	ldr	r2, [pc, #20]	; (8005548 <prvInitialiseTaskLists+0x64>)
 8005532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <prvInitialiseTaskLists+0x7c>)
 8005536:	4a05      	ldr	r2, [pc, #20]	; (800554c <prvInitialiseTaskLists+0x68>)
 8005538:	601a      	str	r2, [r3, #0]
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200009a4 	.word	0x200009a4
 8005548:	20000e04 	.word	0x20000e04
 800554c:	20000e18 	.word	0x20000e18
 8005550:	20000e34 	.word	0x20000e34
 8005554:	20000e48 	.word	0x20000e48
 8005558:	20000e60 	.word	0x20000e60
 800555c:	20000e2c 	.word	0x20000e2c
 8005560:	20000e30 	.word	0x20000e30

08005564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800556a:	e019      	b.n	80055a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800556c:	f000 fdda 	bl	8006124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <prvCheckTasksWaitingTermination+0x50>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fc23 	bl	8003dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <prvCheckTasksWaitingTermination+0x54>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3b01      	subs	r3, #1
 8005588:	4a0b      	ldr	r2, [pc, #44]	; (80055b8 <prvCheckTasksWaitingTermination+0x54>)
 800558a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <prvCheckTasksWaitingTermination+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3b01      	subs	r3, #1
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <prvCheckTasksWaitingTermination+0x58>)
 8005594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005596:	f000 fdf5 	bl	8006184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f810 	bl	80055c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <prvCheckTasksWaitingTermination+0x58>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e1      	bne.n	800556c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000e48 	.word	0x20000e48
 80055b8:	20000e74 	.word	0x20000e74
 80055bc:	20000e5c 	.word	0x20000e5c

080055c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3354      	adds	r3, #84	; 0x54
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f999 	bl	8006904 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d108      	bne.n	80055ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 ff8d 	bl	8006500 <vPortFree>
				vPortFree( pxTCB );
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 ff8a 	bl	8006500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055ec:	e018      	b.n	8005620 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d103      	bne.n	8005600 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 ff81 	bl	8006500 <vPortFree>
	}
 80055fe:	e00f      	b.n	8005620 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005606:	2b02      	cmp	r3, #2
 8005608:	d00a      	beq.n	8005620 <prvDeleteTCB+0x60>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60fb      	str	r3, [r7, #12]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <prvDeleteTCB+0x5e>
	}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <prvResetNextTaskUnblockTime+0x38>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <prvResetNextTaskUnblockTime+0x3c>)
 800563a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800563e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005640:	e008      	b.n	8005654 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <prvResetNextTaskUnblockTime+0x38>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <prvResetNextTaskUnblockTime+0x3c>)
 8005652:	6013      	str	r3, [r2, #0]
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000e2c 	.word	0x20000e2c
 8005664:	20000e94 	.word	0x20000e94

08005668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <xTaskGetSchedulerState+0x34>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005676:	2301      	movs	r3, #1
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	e008      	b.n	800568e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567c:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <xTaskGetSchedulerState+0x38>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005684:	2302      	movs	r3, #2
 8005686:	607b      	str	r3, [r7, #4]
 8005688:	e001      	b.n	800568e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800568e:	687b      	ldr	r3, [r7, #4]
	}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000e80 	.word	0x20000e80
 80056a0:	20000e9c 	.word	0x20000e9c

080056a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d056      	beq.n	8005768 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056ba:	4b2e      	ldr	r3, [pc, #184]	; (8005774 <xTaskPriorityDisinherit+0xd0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d00a      	beq.n	80056da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fc:	1e5a      	subs	r2, r3, #1
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	429a      	cmp	r2, r3
 800570c:	d02c      	beq.n	8005768 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	2b00      	cmp	r3, #0
 8005714:	d128      	bne.n	8005768 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fb54 	bl	8003dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <xTaskPriorityDisinherit+0xd4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d903      	bls.n	8005748 <xTaskPriorityDisinherit+0xa4>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <xTaskPriorityDisinherit+0xd4>)
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4a09      	ldr	r2, [pc, #36]	; (800577c <xTaskPriorityDisinherit+0xd8>)
 8005756:	441a      	add	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fe fad5 	bl	8003d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005768:	697b      	ldr	r3, [r7, #20]
	}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	200009a0 	.word	0x200009a0
 8005778:	20000e7c 	.word	0x20000e7c
 800577c:	200009a4 	.word	0x200009a4

08005780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800578a:	4b21      	ldr	r3, [pc, #132]	; (8005810 <prvAddCurrentTaskToDelayedList+0x90>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005790:	4b20      	ldr	r3, [pc, #128]	; (8005814 <prvAddCurrentTaskToDelayedList+0x94>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fb16 	bl	8003dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a2:	d10a      	bne.n	80057ba <prvAddCurrentTaskToDelayedList+0x3a>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057aa:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <prvAddCurrentTaskToDelayedList+0x94>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4819      	ldr	r0, [pc, #100]	; (8005818 <prvAddCurrentTaskToDelayedList+0x98>)
 80057b4:	f7fe faab 	bl	8003d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057b8:	e026      	b.n	8005808 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4413      	add	r3, r2
 80057c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d209      	bcs.n	80057e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <prvAddCurrentTaskToDelayedList+0x9c>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <prvAddCurrentTaskToDelayedList+0x94>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7fe fab9 	bl	8003d56 <vListInsert>
}
 80057e4:	e010      	b.n	8005808 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e6:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvAddCurrentTaskToDelayedList+0x94>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe faaf 	bl	8003d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d202      	bcs.n	8005808 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005802:	4a08      	ldr	r2, [pc, #32]	; (8005824 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6013      	str	r3, [r2, #0]
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000e78 	.word	0x20000e78
 8005814:	200009a0 	.word	0x200009a0
 8005818:	20000e60 	.word	0x20000e60
 800581c:	20000e30 	.word	0x20000e30
 8005820:	20000e2c 	.word	0x20000e2c
 8005824:	20000e94 	.word	0x20000e94

08005828 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005832:	f000 fb07 	bl	8005e44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005836:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <xTimerCreateTimerTask+0x80>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d021      	beq.n	8005882 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005846:	1d3a      	adds	r2, r7, #4
 8005848:	f107 0108 	add.w	r1, r7, #8
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fa15 	bl	8003c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	9202      	str	r2, [sp, #8]
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	2302      	movs	r3, #2
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	460a      	mov	r2, r1
 8005868:	4910      	ldr	r1, [pc, #64]	; (80058ac <xTimerCreateTimerTask+0x84>)
 800586a:	4811      	ldr	r0, [pc, #68]	; (80058b0 <xTimerCreateTimerTask+0x88>)
 800586c:	f7ff f8b4 	bl	80049d8 <xTaskCreateStatic>
 8005870:	4603      	mov	r3, r0
 8005872:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <xTimerCreateTimerTask+0x8c>)
 8005874:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTimerCreateTimerTask+0x8c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800587e:	2301      	movs	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	613b      	str	r3, [r7, #16]
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000ed0 	.word	0x20000ed0
 80058ac:	08007260 	.word	0x08007260
 80058b0:	080059ed 	.word	0x080059ed
 80058b4:	20000ed4 	.word	0x20000ed4

080058b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08a      	sub	sp, #40	; 0x28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058e6:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <xTimerGenericCommand+0x98>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02a      	beq.n	8005944 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	dc18      	bgt.n	8005932 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005900:	f7ff feb2 	bl	8005668 <xTaskGetSchedulerState>
 8005904:	4603      	mov	r3, r0
 8005906:	2b02      	cmp	r3, #2
 8005908:	d109      	bne.n	800591e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800590a:	4b11      	ldr	r3, [pc, #68]	; (8005950 <xTimerGenericCommand+0x98>)
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f107 0110 	add.w	r1, r7, #16
 8005912:	2300      	movs	r3, #0
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	f7fe fc29 	bl	800416c <xQueueGenericSend>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24
 800591c:	e012      	b.n	8005944 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800591e:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <xTimerGenericCommand+0x98>)
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f107 0110 	add.w	r1, r7, #16
 8005926:	2300      	movs	r3, #0
 8005928:	2200      	movs	r2, #0
 800592a:	f7fe fc1f 	bl	800416c <xQueueGenericSend>
 800592e:	6278      	str	r0, [r7, #36]	; 0x24
 8005930:	e008      	b.n	8005944 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <xTimerGenericCommand+0x98>)
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	f107 0110 	add.w	r1, r7, #16
 800593a:	2300      	movs	r3, #0
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	f7fe fd13 	bl	8004368 <xQueueGenericSendFromISR>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005946:	4618      	mov	r0, r3
 8005948:	3728      	adds	r7, #40	; 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000ed0 	.word	0x20000ed0

08005954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <prvProcessExpiredTimer+0x94>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fa2b 	bl	8003dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d022      	beq.n	80059c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	18d1      	adds	r1, r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	6978      	ldr	r0, [r7, #20]
 800598e:	f000 f8d1 	bl	8005b34 <prvInsertTimerInActiveList>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01f      	beq.n	80059d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	2100      	movs	r1, #0
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff ff88 	bl	80058b8 <xTimerGenericCommand>
 80059a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d113      	bne.n	80059d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	6978      	ldr	r0, [r7, #20]
 80059de:	4798      	blx	r3
}
 80059e0:	bf00      	nop
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000ec8 	.word	0x20000ec8

080059ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059f4:	f107 0308 	add.w	r3, r7, #8
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f857 	bl	8005aac <prvGetNextExpireTime>
 80059fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4619      	mov	r1, r3
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f803 	bl	8005a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a0a:	f000 f8d5 	bl	8005bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a0e:	e7f1      	b.n	80059f4 <prvTimerTask+0x8>

08005a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a1a:	f7ff fa39 	bl	8004e90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a1e:	f107 0308 	add.w	r3, r7, #8
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f866 	bl	8005af4 <prvSampleTimeNow>
 8005a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d130      	bne.n	8005a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <prvProcessTimerOrBlockTask+0x3c>
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d806      	bhi.n	8005a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a3e:	f7ff fa35 	bl	8004eac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ff85 	bl	8005954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a4a:	e024      	b.n	8005a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d008      	beq.n	8005a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <prvProcessTimerOrBlockTask+0x90>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <prvProcessTimerOrBlockTask+0x50>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <prvProcessTimerOrBlockTask+0x52>
 8005a60:	2300      	movs	r3, #0
 8005a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a64:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <prvProcessTimerOrBlockTask+0x94>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fe ff7d 	bl	8004970 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a76:	f7ff fa19 	bl	8004eac <xTaskResumeAll>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <prvProcessTimerOrBlockTask+0x98>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
}
 8005a90:	e001      	b.n	8005a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a92:	f7ff fa0b 	bl	8004eac <xTaskResumeAll>
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000ecc 	.word	0x20000ecc
 8005aa4:	20000ed0 	.word	0x20000ed0
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <prvGetNextExpireTime+0x44>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <prvGetNextExpireTime+0x16>
 8005abe:	2201      	movs	r2, #1
 8005ac0:	e000      	b.n	8005ac4 <prvGetNextExpireTime+0x18>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <prvGetNextExpireTime+0x44>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e001      	b.n	8005ae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000ec8 	.word	0x20000ec8

08005af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005afc:	f7ff fa74 	bl	8004fe8 <xTaskGetTickCount>
 8005b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <prvSampleTimeNow+0x3c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d205      	bcs.n	8005b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b0c:	f000 f936 	bl	8005d7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b1e:	4a04      	ldr	r2, [pc, #16]	; (8005b30 <prvSampleTimeNow+0x3c>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000ed8 	.word	0x20000ed8

08005b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d812      	bhi.n	8005b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e01b      	b.n	8005ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <prvInsertTimerInActiveList+0x7c>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe f8ec 	bl	8003d56 <vListInsert>
 8005b7e:	e012      	b.n	8005ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d206      	bcs.n	8005b96 <prvInsertTimerInActiveList+0x62>
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d302      	bcc.n	8005b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e007      	b.n	8005ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <prvInsertTimerInActiveList+0x80>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7fe f8d8 	bl	8003d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ba6:	697b      	ldr	r3, [r7, #20]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20000ecc 	.word	0x20000ecc
 8005bb4:	20000ec8 	.word	0x20000ec8

08005bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bbe:	e0ca      	b.n	8005d56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da18      	bge.n	8005bf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bc6:	1d3b      	adds	r3, r7, #4
 8005bc8:	3304      	adds	r3, #4
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61fb      	str	r3, [r7, #28]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bee:	6850      	ldr	r0, [r2, #4]
 8005bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf2:	6892      	ldr	r2, [r2, #8]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f2c0 80aa 	blt.w	8005d54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe f8d9 	bl	8003dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c16:	463b      	mov	r3, r7
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff ff6b 	bl	8005af4 <prvSampleTimeNow>
 8005c1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	f200 8097 	bhi.w	8005d56 <prvProcessReceivedCommands+0x19e>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <prvProcessReceivedCommands+0x78>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c59 	.word	0x08005c59
 8005c3c:	08005ccd 	.word	0x08005ccd
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005d2b 	.word	0x08005d2b
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c59 	.word	0x08005c59
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005ce1 	.word	0x08005ce1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	18d1      	adds	r1, r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c78:	f7ff ff5c 	bl	8005b34 <prvInsertTimerInActiveList>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d069      	beq.n	8005d56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d05e      	beq.n	8005d56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	441a      	add	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005caa:	f7ff fe05 	bl	80058b8 <xTimerGenericCommand>
 8005cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d14f      	bne.n	8005d56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61bb      	str	r3, [r7, #24]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cde:	e03a      	b.n	8005d56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	617b      	str	r3, [r7, #20]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	18d1      	adds	r1, r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d24:	f7ff ff06 	bl	8005b34 <prvInsertTimerInActiveList>
					break;
 8005d28:	e015      	b.n	8005d56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d103      	bne.n	8005d40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3a:	f000 fbe1 	bl	8006500 <vPortFree>
 8005d3e:	e00a      	b.n	8005d56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d46:	f023 0301 	bic.w	r3, r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d52:	e000      	b.n	8005d56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <prvProcessReceivedCommands+0x1c0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1d39      	adds	r1, r7, #4
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fb9e 	bl	80044a0 <xQueueReceive>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f47f af2a 	bne.w	8005bc0 <prvProcessReceivedCommands+0x8>
	}
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	3730      	adds	r7, #48	; 0x30
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000ed0 	.word	0x20000ed0

08005d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d82:	e048      	b.n	8005e16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d84:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe f813 	bl	8003dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02e      	beq.n	8005e16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d90e      	bls.n	8005de8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f7fd ffb8 	bl	8003d56 <vListInsert>
 8005de6:	e016      	b.n	8005e16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	2100      	movs	r1, #0
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fd60 	bl	80058b8 <xTimerGenericCommand>
 8005df8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	603b      	str	r3, [r7, #0]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1b1      	bne.n	8005d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <prvSwitchTimerLists+0xc4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a04      	ldr	r2, [pc, #16]	; (8005e3c <prvSwitchTimerLists+0xc0>)
 8005e2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <prvSwitchTimerLists+0xc4>)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	6013      	str	r3, [r2, #0]
}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000ec8 	.word	0x20000ec8
 8005e40:	20000ecc 	.word	0x20000ecc

08005e44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e4a:	f000 f96b 	bl	8006124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <prvCheckForValidListAndQueue+0x60>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d120      	bne.n	8005e98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e56:	4814      	ldr	r0, [pc, #80]	; (8005ea8 <prvCheckForValidListAndQueue+0x64>)
 8005e58:	f7fd ff2c 	bl	8003cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e5c:	4813      	ldr	r0, [pc, #76]	; (8005eac <prvCheckForValidListAndQueue+0x68>)
 8005e5e:	f7fd ff29 	bl	8003cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e62:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <prvCheckForValidListAndQueue+0x6c>)
 8005e64:	4a10      	ldr	r2, [pc, #64]	; (8005ea8 <prvCheckForValidListAndQueue+0x64>)
 8005e66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <prvCheckForValidListAndQueue+0x70>)
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <prvCheckForValidListAndQueue+0x68>)
 8005e6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <prvCheckForValidListAndQueue+0x74>)
 8005e74:	4a11      	ldr	r2, [pc, #68]	; (8005ebc <prvCheckForValidListAndQueue+0x78>)
 8005e76:	2110      	movs	r1, #16
 8005e78:	200a      	movs	r0, #10
 8005e7a:	f7fe f837 	bl	8003eec <xQueueGenericCreateStatic>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <prvCheckForValidListAndQueue+0x60>)
 8005e82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e84:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <prvCheckForValidListAndQueue+0x60>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <prvCheckForValidListAndQueue+0x60>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	490b      	ldr	r1, [pc, #44]	; (8005ec0 <prvCheckForValidListAndQueue+0x7c>)
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fe fd18 	bl	80048c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e98:	f000 f974 	bl	8006184 <vPortExitCritical>
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000ed0 	.word	0x20000ed0
 8005ea8:	20000ea0 	.word	0x20000ea0
 8005eac:	20000eb4 	.word	0x20000eb4
 8005eb0:	20000ec8 	.word	0x20000ec8
 8005eb4:	20000ecc 	.word	0x20000ecc
 8005eb8:	20000f7c 	.word	0x20000f7c
 8005ebc:	20000edc 	.word	0x20000edc
 8005ec0:	08007268 	.word	0x08007268

08005ec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <pxPortInitialiseStack+0x64>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b14      	subs	r3, #20
 8005efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f06f 0202 	mvn.w	r2, #2
 8005f12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b20      	subs	r3, #32
 8005f18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	08005f2d 	.word	0x08005f2d

08005f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <prvTaskExitError+0x54>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f3e:	d00a      	beq.n	8005f56 <prvTaskExitError+0x2a>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <prvTaskExitError+0x28>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f6a:	bf00      	nop
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0fc      	beq.n	8005f6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000014 	.word	0x20000014
	...

08005f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	4770      	bx	lr
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <prvPortStartFirstTask+0x24>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f380 8808 	msr	MSP, r0
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8814 	msr	CONTROL, r0
 8005fca:	b662      	cpsie	i
 8005fcc:	b661      	cpsie	f
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	df00      	svc	0
 8005fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fda:	bf00      	nop
 8005fdc:	e000ed08 	.word	0xe000ed08

08005fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fe6:	4b46      	ldr	r3, [pc, #280]	; (8006100 <xPortStartScheduler+0x120>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a46      	ldr	r2, [pc, #280]	; (8006104 <xPortStartScheduler+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10a      	bne.n	8006006 <xPortStartScheduler+0x26>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	613b      	str	r3, [r7, #16]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <xPortStartScheduler+0x120>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <xPortStartScheduler+0x128>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10a      	bne.n	8006026 <xPortStartScheduler+0x46>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006026:	4b39      	ldr	r3, [pc, #228]	; (800610c <xPortStartScheduler+0x12c>)
 8006028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	22ff      	movs	r2, #255	; 0xff
 8006036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <xPortStartScheduler+0x130>)
 800604c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <xPortStartScheduler+0x134>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006054:	e009      	b.n	800606a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <xPortStartScheduler+0x134>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <xPortStartScheduler+0x134>)
 800605e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b80      	cmp	r3, #128	; 0x80
 8006074:	d0ef      	beq.n	8006056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006076:	4b27      	ldr	r3, [pc, #156]	; (8006114 <xPortStartScheduler+0x134>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	d00a      	beq.n	8006098 <xPortStartScheduler+0xb8>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006098:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <xPortStartScheduler+0x134>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <xPortStartScheduler+0x134>)
 80060a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <xPortStartScheduler+0x134>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <xPortStartScheduler+0x134>)
 80060ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <xPortStartScheduler+0x138>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <xPortStartScheduler+0x138>)
 80060bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <xPortStartScheduler+0x138>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <xPortStartScheduler+0x138>)
 80060c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060ce:	f000 f8dd 	bl	800628c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <xPortStartScheduler+0x13c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060d8:	f000 f8fc 	bl	80062d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060dc:	4b10      	ldr	r3, [pc, #64]	; (8006120 <xPortStartScheduler+0x140>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0f      	ldr	r2, [pc, #60]	; (8006120 <xPortStartScheduler+0x140>)
 80060e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060e8:	f7ff ff66 	bl	8005fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060ec:	f7ff f846 	bl	800517c <vTaskSwitchContext>
	prvTaskExitError();
 80060f0:	f7ff ff1c 	bl	8005f2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000ed00 	.word	0xe000ed00
 8006104:	410fc271 	.word	0x410fc271
 8006108:	410fc270 	.word	0x410fc270
 800610c:	e000e400 	.word	0xe000e400
 8006110:	20000fcc 	.word	0x20000fcc
 8006114:	20000fd0 	.word	0x20000fd0
 8006118:	e000ed20 	.word	0xe000ed20
 800611c:	20000014 	.word	0x20000014
 8006120:	e000ef34 	.word	0xe000ef34

08006124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <vPortEnterCritical+0x58>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a0d      	ldr	r2, [pc, #52]	; (800617c <vPortEnterCritical+0x58>)
 8006146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <vPortEnterCritical+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10f      	bne.n	8006170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortEnterCritical+0x5c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <vPortEnterCritical+0x4c>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	603b      	str	r3, [r7, #0]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <vPortEnterCritical+0x4a>
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	20000014 	.word	0x20000014
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <vPortExitCritical+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <vPortExitCritical+0x24>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	607b      	str	r3, [r7, #4]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vPortExitCritical+0x50>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <vPortExitCritical+0x50>)
 80061b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <vPortExitCritical+0x42>
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f383 8811 	msr	BASEPRI, r3
}
 80061c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000014 	.word	0x20000014
	...

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7fe ffb4 	bl	800517c <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006262:	f7fe fed1 	bl	8005008 <xTaskIncrementTick>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <xPortSysTickHandler+0x40>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <vPortSetupTimerInterrupt+0x38>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <vPortSetupTimerInterrupt+0x44>)
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e010 	.word	0xe000e010
 80062c4:	e000e018 	.word	0xe000e018
 80062c8:	20000000 	.word	0x20000000
 80062cc:	10624dd3 	.word	0x10624dd3
 80062d0:	e000e014 	.word	0xe000e014

080062d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e4 <vPortEnableVFP+0x10>
 80062d8:	6801      	ldr	r1, [r0, #0]
 80062da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062de:	6001      	str	r1, [r0, #0]
 80062e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062e2:	bf00      	nop
 80062e4:	e000ed88 	.word	0xe000ed88

080062e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ee:	f3ef 8305 	mrs	r3, IPSR
 80062f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d914      	bls.n	8006324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <vPortValidateInterruptPriority+0x70>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <vPortValidateInterruptPriority+0x74>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	7afa      	ldrb	r2, [r7, #11]
 800630a:	429a      	cmp	r2, r3
 800630c:	d20a      	bcs.n	8006324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <vPortValidateInterruptPriority+0x78>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <vPortValidateInterruptPriority+0x7c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d90a      	bls.n	800634a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	603b      	str	r3, [r7, #0]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <vPortValidateInterruptPriority+0x60>
	}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	e000e3f0 	.word	0xe000e3f0
 800635c:	20000fcc 	.word	0x20000fcc
 8006360:	e000ed0c 	.word	0xe000ed0c
 8006364:	20000fd0 	.word	0x20000fd0

08006368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006374:	f7fe fd8c 	bl	8004e90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006378:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <pvPortMalloc+0x180>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006380:	f000 f920 	bl	80065c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006384:	4b59      	ldr	r3, [pc, #356]	; (80064ec <pvPortMalloc+0x184>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 8093 	bne.w	80064b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01d      	beq.n	80063d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006398:	2208      	movs	r2, #8
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d014      	beq.n	80063d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	3308      	adds	r3, #8
 80063b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <pvPortMalloc+0x6c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	617b      	str	r3, [r7, #20]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d06e      	beq.n	80064b8 <pvPortMalloc+0x150>
 80063da:	4b45      	ldr	r3, [pc, #276]	; (80064f0 <pvPortMalloc+0x188>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d869      	bhi.n	80064b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063e4:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <pvPortMalloc+0x18c>)
 80063e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063e8:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <pvPortMalloc+0x18c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ee:	e004      	b.n	80063fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <pvPortMalloc+0xa4>
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f1      	bne.n	80063f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <pvPortMalloc+0x180>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	429a      	cmp	r2, r3
 8006414:	d050      	beq.n	80064b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	2308      	movs	r3, #8
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	429a      	cmp	r2, r3
 8006436:	d91f      	bls.n	8006478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <pvPortMalloc+0xf8>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	613b      	str	r3, [r7, #16]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f000 f908 	bl	8006688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <pvPortMalloc+0x188>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <pvPortMalloc+0x188>)
 8006484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <pvPortMalloc+0x188>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <pvPortMalloc+0x190>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d203      	bcs.n	800649a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006492:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <pvPortMalloc+0x188>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <pvPortMalloc+0x190>)
 8006498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <pvPortMalloc+0x184>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <pvPortMalloc+0x194>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <pvPortMalloc+0x194>)
 80064b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064b8:	f7fe fcf8 	bl	8004eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <pvPortMalloc+0x174>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60fb      	str	r3, [r7, #12]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <pvPortMalloc+0x172>
	return pvReturn;
 80064dc:	69fb      	ldr	r3, [r7, #28]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3728      	adds	r7, #40	; 0x28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20004bdc 	.word	0x20004bdc
 80064ec:	20004bf0 	.word	0x20004bf0
 80064f0:	20004be0 	.word	0x20004be0
 80064f4:	20004bd4 	.word	0x20004bd4
 80064f8:	20004be4 	.word	0x20004be4
 80064fc:	20004be8 	.word	0x20004be8

08006500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04d      	beq.n	80065ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006512:	2308      	movs	r3, #8
 8006514:	425b      	negs	r3, r3
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <vPortFree+0xb8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <vPortFree+0x44>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	60fb      	str	r3, [r7, #12]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <vPortFree+0x62>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60bb      	str	r3, [r7, #8]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <vPortFree+0xb8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01e      	beq.n	80065ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11a      	bne.n	80065ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <vPortFree+0xb8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006588:	f7fe fc82 	bl	8004e90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <vPortFree+0xbc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4413      	add	r3, r2
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <vPortFree+0xbc>)
 8006598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800659a:	6938      	ldr	r0, [r7, #16]
 800659c:	f000 f874 	bl	8006688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <vPortFree+0xc0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	4a06      	ldr	r2, [pc, #24]	; (80065c0 <vPortFree+0xc0>)
 80065a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065aa:	f7fe fc7f 	bl	8004eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20004bf0 	.word	0x20004bf0
 80065bc:	20004be0 	.word	0x20004be0
 80065c0:	20004bec 	.word	0x20004bec

080065c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065d0:	4b27      	ldr	r3, [pc, #156]	; (8006670 <prvHeapInit+0xac>)
 80065d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00c      	beq.n	80065f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3307      	adds	r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <prvHeapInit+0xac>)
 80065f4:	4413      	add	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065fc:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <prvHeapInit+0xb0>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006602:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <prvHeapInit+0xb0>)
 8006604:	2200      	movs	r2, #0
 8006606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006610:	2208      	movs	r2, #8
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0307 	bic.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a15      	ldr	r2, [pc, #84]	; (8006678 <prvHeapInit+0xb4>)
 8006624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <prvHeapInit+0xb4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2200      	movs	r2, #0
 800662c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800662e:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvHeapInit+0xb4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <prvHeapInit+0xb4>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <prvHeapInit+0xb8>)
 8006652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <prvHeapInit+0xbc>)
 800665a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <prvHeapInit+0xc0>)
 800665e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000fd4 	.word	0x20000fd4
 8006674:	20004bd4 	.word	0x20004bd4
 8006678:	20004bdc 	.word	0x20004bdc
 800667c:	20004be4 	.word	0x20004be4
 8006680:	20004be0 	.word	0x20004be0
 8006684:	20004bf0 	.word	0x20004bf0

08006688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006690:	4b28      	ldr	r3, [pc, #160]	; (8006734 <prvInsertBlockIntoFreeList+0xac>)
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e002      	b.n	800669c <prvInsertBlockIntoFreeList+0x14>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d8f7      	bhi.n	8006696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4413      	add	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d108      	bne.n	80066ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d118      	bne.n	8006710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <prvInsertBlockIntoFreeList+0xb0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d00d      	beq.n	8006706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	441a      	add	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e008      	b.n	8006718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvInsertBlockIntoFreeList+0xb0>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e003      	b.n	8006718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d002      	beq.n	8006726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20004bd4 	.word	0x20004bd4
 8006738:	20004bdc 	.word	0x20004bdc

0800673c <__errno>:
 800673c:	4b01      	ldr	r3, [pc, #4]	; (8006744 <__errno+0x8>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000018 	.word	0x20000018

08006748 <__libc_init_array>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4d0d      	ldr	r5, [pc, #52]	; (8006780 <__libc_init_array+0x38>)
 800674c:	4c0d      	ldr	r4, [pc, #52]	; (8006784 <__libc_init_array+0x3c>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	2600      	movs	r6, #0
 8006754:	42a6      	cmp	r6, r4
 8006756:	d109      	bne.n	800676c <__libc_init_array+0x24>
 8006758:	4d0b      	ldr	r5, [pc, #44]	; (8006788 <__libc_init_array+0x40>)
 800675a:	4c0c      	ldr	r4, [pc, #48]	; (800678c <__libc_init_array+0x44>)
 800675c:	f000 fcf8 	bl	8007150 <_init>
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	2600      	movs	r6, #0
 8006766:	42a6      	cmp	r6, r4
 8006768:	d105      	bne.n	8006776 <__libc_init_array+0x2e>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006770:	4798      	blx	r3
 8006772:	3601      	adds	r6, #1
 8006774:	e7ee      	b.n	8006754 <__libc_init_array+0xc>
 8006776:	f855 3b04 	ldr.w	r3, [r5], #4
 800677a:	4798      	blx	r3
 800677c:	3601      	adds	r6, #1
 800677e:	e7f2      	b.n	8006766 <__libc_init_array+0x1e>
 8006780:	0800737c 	.word	0x0800737c
 8006784:	0800737c 	.word	0x0800737c
 8006788:	0800737c 	.word	0x0800737c
 800678c:	08007380 	.word	0x08007380

08006790 <__retarget_lock_acquire_recursive>:
 8006790:	4770      	bx	lr

08006792 <__retarget_lock_release_recursive>:
 8006792:	4770      	bx	lr

08006794 <memcpy>:
 8006794:	440a      	add	r2, r1
 8006796:	4291      	cmp	r1, r2
 8006798:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800679c:	d100      	bne.n	80067a0 <memcpy+0xc>
 800679e:	4770      	bx	lr
 80067a0:	b510      	push	{r4, lr}
 80067a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067aa:	4291      	cmp	r1, r2
 80067ac:	d1f9      	bne.n	80067a2 <memcpy+0xe>
 80067ae:	bd10      	pop	{r4, pc}

080067b0 <memset>:
 80067b0:	4402      	add	r2, r0
 80067b2:	4603      	mov	r3, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d100      	bne.n	80067ba <memset+0xa>
 80067b8:	4770      	bx	lr
 80067ba:	f803 1b01 	strb.w	r1, [r3], #1
 80067be:	e7f9      	b.n	80067b4 <memset+0x4>

080067c0 <sbrk_aligned>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4e0e      	ldr	r6, [pc, #56]	; (80067fc <sbrk_aligned+0x3c>)
 80067c4:	460c      	mov	r4, r1
 80067c6:	6831      	ldr	r1, [r6, #0]
 80067c8:	4605      	mov	r5, r0
 80067ca:	b911      	cbnz	r1, 80067d2 <sbrk_aligned+0x12>
 80067cc:	f000 f8f6 	bl	80069bc <_sbrk_r>
 80067d0:	6030      	str	r0, [r6, #0]
 80067d2:	4621      	mov	r1, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 f8f1 	bl	80069bc <_sbrk_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d00a      	beq.n	80067f4 <sbrk_aligned+0x34>
 80067de:	1cc4      	adds	r4, r0, #3
 80067e0:	f024 0403 	bic.w	r4, r4, #3
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d007      	beq.n	80067f8 <sbrk_aligned+0x38>
 80067e8:	1a21      	subs	r1, r4, r0
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f8e6 	bl	80069bc <_sbrk_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d101      	bne.n	80067f8 <sbrk_aligned+0x38>
 80067f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80067f8:	4620      	mov	r0, r4
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	20004bfc 	.word	0x20004bfc

08006800 <_malloc_r>:
 8006800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006804:	1ccd      	adds	r5, r1, #3
 8006806:	f025 0503 	bic.w	r5, r5, #3
 800680a:	3508      	adds	r5, #8
 800680c:	2d0c      	cmp	r5, #12
 800680e:	bf38      	it	cc
 8006810:	250c      	movcc	r5, #12
 8006812:	2d00      	cmp	r5, #0
 8006814:	4607      	mov	r7, r0
 8006816:	db01      	blt.n	800681c <_malloc_r+0x1c>
 8006818:	42a9      	cmp	r1, r5
 800681a:	d905      	bls.n	8006828 <_malloc_r+0x28>
 800681c:	230c      	movs	r3, #12
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	2600      	movs	r6, #0
 8006822:	4630      	mov	r0, r6
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006828:	4e2e      	ldr	r6, [pc, #184]	; (80068e4 <_malloc_r+0xe4>)
 800682a:	f000 f8f7 	bl	8006a1c <__malloc_lock>
 800682e:	6833      	ldr	r3, [r6, #0]
 8006830:	461c      	mov	r4, r3
 8006832:	bb34      	cbnz	r4, 8006882 <_malloc_r+0x82>
 8006834:	4629      	mov	r1, r5
 8006836:	4638      	mov	r0, r7
 8006838:	f7ff ffc2 	bl	80067c0 <sbrk_aligned>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	4604      	mov	r4, r0
 8006840:	d14d      	bne.n	80068de <_malloc_r+0xde>
 8006842:	6834      	ldr	r4, [r6, #0]
 8006844:	4626      	mov	r6, r4
 8006846:	2e00      	cmp	r6, #0
 8006848:	d140      	bne.n	80068cc <_malloc_r+0xcc>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	4631      	mov	r1, r6
 800684e:	4638      	mov	r0, r7
 8006850:	eb04 0803 	add.w	r8, r4, r3
 8006854:	f000 f8b2 	bl	80069bc <_sbrk_r>
 8006858:	4580      	cmp	r8, r0
 800685a:	d13a      	bne.n	80068d2 <_malloc_r+0xd2>
 800685c:	6821      	ldr	r1, [r4, #0]
 800685e:	3503      	adds	r5, #3
 8006860:	1a6d      	subs	r5, r5, r1
 8006862:	f025 0503 	bic.w	r5, r5, #3
 8006866:	3508      	adds	r5, #8
 8006868:	2d0c      	cmp	r5, #12
 800686a:	bf38      	it	cc
 800686c:	250c      	movcc	r5, #12
 800686e:	4629      	mov	r1, r5
 8006870:	4638      	mov	r0, r7
 8006872:	f7ff ffa5 	bl	80067c0 <sbrk_aligned>
 8006876:	3001      	adds	r0, #1
 8006878:	d02b      	beq.n	80068d2 <_malloc_r+0xd2>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	442b      	add	r3, r5
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	e00e      	b.n	80068a0 <_malloc_r+0xa0>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	1b52      	subs	r2, r2, r5
 8006886:	d41e      	bmi.n	80068c6 <_malloc_r+0xc6>
 8006888:	2a0b      	cmp	r2, #11
 800688a:	d916      	bls.n	80068ba <_malloc_r+0xba>
 800688c:	1961      	adds	r1, r4, r5
 800688e:	42a3      	cmp	r3, r4
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	bf18      	it	ne
 8006894:	6059      	strne	r1, [r3, #4]
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	bf08      	it	eq
 800689a:	6031      	streq	r1, [r6, #0]
 800689c:	5162      	str	r2, [r4, r5]
 800689e:	604b      	str	r3, [r1, #4]
 80068a0:	4638      	mov	r0, r7
 80068a2:	f104 060b 	add.w	r6, r4, #11
 80068a6:	f000 f8bf 	bl	8006a28 <__malloc_unlock>
 80068aa:	f026 0607 	bic.w	r6, r6, #7
 80068ae:	1d23      	adds	r3, r4, #4
 80068b0:	1af2      	subs	r2, r6, r3
 80068b2:	d0b6      	beq.n	8006822 <_malloc_r+0x22>
 80068b4:	1b9b      	subs	r3, r3, r6
 80068b6:	50a3      	str	r3, [r4, r2]
 80068b8:	e7b3      	b.n	8006822 <_malloc_r+0x22>
 80068ba:	6862      	ldr	r2, [r4, #4]
 80068bc:	42a3      	cmp	r3, r4
 80068be:	bf0c      	ite	eq
 80068c0:	6032      	streq	r2, [r6, #0]
 80068c2:	605a      	strne	r2, [r3, #4]
 80068c4:	e7ec      	b.n	80068a0 <_malloc_r+0xa0>
 80068c6:	4623      	mov	r3, r4
 80068c8:	6864      	ldr	r4, [r4, #4]
 80068ca:	e7b2      	b.n	8006832 <_malloc_r+0x32>
 80068cc:	4634      	mov	r4, r6
 80068ce:	6876      	ldr	r6, [r6, #4]
 80068d0:	e7b9      	b.n	8006846 <_malloc_r+0x46>
 80068d2:	230c      	movs	r3, #12
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	4638      	mov	r0, r7
 80068d8:	f000 f8a6 	bl	8006a28 <__malloc_unlock>
 80068dc:	e7a1      	b.n	8006822 <_malloc_r+0x22>
 80068de:	6025      	str	r5, [r4, #0]
 80068e0:	e7de      	b.n	80068a0 <_malloc_r+0xa0>
 80068e2:	bf00      	nop
 80068e4:	20004bf8 	.word	0x20004bf8

080068e8 <cleanup_glue>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	460c      	mov	r4, r1
 80068ec:	6809      	ldr	r1, [r1, #0]
 80068ee:	4605      	mov	r5, r0
 80068f0:	b109      	cbz	r1, 80068f6 <cleanup_glue+0xe>
 80068f2:	f7ff fff9 	bl	80068e8 <cleanup_glue>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068fe:	f000 b899 	b.w	8006a34 <_free_r>
	...

08006904 <_reclaim_reent>:
 8006904:	4b2c      	ldr	r3, [pc, #176]	; (80069b8 <_reclaim_reent+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4283      	cmp	r3, r0
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	d051      	beq.n	80069b4 <_reclaim_reent+0xb0>
 8006910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006912:	b143      	cbz	r3, 8006926 <_reclaim_reent+0x22>
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d14a      	bne.n	80069b0 <_reclaim_reent+0xac>
 800691a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	b111      	cbz	r1, 8006926 <_reclaim_reent+0x22>
 8006920:	4620      	mov	r0, r4
 8006922:	f000 f887 	bl	8006a34 <_free_r>
 8006926:	6961      	ldr	r1, [r4, #20]
 8006928:	b111      	cbz	r1, 8006930 <_reclaim_reent+0x2c>
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f882 	bl	8006a34 <_free_r>
 8006930:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006932:	b111      	cbz	r1, 800693a <_reclaim_reent+0x36>
 8006934:	4620      	mov	r0, r4
 8006936:	f000 f87d 	bl	8006a34 <_free_r>
 800693a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800693c:	b111      	cbz	r1, 8006944 <_reclaim_reent+0x40>
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f878 	bl	8006a34 <_free_r>
 8006944:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006946:	b111      	cbz	r1, 800694e <_reclaim_reent+0x4a>
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f873 	bl	8006a34 <_free_r>
 800694e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006950:	b111      	cbz	r1, 8006958 <_reclaim_reent+0x54>
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f86e 	bl	8006a34 <_free_r>
 8006958:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800695a:	b111      	cbz	r1, 8006962 <_reclaim_reent+0x5e>
 800695c:	4620      	mov	r0, r4
 800695e:	f000 f869 	bl	8006a34 <_free_r>
 8006962:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006964:	b111      	cbz	r1, 800696c <_reclaim_reent+0x68>
 8006966:	4620      	mov	r0, r4
 8006968:	f000 f864 	bl	8006a34 <_free_r>
 800696c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800696e:	b111      	cbz	r1, 8006976 <_reclaim_reent+0x72>
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f85f 	bl	8006a34 <_free_r>
 8006976:	69a3      	ldr	r3, [r4, #24]
 8006978:	b1e3      	cbz	r3, 80069b4 <_reclaim_reent+0xb0>
 800697a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800697c:	4620      	mov	r0, r4
 800697e:	4798      	blx	r3
 8006980:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006982:	b1b9      	cbz	r1, 80069b4 <_reclaim_reent+0xb0>
 8006984:	4620      	mov	r0, r4
 8006986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800698a:	f7ff bfad 	b.w	80068e8 <cleanup_glue>
 800698e:	5949      	ldr	r1, [r1, r5]
 8006990:	b941      	cbnz	r1, 80069a4 <_reclaim_reent+0xa0>
 8006992:	3504      	adds	r5, #4
 8006994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006996:	2d80      	cmp	r5, #128	; 0x80
 8006998:	68d9      	ldr	r1, [r3, #12]
 800699a:	d1f8      	bne.n	800698e <_reclaim_reent+0x8a>
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f849 	bl	8006a34 <_free_r>
 80069a2:	e7ba      	b.n	800691a <_reclaim_reent+0x16>
 80069a4:	680e      	ldr	r6, [r1, #0]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f844 	bl	8006a34 <_free_r>
 80069ac:	4631      	mov	r1, r6
 80069ae:	e7ef      	b.n	8006990 <_reclaim_reent+0x8c>
 80069b0:	2500      	movs	r5, #0
 80069b2:	e7ef      	b.n	8006994 <_reclaim_reent+0x90>
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	bf00      	nop
 80069b8:	20000018 	.word	0x20000018

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d06      	ldr	r5, [pc, #24]	; (80069d8 <_sbrk_r+0x1c>)
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fa f924 	bl	8000c14 <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20004c00 	.word	0x20004c00

080069dc <siprintf>:
 80069dc:	b40e      	push	{r1, r2, r3}
 80069de:	b500      	push	{lr}
 80069e0:	b09c      	sub	sp, #112	; 0x70
 80069e2:	ab1d      	add	r3, sp, #116	; 0x74
 80069e4:	9002      	str	r0, [sp, #8]
 80069e6:	9006      	str	r0, [sp, #24]
 80069e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069ec:	4809      	ldr	r0, [pc, #36]	; (8006a14 <siprintf+0x38>)
 80069ee:	9107      	str	r1, [sp, #28]
 80069f0:	9104      	str	r1, [sp, #16]
 80069f2:	4909      	ldr	r1, [pc, #36]	; (8006a18 <siprintf+0x3c>)
 80069f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	6800      	ldr	r0, [r0, #0]
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	a902      	add	r1, sp, #8
 8006a00:	f000 f8c0 	bl	8006b84 <_svfiprintf_r>
 8006a04:	9b02      	ldr	r3, [sp, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	b01c      	add	sp, #112	; 0x70
 8006a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a10:	b003      	add	sp, #12
 8006a12:	4770      	bx	lr
 8006a14:	20000018 	.word	0x20000018
 8006a18:	ffff0208 	.word	0xffff0208

08006a1c <__malloc_lock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	; (8006a24 <__malloc_lock+0x8>)
 8006a1e:	f7ff beb7 	b.w	8006790 <__retarget_lock_acquire_recursive>
 8006a22:	bf00      	nop
 8006a24:	20004bf4 	.word	0x20004bf4

08006a28 <__malloc_unlock>:
 8006a28:	4801      	ldr	r0, [pc, #4]	; (8006a30 <__malloc_unlock+0x8>)
 8006a2a:	f7ff beb2 	b.w	8006792 <__retarget_lock_release_recursive>
 8006a2e:	bf00      	nop
 8006a30:	20004bf4 	.word	0x20004bf4

08006a34 <_free_r>:
 8006a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d044      	beq.n	8006ac4 <_free_r+0x90>
 8006a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a3e:	9001      	str	r0, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f1a1 0404 	sub.w	r4, r1, #4
 8006a46:	bfb8      	it	lt
 8006a48:	18e4      	addlt	r4, r4, r3
 8006a4a:	f7ff ffe7 	bl	8006a1c <__malloc_lock>
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <_free_r+0x94>)
 8006a50:	9801      	ldr	r0, [sp, #4]
 8006a52:	6813      	ldr	r3, [r2, #0]
 8006a54:	b933      	cbnz	r3, 8006a64 <_free_r+0x30>
 8006a56:	6063      	str	r3, [r4, #4]
 8006a58:	6014      	str	r4, [r2, #0]
 8006a5a:	b003      	add	sp, #12
 8006a5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a60:	f7ff bfe2 	b.w	8006a28 <__malloc_unlock>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d908      	bls.n	8006a7a <_free_r+0x46>
 8006a68:	6825      	ldr	r5, [r4, #0]
 8006a6a:	1961      	adds	r1, r4, r5
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	bf01      	itttt	eq
 8006a70:	6819      	ldreq	r1, [r3, #0]
 8006a72:	685b      	ldreq	r3, [r3, #4]
 8006a74:	1949      	addeq	r1, r1, r5
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	e7ed      	b.n	8006a56 <_free_r+0x22>
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	b10b      	cbz	r3, 8006a84 <_free_r+0x50>
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	d9fa      	bls.n	8006a7a <_free_r+0x46>
 8006a84:	6811      	ldr	r1, [r2, #0]
 8006a86:	1855      	adds	r5, r2, r1
 8006a88:	42a5      	cmp	r5, r4
 8006a8a:	d10b      	bne.n	8006aa4 <_free_r+0x70>
 8006a8c:	6824      	ldr	r4, [r4, #0]
 8006a8e:	4421      	add	r1, r4
 8006a90:	1854      	adds	r4, r2, r1
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	6011      	str	r1, [r2, #0]
 8006a96:	d1e0      	bne.n	8006a5a <_free_r+0x26>
 8006a98:	681c      	ldr	r4, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	6053      	str	r3, [r2, #4]
 8006a9e:	4421      	add	r1, r4
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	e7da      	b.n	8006a5a <_free_r+0x26>
 8006aa4:	d902      	bls.n	8006aac <_free_r+0x78>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	6003      	str	r3, [r0, #0]
 8006aaa:	e7d6      	b.n	8006a5a <_free_r+0x26>
 8006aac:	6825      	ldr	r5, [r4, #0]
 8006aae:	1961      	adds	r1, r4, r5
 8006ab0:	428b      	cmp	r3, r1
 8006ab2:	bf04      	itt	eq
 8006ab4:	6819      	ldreq	r1, [r3, #0]
 8006ab6:	685b      	ldreq	r3, [r3, #4]
 8006ab8:	6063      	str	r3, [r4, #4]
 8006aba:	bf04      	itt	eq
 8006abc:	1949      	addeq	r1, r1, r5
 8006abe:	6021      	streq	r1, [r4, #0]
 8006ac0:	6054      	str	r4, [r2, #4]
 8006ac2:	e7ca      	b.n	8006a5a <_free_r+0x26>
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bd30      	pop	{r4, r5, pc}
 8006ac8:	20004bf8 	.word	0x20004bf8

08006acc <__ssputs_r>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	688e      	ldr	r6, [r1, #8]
 8006ad2:	429e      	cmp	r6, r3
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	4690      	mov	r8, r2
 8006ada:	461f      	mov	r7, r3
 8006adc:	d838      	bhi.n	8006b50 <__ssputs_r+0x84>
 8006ade:	898a      	ldrh	r2, [r1, #12]
 8006ae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ae4:	d032      	beq.n	8006b4c <__ssputs_r+0x80>
 8006ae6:	6825      	ldr	r5, [r4, #0]
 8006ae8:	6909      	ldr	r1, [r1, #16]
 8006aea:	eba5 0901 	sub.w	r9, r5, r1
 8006aee:	6965      	ldr	r5, [r4, #20]
 8006af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006af8:	3301      	adds	r3, #1
 8006afa:	444b      	add	r3, r9
 8006afc:	106d      	asrs	r5, r5, #1
 8006afe:	429d      	cmp	r5, r3
 8006b00:	bf38      	it	cc
 8006b02:	461d      	movcc	r5, r3
 8006b04:	0553      	lsls	r3, r2, #21
 8006b06:	d531      	bpl.n	8006b6c <__ssputs_r+0xa0>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7ff fe79 	bl	8006800 <_malloc_r>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	b950      	cbnz	r0, 8006b28 <__ssputs_r+0x5c>
 8006b12:	230c      	movs	r3, #12
 8006b14:	f8ca 3000 	str.w	r3, [sl]
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1e:	81a3      	strh	r3, [r4, #12]
 8006b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b28:	6921      	ldr	r1, [r4, #16]
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	f7ff fe32 	bl	8006794 <memcpy>
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	6126      	str	r6, [r4, #16]
 8006b3e:	6165      	str	r5, [r4, #20]
 8006b40:	444e      	add	r6, r9
 8006b42:	eba5 0509 	sub.w	r5, r5, r9
 8006b46:	6026      	str	r6, [r4, #0]
 8006b48:	60a5      	str	r5, [r4, #8]
 8006b4a:	463e      	mov	r6, r7
 8006b4c:	42be      	cmp	r6, r7
 8006b4e:	d900      	bls.n	8006b52 <__ssputs_r+0x86>
 8006b50:	463e      	mov	r6, r7
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	4632      	mov	r2, r6
 8006b56:	4641      	mov	r1, r8
 8006b58:	f000 faa8 	bl	80070ac <memmove>
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	1b9b      	subs	r3, r3, r6
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	4433      	add	r3, r6
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e7db      	b.n	8006b24 <__ssputs_r+0x58>
 8006b6c:	462a      	mov	r2, r5
 8006b6e:	f000 fab7 	bl	80070e0 <_realloc_r>
 8006b72:	4606      	mov	r6, r0
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1e1      	bne.n	8006b3c <__ssputs_r+0x70>
 8006b78:	6921      	ldr	r1, [r4, #16]
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f7ff ff5a 	bl	8006a34 <_free_r>
 8006b80:	e7c7      	b.n	8006b12 <__ssputs_r+0x46>
	...

08006b84 <_svfiprintf_r>:
 8006b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	4698      	mov	r8, r3
 8006b8a:	898b      	ldrh	r3, [r1, #12]
 8006b8c:	061b      	lsls	r3, r3, #24
 8006b8e:	b09d      	sub	sp, #116	; 0x74
 8006b90:	4607      	mov	r7, r0
 8006b92:	460d      	mov	r5, r1
 8006b94:	4614      	mov	r4, r2
 8006b96:	d50e      	bpl.n	8006bb6 <_svfiprintf_r+0x32>
 8006b98:	690b      	ldr	r3, [r1, #16]
 8006b9a:	b963      	cbnz	r3, 8006bb6 <_svfiprintf_r+0x32>
 8006b9c:	2140      	movs	r1, #64	; 0x40
 8006b9e:	f7ff fe2f 	bl	8006800 <_malloc_r>
 8006ba2:	6028      	str	r0, [r5, #0]
 8006ba4:	6128      	str	r0, [r5, #16]
 8006ba6:	b920      	cbnz	r0, 8006bb2 <_svfiprintf_r+0x2e>
 8006ba8:	230c      	movs	r3, #12
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb0:	e0d1      	b.n	8006d56 <_svfiprintf_r+0x1d2>
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	616b      	str	r3, [r5, #20]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bba:	2320      	movs	r3, #32
 8006bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc4:	2330      	movs	r3, #48	; 0x30
 8006bc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d70 <_svfiprintf_r+0x1ec>
 8006bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bce:	f04f 0901 	mov.w	r9, #1
 8006bd2:	4623      	mov	r3, r4
 8006bd4:	469a      	mov	sl, r3
 8006bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bda:	b10a      	cbz	r2, 8006be0 <_svfiprintf_r+0x5c>
 8006bdc:	2a25      	cmp	r2, #37	; 0x25
 8006bde:	d1f9      	bne.n	8006bd4 <_svfiprintf_r+0x50>
 8006be0:	ebba 0b04 	subs.w	fp, sl, r4
 8006be4:	d00b      	beq.n	8006bfe <_svfiprintf_r+0x7a>
 8006be6:	465b      	mov	r3, fp
 8006be8:	4622      	mov	r2, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff ff6d 	bl	8006acc <__ssputs_r>
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f000 80aa 	beq.w	8006d4c <_svfiprintf_r+0x1c8>
 8006bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bfa:	445a      	add	r2, fp
 8006bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80a2 	beq.w	8006d4c <_svfiprintf_r+0x1c8>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c12:	f10a 0a01 	add.w	sl, sl, #1
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c20:	4654      	mov	r4, sl
 8006c22:	2205      	movs	r2, #5
 8006c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c28:	4851      	ldr	r0, [pc, #324]	; (8006d70 <_svfiprintf_r+0x1ec>)
 8006c2a:	f7f9 fad9 	bl	80001e0 <memchr>
 8006c2e:	9a04      	ldr	r2, [sp, #16]
 8006c30:	b9d8      	cbnz	r0, 8006c6a <_svfiprintf_r+0xe6>
 8006c32:	06d0      	lsls	r0, r2, #27
 8006c34:	bf44      	itt	mi
 8006c36:	2320      	movmi	r3, #32
 8006c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c3c:	0711      	lsls	r1, r2, #28
 8006c3e:	bf44      	itt	mi
 8006c40:	232b      	movmi	r3, #43	; 0x2b
 8006c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c46:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4c:	d015      	beq.n	8006c7a <_svfiprintf_r+0xf6>
 8006c4e:	9a07      	ldr	r2, [sp, #28]
 8006c50:	4654      	mov	r4, sl
 8006c52:	2000      	movs	r0, #0
 8006c54:	f04f 0c0a 	mov.w	ip, #10
 8006c58:	4621      	mov	r1, r4
 8006c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5e:	3b30      	subs	r3, #48	; 0x30
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d94e      	bls.n	8006d02 <_svfiprintf_r+0x17e>
 8006c64:	b1b0      	cbz	r0, 8006c94 <_svfiprintf_r+0x110>
 8006c66:	9207      	str	r2, [sp, #28]
 8006c68:	e014      	b.n	8006c94 <_svfiprintf_r+0x110>
 8006c6a:	eba0 0308 	sub.w	r3, r0, r8
 8006c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	9304      	str	r3, [sp, #16]
 8006c76:	46a2      	mov	sl, r4
 8006c78:	e7d2      	b.n	8006c20 <_svfiprintf_r+0x9c>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	1d19      	adds	r1, r3, #4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	9103      	str	r1, [sp, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bfbb      	ittet	lt
 8006c86:	425b      	neglt	r3, r3
 8006c88:	f042 0202 	orrlt.w	r2, r2, #2
 8006c8c:	9307      	strge	r3, [sp, #28]
 8006c8e:	9307      	strlt	r3, [sp, #28]
 8006c90:	bfb8      	it	lt
 8006c92:	9204      	strlt	r2, [sp, #16]
 8006c94:	7823      	ldrb	r3, [r4, #0]
 8006c96:	2b2e      	cmp	r3, #46	; 0x2e
 8006c98:	d10c      	bne.n	8006cb4 <_svfiprintf_r+0x130>
 8006c9a:	7863      	ldrb	r3, [r4, #1]
 8006c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9e:	d135      	bne.n	8006d0c <_svfiprintf_r+0x188>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	9203      	str	r2, [sp, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfb8      	it	lt
 8006cac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cb0:	3402      	adds	r4, #2
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d80 <_svfiprintf_r+0x1fc>
 8006cb8:	7821      	ldrb	r1, [r4, #0]
 8006cba:	2203      	movs	r2, #3
 8006cbc:	4650      	mov	r0, sl
 8006cbe:	f7f9 fa8f 	bl	80001e0 <memchr>
 8006cc2:	b140      	cbz	r0, 8006cd6 <_svfiprintf_r+0x152>
 8006cc4:	2340      	movs	r3, #64	; 0x40
 8006cc6:	eba0 000a 	sub.w	r0, r0, sl
 8006cca:	fa03 f000 	lsl.w	r0, r3, r0
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	4303      	orrs	r3, r0
 8006cd2:	3401      	adds	r4, #1
 8006cd4:	9304      	str	r3, [sp, #16]
 8006cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cda:	4826      	ldr	r0, [pc, #152]	; (8006d74 <_svfiprintf_r+0x1f0>)
 8006cdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ce0:	2206      	movs	r2, #6
 8006ce2:	f7f9 fa7d 	bl	80001e0 <memchr>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d038      	beq.n	8006d5c <_svfiprintf_r+0x1d8>
 8006cea:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <_svfiprintf_r+0x1f4>)
 8006cec:	bb1b      	cbnz	r3, 8006d36 <_svfiprintf_r+0x1b2>
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	3307      	adds	r3, #7
 8006cf2:	f023 0307 	bic.w	r3, r3, #7
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfc:	4433      	add	r3, r6
 8006cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006d00:	e767      	b.n	8006bd2 <_svfiprintf_r+0x4e>
 8006d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d06:	460c      	mov	r4, r1
 8006d08:	2001      	movs	r0, #1
 8006d0a:	e7a5      	b.n	8006c58 <_svfiprintf_r+0xd4>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	3401      	adds	r4, #1
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	4619      	mov	r1, r3
 8006d14:	f04f 0c0a 	mov.w	ip, #10
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d1e:	3a30      	subs	r2, #48	; 0x30
 8006d20:	2a09      	cmp	r2, #9
 8006d22:	d903      	bls.n	8006d2c <_svfiprintf_r+0x1a8>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0c5      	beq.n	8006cb4 <_svfiprintf_r+0x130>
 8006d28:	9105      	str	r1, [sp, #20]
 8006d2a:	e7c3      	b.n	8006cb4 <_svfiprintf_r+0x130>
 8006d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d30:	4604      	mov	r4, r0
 8006d32:	2301      	movs	r3, #1
 8006d34:	e7f0      	b.n	8006d18 <_svfiprintf_r+0x194>
 8006d36:	ab03      	add	r3, sp, #12
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <_svfiprintf_r+0x1f8>)
 8006d3e:	a904      	add	r1, sp, #16
 8006d40:	4638      	mov	r0, r7
 8006d42:	f3af 8000 	nop.w
 8006d46:	1c42      	adds	r2, r0, #1
 8006d48:	4606      	mov	r6, r0
 8006d4a:	d1d6      	bne.n	8006cfa <_svfiprintf_r+0x176>
 8006d4c:	89ab      	ldrh	r3, [r5, #12]
 8006d4e:	065b      	lsls	r3, r3, #25
 8006d50:	f53f af2c 	bmi.w	8006bac <_svfiprintf_r+0x28>
 8006d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d56:	b01d      	add	sp, #116	; 0x74
 8006d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5c:	ab03      	add	r3, sp, #12
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	462a      	mov	r2, r5
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <_svfiprintf_r+0x1f8>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	4638      	mov	r0, r7
 8006d68:	f000 f87a 	bl	8006e60 <_printf_i>
 8006d6c:	e7eb      	b.n	8006d46 <_svfiprintf_r+0x1c2>
 8006d6e:	bf00      	nop
 8006d70:	08007340 	.word	0x08007340
 8006d74:	0800734a 	.word	0x0800734a
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	08006acd 	.word	0x08006acd
 8006d80:	08007346 	.word	0x08007346

08006d84 <_printf_common>:
 8006d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	4616      	mov	r6, r2
 8006d8a:	4699      	mov	r9, r3
 8006d8c:	688a      	ldr	r2, [r1, #8]
 8006d8e:	690b      	ldr	r3, [r1, #16]
 8006d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d94:	4293      	cmp	r3, r2
 8006d96:	bfb8      	it	lt
 8006d98:	4613      	movlt	r3, r2
 8006d9a:	6033      	str	r3, [r6, #0]
 8006d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006da0:	4607      	mov	r7, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	b10a      	cbz	r2, 8006daa <_printf_common+0x26>
 8006da6:	3301      	adds	r3, #1
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	0699      	lsls	r1, r3, #26
 8006dae:	bf42      	ittt	mi
 8006db0:	6833      	ldrmi	r3, [r6, #0]
 8006db2:	3302      	addmi	r3, #2
 8006db4:	6033      	strmi	r3, [r6, #0]
 8006db6:	6825      	ldr	r5, [r4, #0]
 8006db8:	f015 0506 	ands.w	r5, r5, #6
 8006dbc:	d106      	bne.n	8006dcc <_printf_common+0x48>
 8006dbe:	f104 0a19 	add.w	sl, r4, #25
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	6832      	ldr	r2, [r6, #0]
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	dc26      	bgt.n	8006e1a <_printf_common+0x96>
 8006dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dd0:	1e13      	subs	r3, r2, #0
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	bf18      	it	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	0692      	lsls	r2, r2, #26
 8006dda:	d42b      	bmi.n	8006e34 <_printf_common+0xb0>
 8006ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de0:	4649      	mov	r1, r9
 8006de2:	4638      	mov	r0, r7
 8006de4:	47c0      	blx	r8
 8006de6:	3001      	adds	r0, #1
 8006de8:	d01e      	beq.n	8006e28 <_printf_common+0xa4>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	68e5      	ldr	r5, [r4, #12]
 8006dee:	6832      	ldr	r2, [r6, #0]
 8006df0:	f003 0306 	and.w	r3, r3, #6
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	bf08      	it	eq
 8006df8:	1aad      	subeq	r5, r5, r2
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	6922      	ldr	r2, [r4, #16]
 8006dfe:	bf0c      	ite	eq
 8006e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e04:	2500      	movne	r5, #0
 8006e06:	4293      	cmp	r3, r2
 8006e08:	bfc4      	itt	gt
 8006e0a:	1a9b      	subgt	r3, r3, r2
 8006e0c:	18ed      	addgt	r5, r5, r3
 8006e0e:	2600      	movs	r6, #0
 8006e10:	341a      	adds	r4, #26
 8006e12:	42b5      	cmp	r5, r6
 8006e14:	d11a      	bne.n	8006e4c <_printf_common+0xc8>
 8006e16:	2000      	movs	r0, #0
 8006e18:	e008      	b.n	8006e2c <_printf_common+0xa8>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4652      	mov	r2, sl
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4638      	mov	r0, r7
 8006e22:	47c0      	blx	r8
 8006e24:	3001      	adds	r0, #1
 8006e26:	d103      	bne.n	8006e30 <_printf_common+0xac>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e30:	3501      	adds	r5, #1
 8006e32:	e7c6      	b.n	8006dc2 <_printf_common+0x3e>
 8006e34:	18e1      	adds	r1, r4, r3
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	2030      	movs	r0, #48	; 0x30
 8006e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e3e:	4422      	add	r2, r4
 8006e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e48:	3302      	adds	r3, #2
 8006e4a:	e7c7      	b.n	8006ddc <_printf_common+0x58>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4649      	mov	r1, r9
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c0      	blx	r8
 8006e56:	3001      	adds	r0, #1
 8006e58:	d0e6      	beq.n	8006e28 <_printf_common+0xa4>
 8006e5a:	3601      	adds	r6, #1
 8006e5c:	e7d9      	b.n	8006e12 <_printf_common+0x8e>
	...

08006e60 <_printf_i>:
 8006e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	7e0f      	ldrb	r7, [r1, #24]
 8006e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e68:	2f78      	cmp	r7, #120	; 0x78
 8006e6a:	4691      	mov	r9, r2
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	469a      	mov	sl, r3
 8006e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e76:	d807      	bhi.n	8006e88 <_printf_i+0x28>
 8006e78:	2f62      	cmp	r7, #98	; 0x62
 8006e7a:	d80a      	bhi.n	8006e92 <_printf_i+0x32>
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	f000 80d8 	beq.w	8007032 <_printf_i+0x1d2>
 8006e82:	2f58      	cmp	r7, #88	; 0x58
 8006e84:	f000 80a3 	beq.w	8006fce <_printf_i+0x16e>
 8006e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e90:	e03a      	b.n	8006f08 <_printf_i+0xa8>
 8006e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e96:	2b15      	cmp	r3, #21
 8006e98:	d8f6      	bhi.n	8006e88 <_printf_i+0x28>
 8006e9a:	a101      	add	r1, pc, #4	; (adr r1, 8006ea0 <_printf_i+0x40>)
 8006e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea0:	08006ef9 	.word	0x08006ef9
 8006ea4:	08006f0d 	.word	0x08006f0d
 8006ea8:	08006e89 	.word	0x08006e89
 8006eac:	08006e89 	.word	0x08006e89
 8006eb0:	08006e89 	.word	0x08006e89
 8006eb4:	08006e89 	.word	0x08006e89
 8006eb8:	08006f0d 	.word	0x08006f0d
 8006ebc:	08006e89 	.word	0x08006e89
 8006ec0:	08006e89 	.word	0x08006e89
 8006ec4:	08006e89 	.word	0x08006e89
 8006ec8:	08006e89 	.word	0x08006e89
 8006ecc:	08007019 	.word	0x08007019
 8006ed0:	08006f3d 	.word	0x08006f3d
 8006ed4:	08006ffb 	.word	0x08006ffb
 8006ed8:	08006e89 	.word	0x08006e89
 8006edc:	08006e89 	.word	0x08006e89
 8006ee0:	0800703b 	.word	0x0800703b
 8006ee4:	08006e89 	.word	0x08006e89
 8006ee8:	08006f3d 	.word	0x08006f3d
 8006eec:	08006e89 	.word	0x08006e89
 8006ef0:	08006e89 	.word	0x08006e89
 8006ef4:	08007003 	.word	0x08007003
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	602a      	str	r2, [r5, #0]
 8006f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0a3      	b.n	8007054 <_printf_i+0x1f4>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	6829      	ldr	r1, [r5, #0]
 8006f10:	0606      	lsls	r6, r0, #24
 8006f12:	f101 0304 	add.w	r3, r1, #4
 8006f16:	d50a      	bpl.n	8006f2e <_printf_i+0xce>
 8006f18:	680e      	ldr	r6, [r1, #0]
 8006f1a:	602b      	str	r3, [r5, #0]
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	da03      	bge.n	8006f28 <_printf_i+0xc8>
 8006f20:	232d      	movs	r3, #45	; 0x2d
 8006f22:	4276      	negs	r6, r6
 8006f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f28:	485e      	ldr	r0, [pc, #376]	; (80070a4 <_printf_i+0x244>)
 8006f2a:	230a      	movs	r3, #10
 8006f2c:	e019      	b.n	8006f62 <_printf_i+0x102>
 8006f2e:	680e      	ldr	r6, [r1, #0]
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f36:	bf18      	it	ne
 8006f38:	b236      	sxthne	r6, r6
 8006f3a:	e7ef      	b.n	8006f1c <_printf_i+0xbc>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	1d19      	adds	r1, r3, #4
 8006f42:	6029      	str	r1, [r5, #0]
 8006f44:	0601      	lsls	r1, r0, #24
 8006f46:	d501      	bpl.n	8006f4c <_printf_i+0xec>
 8006f48:	681e      	ldr	r6, [r3, #0]
 8006f4a:	e002      	b.n	8006f52 <_printf_i+0xf2>
 8006f4c:	0646      	lsls	r6, r0, #25
 8006f4e:	d5fb      	bpl.n	8006f48 <_printf_i+0xe8>
 8006f50:	881e      	ldrh	r6, [r3, #0]
 8006f52:	4854      	ldr	r0, [pc, #336]	; (80070a4 <_printf_i+0x244>)
 8006f54:	2f6f      	cmp	r7, #111	; 0x6f
 8006f56:	bf0c      	ite	eq
 8006f58:	2308      	moveq	r3, #8
 8006f5a:	230a      	movne	r3, #10
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f62:	6865      	ldr	r5, [r4, #4]
 8006f64:	60a5      	str	r5, [r4, #8]
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	bfa2      	ittt	ge
 8006f6a:	6821      	ldrge	r1, [r4, #0]
 8006f6c:	f021 0104 	bicge.w	r1, r1, #4
 8006f70:	6021      	strge	r1, [r4, #0]
 8006f72:	b90e      	cbnz	r6, 8006f78 <_printf_i+0x118>
 8006f74:	2d00      	cmp	r5, #0
 8006f76:	d04d      	beq.n	8007014 <_printf_i+0x1b4>
 8006f78:	4615      	mov	r5, r2
 8006f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f82:	5dc7      	ldrb	r7, [r0, r7]
 8006f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f88:	4637      	mov	r7, r6
 8006f8a:	42bb      	cmp	r3, r7
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	d9f4      	bls.n	8006f7a <_printf_i+0x11a>
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d10b      	bne.n	8006fac <_printf_i+0x14c>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	07de      	lsls	r6, r3, #31
 8006f98:	d508      	bpl.n	8006fac <_printf_i+0x14c>
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	6861      	ldr	r1, [r4, #4]
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	bfde      	ittt	le
 8006fa2:	2330      	movle	r3, #48	; 0x30
 8006fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006fac:	1b52      	subs	r2, r2, r5
 8006fae:	6122      	str	r2, [r4, #16]
 8006fb0:	f8cd a000 	str.w	sl, [sp]
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff fee2 	bl	8006d84 <_printf_common>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d14c      	bne.n	800705e <_printf_i+0x1fe>
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fc8:	b004      	add	sp, #16
 8006fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fce:	4835      	ldr	r0, [pc, #212]	; (80070a4 <_printf_i+0x244>)
 8006fd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fd4:	6829      	ldr	r1, [r5, #0]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fdc:	6029      	str	r1, [r5, #0]
 8006fde:	061d      	lsls	r5, r3, #24
 8006fe0:	d514      	bpl.n	800700c <_printf_i+0x1ac>
 8006fe2:	07df      	lsls	r7, r3, #31
 8006fe4:	bf44      	itt	mi
 8006fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8006fea:	6023      	strmi	r3, [r4, #0]
 8006fec:	b91e      	cbnz	r6, 8006ff6 <_printf_i+0x196>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	f023 0320 	bic.w	r3, r3, #32
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	2310      	movs	r3, #16
 8006ff8:	e7b0      	b.n	8006f5c <_printf_i+0xfc>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	f043 0320 	orr.w	r3, r3, #32
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	2378      	movs	r3, #120	; 0x78
 8007004:	4828      	ldr	r0, [pc, #160]	; (80070a8 <_printf_i+0x248>)
 8007006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800700a:	e7e3      	b.n	8006fd4 <_printf_i+0x174>
 800700c:	0659      	lsls	r1, r3, #25
 800700e:	bf48      	it	mi
 8007010:	b2b6      	uxthmi	r6, r6
 8007012:	e7e6      	b.n	8006fe2 <_printf_i+0x182>
 8007014:	4615      	mov	r5, r2
 8007016:	e7bb      	b.n	8006f90 <_printf_i+0x130>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	6826      	ldr	r6, [r4, #0]
 800701c:	6961      	ldr	r1, [r4, #20]
 800701e:	1d18      	adds	r0, r3, #4
 8007020:	6028      	str	r0, [r5, #0]
 8007022:	0635      	lsls	r5, r6, #24
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	d501      	bpl.n	800702c <_printf_i+0x1cc>
 8007028:	6019      	str	r1, [r3, #0]
 800702a:	e002      	b.n	8007032 <_printf_i+0x1d2>
 800702c:	0670      	lsls	r0, r6, #25
 800702e:	d5fb      	bpl.n	8007028 <_printf_i+0x1c8>
 8007030:	8019      	strh	r1, [r3, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	4615      	mov	r5, r2
 8007038:	e7ba      	b.n	8006fb0 <_printf_i+0x150>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	1d1a      	adds	r2, r3, #4
 800703e:	602a      	str	r2, [r5, #0]
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	6862      	ldr	r2, [r4, #4]
 8007044:	2100      	movs	r1, #0
 8007046:	4628      	mov	r0, r5
 8007048:	f7f9 f8ca 	bl	80001e0 <memchr>
 800704c:	b108      	cbz	r0, 8007052 <_printf_i+0x1f2>
 800704e:	1b40      	subs	r0, r0, r5
 8007050:	6060      	str	r0, [r4, #4]
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	2300      	movs	r3, #0
 8007058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705c:	e7a8      	b.n	8006fb0 <_printf_i+0x150>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	462a      	mov	r2, r5
 8007062:	4649      	mov	r1, r9
 8007064:	4640      	mov	r0, r8
 8007066:	47d0      	blx	sl
 8007068:	3001      	adds	r0, #1
 800706a:	d0ab      	beq.n	8006fc4 <_printf_i+0x164>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	079b      	lsls	r3, r3, #30
 8007070:	d413      	bmi.n	800709a <_printf_i+0x23a>
 8007072:	68e0      	ldr	r0, [r4, #12]
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	4298      	cmp	r0, r3
 8007078:	bfb8      	it	lt
 800707a:	4618      	movlt	r0, r3
 800707c:	e7a4      	b.n	8006fc8 <_printf_i+0x168>
 800707e:	2301      	movs	r3, #1
 8007080:	4632      	mov	r2, r6
 8007082:	4649      	mov	r1, r9
 8007084:	4640      	mov	r0, r8
 8007086:	47d0      	blx	sl
 8007088:	3001      	adds	r0, #1
 800708a:	d09b      	beq.n	8006fc4 <_printf_i+0x164>
 800708c:	3501      	adds	r5, #1
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	9903      	ldr	r1, [sp, #12]
 8007092:	1a5b      	subs	r3, r3, r1
 8007094:	42ab      	cmp	r3, r5
 8007096:	dcf2      	bgt.n	800707e <_printf_i+0x21e>
 8007098:	e7eb      	b.n	8007072 <_printf_i+0x212>
 800709a:	2500      	movs	r5, #0
 800709c:	f104 0619 	add.w	r6, r4, #25
 80070a0:	e7f5      	b.n	800708e <_printf_i+0x22e>
 80070a2:	bf00      	nop
 80070a4:	08007351 	.word	0x08007351
 80070a8:	08007362 	.word	0x08007362

080070ac <memmove>:
 80070ac:	4288      	cmp	r0, r1
 80070ae:	b510      	push	{r4, lr}
 80070b0:	eb01 0402 	add.w	r4, r1, r2
 80070b4:	d902      	bls.n	80070bc <memmove+0x10>
 80070b6:	4284      	cmp	r4, r0
 80070b8:	4623      	mov	r3, r4
 80070ba:	d807      	bhi.n	80070cc <memmove+0x20>
 80070bc:	1e43      	subs	r3, r0, #1
 80070be:	42a1      	cmp	r1, r4
 80070c0:	d008      	beq.n	80070d4 <memmove+0x28>
 80070c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070ca:	e7f8      	b.n	80070be <memmove+0x12>
 80070cc:	4402      	add	r2, r0
 80070ce:	4601      	mov	r1, r0
 80070d0:	428a      	cmp	r2, r1
 80070d2:	d100      	bne.n	80070d6 <memmove+0x2a>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070de:	e7f7      	b.n	80070d0 <memmove+0x24>

080070e0 <_realloc_r>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	4680      	mov	r8, r0
 80070e6:	4614      	mov	r4, r2
 80070e8:	460e      	mov	r6, r1
 80070ea:	b921      	cbnz	r1, 80070f6 <_realloc_r+0x16>
 80070ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070f0:	4611      	mov	r1, r2
 80070f2:	f7ff bb85 	b.w	8006800 <_malloc_r>
 80070f6:	b92a      	cbnz	r2, 8007104 <_realloc_r+0x24>
 80070f8:	f7ff fc9c 	bl	8006a34 <_free_r>
 80070fc:	4625      	mov	r5, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	f000 f81b 	bl	800713e <_malloc_usable_size_r>
 8007108:	4284      	cmp	r4, r0
 800710a:	4607      	mov	r7, r0
 800710c:	d802      	bhi.n	8007114 <_realloc_r+0x34>
 800710e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007112:	d812      	bhi.n	800713a <_realloc_r+0x5a>
 8007114:	4621      	mov	r1, r4
 8007116:	4640      	mov	r0, r8
 8007118:	f7ff fb72 	bl	8006800 <_malloc_r>
 800711c:	4605      	mov	r5, r0
 800711e:	2800      	cmp	r0, #0
 8007120:	d0ed      	beq.n	80070fe <_realloc_r+0x1e>
 8007122:	42bc      	cmp	r4, r7
 8007124:	4622      	mov	r2, r4
 8007126:	4631      	mov	r1, r6
 8007128:	bf28      	it	cs
 800712a:	463a      	movcs	r2, r7
 800712c:	f7ff fb32 	bl	8006794 <memcpy>
 8007130:	4631      	mov	r1, r6
 8007132:	4640      	mov	r0, r8
 8007134:	f7ff fc7e 	bl	8006a34 <_free_r>
 8007138:	e7e1      	b.n	80070fe <_realloc_r+0x1e>
 800713a:	4635      	mov	r5, r6
 800713c:	e7df      	b.n	80070fe <_realloc_r+0x1e>

0800713e <_malloc_usable_size_r>:
 800713e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007142:	1f18      	subs	r0, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfbc      	itt	lt
 8007148:	580b      	ldrlt	r3, [r1, r0]
 800714a:	18c0      	addlt	r0, r0, r3
 800714c:	4770      	bx	lr
	...

08007150 <_init>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	bf00      	nop
 8007154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007156:	bc08      	pop	{r3}
 8007158:	469e      	mov	lr, r3
 800715a:	4770      	bx	lr

0800715c <_fini>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	bf00      	nop
 8007160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007162:	bc08      	pop	{r3}
 8007164:	469e      	mov	lr, r3
 8007166:	4770      	bx	lr
